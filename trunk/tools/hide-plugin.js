// Generated by Haxe 4.3.0-rc.1+1be7f0489
var $hx_exports = typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this;
$hx_exports["hide"] = $hx_exports["hide"] || {};
var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this;
var $hxClasses = $hxClasses || {},$estr = function() { return js.Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EnumValue = {};
EnumValue.match = function(this1,pattern) {
	return false;
};
Math.__name__ = "Math";
var UInt = {};
UInt.add = function(a,b) {
	return a + b;
};
UInt.div = function(a,b) {
	return UInt.toFloat(a) / UInt.toFloat(b);
};
UInt.mul = function(a,b) {
	return a * b;
};
UInt.sub = function(a,b) {
	return a - b;
};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
UInt.lt = function(a,b) {
	return UInt.gt(b,a);
};
UInt.lte = function(a,b) {
	return UInt.gte(b,a);
};
UInt.and = function(a,b) {
	return a & b;
};
UInt.or = function(a,b) {
	return a | b;
};
UInt.xor = function(a,b) {
	return a ^ b;
};
UInt.shl = function(a,b) {
	return a << b;
};
UInt.shr = function(a,b) {
	return a >>> b;
};
UInt.ushr = function(a,b) {
	return a >>> b;
};
UInt.mod = function(a,b) {
	return UInt.toFloat(a) % UInt.toFloat(b) | 0;
};
UInt.addWithFloat = function(a,b) {
	return UInt.toFloat(a) + b;
};
UInt.mulWithFloat = function(a,b) {
	return UInt.toFloat(a) * b;
};
UInt.divFloat = function(a,b) {
	return UInt.toFloat(a) / b;
};
UInt.floatDiv = function(a,b) {
	return a / UInt.toFloat(b);
};
UInt.subFloat = function(a,b) {
	return UInt.toFloat(a) - b;
};
UInt.floatSub = function(a,b) {
	return a - UInt.toFloat(b);
};
UInt.gtFloat = function(a,b) {
	return UInt.toFloat(a) > b;
};
UInt.equalsInt = function(a,b) {
	return a == b;
};
UInt.notEqualsInt = function(a,b) {
	return a != b;
};
UInt.equalsFloat = function(a,b) {
	return UInt.toFloat(a) == b;
};
UInt.notEqualsFloat = function(a,b) {
	return UInt.toFloat(a) != b;
};
UInt.gteFloat = function(a,b) {
	return UInt.toFloat(a) >= b;
};
UInt.floatGt = function(a,b) {
	return a > UInt.toFloat(b);
};
UInt.floatGte = function(a,b) {
	return a >= UInt.toFloat(b);
};
UInt.ltFloat = function(a,b) {
	return UInt.toFloat(a) < b;
};
UInt.lteFloat = function(a,b) {
	return UInt.toFloat(a) <= b;
};
UInt.floatLt = function(a,b) {
	return a < UInt.toFloat(b);
};
UInt.floatLte = function(a,b) {
	return a <= UInt.toFloat(b);
};
UInt.modFloat = function(a,b) {
	return UInt.toFloat(a) % b;
};
UInt.floatMod = function(a,b) {
	return a % UInt.toFloat(b);
};
UInt.negBits = function(this1) {
	return ~this1;
};
UInt.prefixIncrement = function(this1) {
	return ++this1;
};
UInt.postfixIncrement = function(this1) {
	return this1++;
};
UInt.prefixDecrement = function(this1) {
	return --this1;
};
UInt.postfixDecrement = function(this1) {
	return this1--;
};
UInt.toString = function(this1,radix) {
	return Std.string(UInt.toFloat(this1));
};
UInt.toInt = function(this1) {
	return this1;
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
Math.__name__ = "Math";
var js = js || {};
if(!js.node) js.node = {};
js.node.ChildProcess = require("child_process");
js.node.Crypto = require("crypto");
js.node.Fs = require("fs");
js.node.Module = require("module");
js.node.Path = require("path");
if(!js.node.events) js.node.events = {};
js.node.events.EventEmitter = require("events").EventEmitter;
js.node.Stream = require("stream");
js.node.Timers = require("timers");
js.node.Util = require("util");
js.node.Zlib = require("zlib");
if(!js.node.buffer) js.node.buffer = {};
js.node.buffer.Buffer = require("buffer").Buffer;
if(!js.node.buffer._Buffer) js.node.buffer._Buffer = {};
js.node.buffer._Buffer.BufferModule = require("buffer");
if(!js.node.console) js.node.console = {};
js.node.console.Console = require("console").Console;
if(!js.node.stream) js.node.stream = {};
js.node.stream.Readable = require("stream").Readable;
js.node.stream.Duplex = require("stream").Duplex;
js.node.stream.Transform = require("stream").Transform;
js.node.stream.Writable = require("stream").Writable;
if(!js.node.url) js.node.url = {};
js.node.url.URL = require("url").URL;
js.node.url.URLSearchParams = require("url").URLSearchParams;
if(!js.node.zlib) js.node.zlib = {};
js.node.zlib.Deflate = require("zlib").Deflate;
js.node.zlib.DeflateRaw = require("zlib").DeflateRaw;
js.node.zlib.Gunzip = require("zlib").Gunzip;
js.node.zlib.Gzip = require("zlib").Gzip;
js.node.zlib.Inflate = require("zlib").Inflate;
js.node.zlib.InflateRaw = require("zlib").InflateRaw;
js.node.zlib.Unzip = require("zlib").Unzip;
var prefab = prefab || {};
prefab.WaterShader = $hxClasses["prefab.WaterShader"] = function() {
	this.maxDepth__ = 0;
	this.opacityPower__ = 0;
	this.roughness__ = 0;
	this.deepWaterColor__ = new h3d.Vector();
	this.middleWaterColor__ = new h3d.Vector();
	this.nearWaterColor__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
prefab.WaterShader.__name__ = "prefab.WaterShader";
prefab.WaterShader._SHADER = null;
prefab.WaterShader.__super__ = hxsl.Shader;
prefab.WaterShader.prototype = $extend(hxsl.Shader.prototype,{
	nearWaterColor__: null
	,get_nearWaterColor: function() {
		return this.nearWaterColor__;
	}
	,set_nearWaterColor: function(_v) {
		return this.nearWaterColor__ = _v;
	}
	,middleWaterColor__: null
	,get_middleWaterColor: function() {
		return this.middleWaterColor__;
	}
	,set_middleWaterColor: function(_v) {
		return this.middleWaterColor__ = _v;
	}
	,deepWaterColor__: null
	,get_deepWaterColor: function() {
		return this.deepWaterColor__;
	}
	,set_deepWaterColor: function(_v) {
		return this.deepWaterColor__ = _v;
	}
	,roughness__: null
	,get_roughness: function() {
		return this.roughness__;
	}
	,set_roughness: function(_v) {
		return this.roughness__ = _v;
	}
	,opacityPower__: null
	,get_opacityPower: function() {
		return this.opacityPower__;
	}
	,set_opacityPower: function(_v) {
		return this.opacityPower__ = _v;
	}
	,maxDepth__: null
	,get_maxDepth: function() {
		return this.maxDepth__;
	}
	,set_maxDepth: function(_v) {
		return this.maxDepth__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.nearWaterColor__;
		case 1:
			return this.middleWaterColor__;
		case 2:
			return this.deepWaterColor__;
		case 3:
			return this.roughness__;
		case 4:
			return this.opacityPower__;
		case 5:
			return this.maxDepth__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 3:
			return this.roughness__;
		case 4:
			return this.opacityPower__;
		case 5:
			return this.maxDepth__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.WaterShader.prototype);
		s.shader = this.shader;
		s.nearWaterColor__ = this.nearWaterColor__;
		s.middleWaterColor__ = this.middleWaterColor__;
		s.deepWaterColor__ = this.deepWaterColor__;
		s.roughness__ = this.roughness__;
		s.opacityPower__ = this.opacityPower__;
		s.maxDepth__ = this.maxDepth__;
		return s;
	}
	,__class__: prefab.WaterShader
	,__properties__: {set_maxDepth:"set_maxDepth",get_maxDepth:"get_maxDepth",set_opacityPower:"set_opacityPower",get_opacityPower:"get_opacityPower",set_roughness:"set_roughness",get_roughness:"get_roughness",set_deepWaterColor:"set_deepWaterColor",get_deepWaterColor:"get_deepWaterColor",set_middleWaterColor:"set_middleWaterColor",get_middleWaterColor:"get_middleWaterColor",set_nearWaterColor:"set_nearWaterColor",get_nearWaterColor:"get_nearWaterColor"}
});
prefab.Water = $hxClasses["prefab.Water"] = function(parent) {
	this.waterShader = new prefab.WaterShader();
	this.maxDepth = 5.0;
	this.opacityPower = 5.0;
	this.roughness = 0.0;
	this.deepWaterColor = 16777215;
	this.middleWaterColor = 16777215;
	this.nearWaterColor = 16777215;
	hrt.prefab.terrain.Terrain.call(this,parent);
};
prefab.Water.__name__ = "prefab.Water";
prefab.Water.__super__ = hrt.prefab.terrain.Terrain;
prefab.Water.prototype = $extend(hrt.prefab.terrain.Terrain.prototype,{
	nearWaterColor: null
	,middleWaterColor: null
	,deepWaterColor: null
	,roughness: null
	,opacityPower: null
	,maxDepth: null
	,waterShader: null
	,makeInstance: function(ctx) {
		ctx = hrt.prefab.terrain.Terrain.prototype.makeInstance.call(this,ctx);
		return ctx;
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.terrain.Terrain.prototype.updateInstance.call(this,ctx);
		var c = this.nearWaterColor;
		var s = 0.00392156862745098;
		this.waterShader.nearWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		var c = this.middleWaterColor;
		var s = 0.00392156862745098;
		this.waterShader.middleWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		var c = this.deepWaterColor;
		var s = 0.00392156862745098;
		this.waterShader.deepWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		this.waterShader.roughness__ = this.roughness;
		this.waterShader.opacityPower__ = this.opacityPower;
		this.waterShader.maxDepth__ = this.maxDepth;
	}
	,loadTiles: function(ctx) {
		hrt.prefab.terrain.Terrain.prototype.loadTiles.call(this,ctx);
		var _g = 0;
		var _g1 = this.terrain.tiles;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.material.passes.setPassName("decal");
			t.material.passes.setBlendMode(h2d.BlendMode.Alpha);
			t.material.passes.set_depthWrite(false);
			var terrainShader = t.material.passes.getShader(hrt.shader.Terrain);
			if(terrainShader != null) {
				t.material.passes.removeShader(terrainShader);
			}
			var shader = t.material.passes.getShader(prefab.WaterShader);
			if(shader == null) {
				t.material.passes.addShader(this.waterShader);
			}
			shader = t.material.passes.getShader(h3d.shader.pbr.StrengthValues);
			if(shader == null) {
				t.material.passes.addShader(new h3d.shader.pbr.StrengthValues());
			}
		}
	}
	,getHideProps: function() {
		return { icon : "square", name : "Water"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.terrain.Terrain.prototype.edit.call(this,ctx);
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Surface\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Cells</dt><dd><input type=\"range\" min=\"1\" max=\"100\" step=\"1\" field=\"cellCount\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Color\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Near Water Color </dt><dd><input type=\"color\" field=\"nearWaterColor\"/></dd>\r\n\t\t\t\t\t<dt>Middle Water Color</dt><dd><input type=\"color\" field=\"middleWaterColor\"/></dd>\r\n\t\t\t\t\t<dt>Deep Water Color</dt><dd><input type=\"color\" field=\"deepWaterColor\"/></dd>\r\n\t\t\t\t\t<dt>Roughness</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"roughness\"/></dd>\r\n\t\t\t\t\t<dt>Opacity Power</dt><dd><input type=\"range\" min=\"0\" max=\"5\" field=\"opacityPower\"/></dd>\r\n\t\t\t\t\t<dt>Lake max depth</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"maxDepth\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Color Noise\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"colorNoiseTexture\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"colorNoiseScale\"/></dd>\r\n\t\t\t\t\t<dt>Strength</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"colorNoiseStrength\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Wave\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>NormalMap</dt><dd><input type=\"texturepath\" field=\"normalMap\"/></dd>\r\n\t\t\t\t\t<dt>Wave Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"waveIntensity\"/></dd>\r\n\t\t\t\t\t<dt>Wave Scale</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"waveScale\"/></dd>\r\n\t\t\t\t\t<dt>Wave Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"waveSpeed\"/></dd>\r\n\t\t\t\t\t<dt>2d Wave Scale</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"secondWaveScale\"/></dd>\r\n\t\t\t\t\t<dt>2d Wave Rotate</dt><dd><input type=\"range\" min=\"-180\" max=\"180\" field=\"secondWaveRotate\"/></dd>\r\n\t\t\t\t\t<dt>2d Wave Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"secondWaveSpeed\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Reflections\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Reflections</dt><dd><input type=\"checkbox\" field=\"reflections\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Collisions\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Collide WorldMap</dt><dd><input type=\"checkbox\" field=\"collide\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.terrain.Terrain.prototype.saveSerializedFields.call(this,obj);
		if(this.nearWaterColor != 16777215) {
			obj.nearWaterColor = this.nearWaterColor;
		}
		if(this.middleWaterColor != 16777215) {
			obj.middleWaterColor = this.middleWaterColor;
		}
		if(this.deepWaterColor != 16777215) {
			obj.deepWaterColor = this.deepWaterColor;
		}
		if(this.roughness != 0.0) {
			obj.roughness = this.roughness;
		}
		if(this.opacityPower != 5.0) {
			obj.opacityPower = this.opacityPower;
		}
		if(this.maxDepth != 5.0) {
			obj.maxDepth = this.maxDepth;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.terrain.Terrain.prototype.loadSerializedFields.call(this,obj);
		this.nearWaterColor = obj.nearWaterColor == null ? 16777215 : obj.nearWaterColor;
		this.middleWaterColor = obj.middleWaterColor == null ? 16777215 : obj.middleWaterColor;
		this.deepWaterColor = obj.deepWaterColor == null ? 16777215 : obj.deepWaterColor;
		this.roughness = obj.roughness == null ? 0.0 : obj.roughness;
		this.opacityPower = obj.opacityPower == null ? 5.0 : obj.opacityPower;
		this.maxDepth = obj.maxDepth == null ? 5.0 : obj.maxDepth;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.terrain.Terrain.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.nearWaterColor = p1.nearWaterColor;
		this.middleWaterColor = p1.middleWaterColor;
		this.deepWaterColor = p1.deepWaterColor;
		this.roughness = p1.roughness;
		this.opacityPower = p1.opacityPower;
		this.maxDepth = p1.maxDepth;
	}
	,__class__: prefab.Water
});
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
prefab.WaterShader.SRC = "HXSLEnByZWZhYi5XYXRlclNoYWRlchUBBWlucHV0DQEBAghwb3NpdGlvbgULAQEAAQAAAwZnbG9iYWwNAgIEBHRpbWUDAAMABQltb2RlbFZpZXcHAAMBAwAAAAYGb3V0cHV0DQMBBwhwb3NpdGlvbgUMBAYABAAACAZjYW1lcmENBAIJD2ludmVyc2VWaWV3UHJvagcACAAKD2ludmVyc2VWaWV3UHJvagcACAAAAAALCGRlcHRoTWFwEQEAAAAMDm5lYXJXYXRlckNvbG9yBQsCAAANEG1pZGRsZVdhdGVyQ29sb3IFCwIAAA4OZGVlcFdhdGVyQ29sb3IFCwIAAA8Jcm91Z2huZXNzAwIAABAMb3BhY2l0eVBvd2VyAwIAABEIbWF4RGVwdGgDAgAAEhByZWxhdGl2ZVBvc2l0aW9uBQsEAAATEXByb2plY3RlZFBvc2l0aW9uBQwEAAAUDnRhbmdlbnRWaWV3UG9zBQsEAAAVDnRhbmdlbnRGcmFnUG9zBQsEAAAWE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAABcRdHJhbnNmb3JtZWROb3JtYWwFCwQAABgNdGVycmFpbk5vcm1hbAULBAAAGQpwaXhlbENvbG9yBQwEAAAaBnZlcnRleA4GAAAbCGZyYWdtZW50DgYAAAIAGgAABQIGBAIXBQsJAykOAwEDAAAAAAAA8D8DAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwULBQsGgAoCFgULkgAFCwkDKQ4DAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwYBAQOamZmZmZnJPwMJAwIOAQYACgIWBQsAAAMCBAMDAwMFCwULAAEbAAAFDggcCXNjcmVlblBvcwUKBAAABgIKAhMFDBEABQoKAhMFDAwAAwUKAAgdBWRlcHRoAwQAAAkDPw4CAgsRAQkDOg4BAhwFCgUKAwAIHgNydXYFDAQAAAkDKg4DAhwFCgIdAwEDAAAAAAAA8D8DBQwACB8EcHBvcwUMBAAABgECHgUMAgkHBQwACCAEd3BvcwULBAAABgIKAh8FDJIABQsKAh8FDAwAAwULAAghCndhdGVyRGVwdGgDBAAACQMcDgIKAiAFC5IABQsCFgULAwAIIgJwMAMEAAABAwAAAAAAAAAAAwAIIwJwMQMEAAABAzMzMzMzM+M/AwAIJAJwMgMEAAABAwAAAAAAAPA/AwAIJQF0AwQAAAkDNQ4BBgMBAwAAAAAAAPA/AwYCAiEDAhEDAwMDAAgmCndhdGVyQ29sb3IFCwQAAAkDGA4DAg4FCwkDGA4DAg0FCwIMBQsJAxoOAwIjAwIkAwIlAwMFCwkDGg4DAiIDAiMDAiUDAwULAAgnB29wYWNpdHkDBAAACQMYDgMBA5qZmZmZmck/AwEDAAAAAAAA8D8DCQMIDgIGAwEDAAAAAAAA8D8DAiUDAwIQAwMDAAYECgIZBQyTAwUMCQMqDgICJgULAicDBQwFDAYEAhcFCwkDKQ4DAQMAAAAAAADwPwMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQsFCwA";
prefab.Water._ = hrt.prefab.Library.register("water",prefab.Water);

//# sourceMappingURL=hide-plugin.js.map