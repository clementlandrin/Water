// Generated by Haxe 4.3.0-rc.1+1be7f0489
var $hx_exports = typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this;
$hx_exports["hide"] = $hx_exports["hide"] || {};
$hx_exports["lib"] = $hx_exports["lib"] || {};
var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this;
var $hxClasses = $hxClasses || {},$estr = function() { return js.Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Const = $hxClasses["Const"] = function() { };
Const.__name__ = "Const";
var EnumValue = {};
EnumValue.match = function(this1,pattern) {
	return false;
};
Math.__name__ = "Math";
var UInt = {};
UInt.add = function(a,b) {
	return a + b;
};
UInt.div = function(a,b) {
	return UInt.toFloat(a) / UInt.toFloat(b);
};
UInt.mul = function(a,b) {
	return a * b;
};
UInt.sub = function(a,b) {
	return a - b;
};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
UInt.lt = function(a,b) {
	return UInt.gt(b,a);
};
UInt.lte = function(a,b) {
	return UInt.gte(b,a);
};
UInt.and = function(a,b) {
	return a & b;
};
UInt.or = function(a,b) {
	return a | b;
};
UInt.xor = function(a,b) {
	return a ^ b;
};
UInt.shl = function(a,b) {
	return a << b;
};
UInt.shr = function(a,b) {
	return a >>> b;
};
UInt.ushr = function(a,b) {
	return a >>> b;
};
UInt.mod = function(a,b) {
	return UInt.toFloat(a) % UInt.toFloat(b) | 0;
};
UInt.addWithFloat = function(a,b) {
	return UInt.toFloat(a) + b;
};
UInt.mulWithFloat = function(a,b) {
	return UInt.toFloat(a) * b;
};
UInt.divFloat = function(a,b) {
	return UInt.toFloat(a) / b;
};
UInt.floatDiv = function(a,b) {
	return a / UInt.toFloat(b);
};
UInt.subFloat = function(a,b) {
	return UInt.toFloat(a) - b;
};
UInt.floatSub = function(a,b) {
	return a - UInt.toFloat(b);
};
UInt.gtFloat = function(a,b) {
	return UInt.toFloat(a) > b;
};
UInt.equalsInt = function(a,b) {
	return a == b;
};
UInt.notEqualsInt = function(a,b) {
	return a != b;
};
UInt.equalsFloat = function(a,b) {
	return UInt.toFloat(a) == b;
};
UInt.notEqualsFloat = function(a,b) {
	return UInt.toFloat(a) != b;
};
UInt.gteFloat = function(a,b) {
	return UInt.toFloat(a) >= b;
};
UInt.floatGt = function(a,b) {
	return a > UInt.toFloat(b);
};
UInt.floatGte = function(a,b) {
	return a >= UInt.toFloat(b);
};
UInt.ltFloat = function(a,b) {
	return UInt.toFloat(a) < b;
};
UInt.lteFloat = function(a,b) {
	return UInt.toFloat(a) <= b;
};
UInt.floatLt = function(a,b) {
	return a < UInt.toFloat(b);
};
UInt.floatLte = function(a,b) {
	return a <= UInt.toFloat(b);
};
UInt.modFloat = function(a,b) {
	return UInt.toFloat(a) % b;
};
UInt.floatMod = function(a,b) {
	return a % UInt.toFloat(b);
};
UInt.negBits = function(this1) {
	return ~this1;
};
UInt.prefixIncrement = function(this1) {
	return ++this1;
};
UInt.postfixIncrement = function(this1) {
	return this1++;
};
UInt.prefixDecrement = function(this1) {
	return --this1;
};
UInt.postfixDecrement = function(this1) {
	return this1--;
};
UInt.toString = function(this1,radix) {
	return Std.string(UInt.toFloat(this1));
};
UInt.toInt = function(this1) {
	return this1;
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var gfx = gfx || {};
gfx.IndirectBlend = $hxClasses["gfx.IndirectBlend"] = function() {
	this.powerOverride__ = 0;
	this.irrSpecularLevelsB__ = 0;
	this.irrSpecularLevelsA__ = 0;
	this.blendAmount__ = 0;
	h3d.shader.pbr.Indirect.call(this);
};
gfx.IndirectBlend.__name__ = "gfx.IndirectBlend";
gfx.IndirectBlend._SHADER = null;
gfx.IndirectBlend.__super__ = h3d.shader.pbr.Indirect;
gfx.IndirectBlend.prototype = $extend(h3d.shader.pbr.Indirect.prototype,{
	USE_BLEND__: null
	,get_USE_BLEND: function() {
		return this.USE_BLEND__;
	}
	,set_USE_BLEND: function(_v) {
		this.constModified = true;
		return this.USE_BLEND__ = _v;
	}
	,irrDiffuseA__: null
	,get_irrDiffuseA: function() {
		return this.irrDiffuseA__;
	}
	,set_irrDiffuseA: function(_v) {
		return this.irrDiffuseA__ = _v;
	}
	,irrSpecularA__: null
	,get_irrSpecularA: function() {
		return this.irrSpecularA__;
	}
	,set_irrSpecularA: function(_v) {
		return this.irrSpecularA__ = _v;
	}
	,irrDiffuseB__: null
	,get_irrDiffuseB: function() {
		return this.irrDiffuseB__;
	}
	,set_irrDiffuseB: function(_v) {
		return this.irrDiffuseB__ = _v;
	}
	,irrSpecularB__: null
	,get_irrSpecularB: function() {
		return this.irrSpecularB__;
	}
	,set_irrSpecularB: function(_v) {
		return this.irrSpecularB__ = _v;
	}
	,blendAmount__: null
	,get_blendAmount: function() {
		return this.blendAmount__;
	}
	,set_blendAmount: function(_v) {
		return this.blendAmount__ = _v;
	}
	,irrSpecularLevelsA__: null
	,get_irrSpecularLevelsA: function() {
		return this.irrSpecularLevelsA__;
	}
	,set_irrSpecularLevelsA: function(_v) {
		return this.irrSpecularLevelsA__ = _v;
	}
	,irrSpecularLevelsB__: null
	,get_irrSpecularLevelsB: function() {
		return this.irrSpecularLevelsB__;
	}
	,set_irrSpecularLevelsB: function(_v) {
		return this.irrSpecularLevelsB__ = _v;
	}
	,powerOverride__: null
	,get_powerOverride: function() {
		return this.powerOverride__;
	}
	,set_powerOverride: function(_v) {
		return this.powerOverride__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.drawIndirectDiffuse__) {
			this.constBits |= 1;
		}
		if(this.drawIndirectSpecular__) {
			this.constBits |= 2;
		}
		if(this.showSky__) {
			this.constBits |= 4;
		}
		if(this.skyColor__) {
			this.constBits |= 8;
		}
		if(this.gammaCorrect__) {
			this.constBits |= 16;
		}
		if(this.USE_BLEND__) {
			this.constBits |= 32;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.cameraPosition__;
		case 1:
			return this.drawIndirectDiffuse__;
		case 2:
			return this.drawIndirectSpecular__;
		case 3:
			return this.showSky__;
		case 4:
			return this.skyColor__;
		case 5:
			return this.irrLut__;
		case 6:
			return this.irrDiffuse__;
		case 7:
			return this.irrSpecular__;
		case 8:
			return this.irrSpecularLevels__;
		case 9:
			return this.irrPower__;
		case 10:
			return this.irrRotation__;
		case 11:
			return this.skyMap__;
		case 12:
			return this.skyHdrMax__;
		case 13:
			return this.gammaCorrect__;
		case 14:
			return this.cameraInvViewProj__;
		case 15:
			return this.skyColorValue__;
		case 16:
			return this.emissivePower__;
		case 17:
			return this.USE_BLEND__;
		case 18:
			return this.irrDiffuseA__;
		case 19:
			return this.irrSpecularA__;
		case 20:
			return this.irrDiffuseB__;
		case 21:
			return this.irrSpecularB__;
		case 22:
			return this.blendAmount__;
		case 23:
			return this.irrSpecularLevelsA__;
		case 24:
			return this.irrSpecularLevelsB__;
		case 25:
			return this.powerOverride__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 8:
			return this.irrSpecularLevels__;
		case 9:
			return this.irrPower__;
		case 12:
			return this.skyHdrMax__;
		case 16:
			return this.emissivePower__;
		case 22:
			return this.blendAmount__;
		case 23:
			return this.irrSpecularLevelsA__;
		case 24:
			return this.irrSpecularLevelsB__;
		case 25:
			return this.powerOverride__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(gfx.IndirectBlend.prototype);
		s.shader = this.shader;
		s.cameraPosition__ = this.cameraPosition__;
		s.drawIndirectDiffuse__ = this.drawIndirectDiffuse__;
		s.drawIndirectSpecular__ = this.drawIndirectSpecular__;
		s.showSky__ = this.showSky__;
		s.skyColor__ = this.skyColor__;
		s.irrLut__ = this.irrLut__;
		s.irrDiffuse__ = this.irrDiffuse__;
		s.irrSpecular__ = this.irrSpecular__;
		s.irrSpecularLevels__ = this.irrSpecularLevels__;
		s.irrPower__ = this.irrPower__;
		s.irrRotation__ = this.irrRotation__;
		s.skyMap__ = this.skyMap__;
		s.skyHdrMax__ = this.skyHdrMax__;
		s.gammaCorrect__ = this.gammaCorrect__;
		s.cameraInvViewProj__ = this.cameraInvViewProj__;
		s.skyColorValue__ = this.skyColorValue__;
		s.emissivePower__ = this.emissivePower__;
		s.USE_BLEND__ = this.USE_BLEND__;
		s.irrDiffuseA__ = this.irrDiffuseA__;
		s.irrSpecularA__ = this.irrSpecularA__;
		s.irrDiffuseB__ = this.irrDiffuseB__;
		s.irrSpecularB__ = this.irrSpecularB__;
		s.blendAmount__ = this.blendAmount__;
		s.irrSpecularLevelsA__ = this.irrSpecularLevelsA__;
		s.irrSpecularLevelsB__ = this.irrSpecularLevelsB__;
		s.powerOverride__ = this.powerOverride__;
		return s;
	}
	,__class__: gfx.IndirectBlend
	,__properties__: $extend(h3d.shader.pbr.Indirect.prototype.__properties__,{set_powerOverride:"set_powerOverride",get_powerOverride:"get_powerOverride",set_irrSpecularLevelsB:"set_irrSpecularLevelsB",get_irrSpecularLevelsB:"get_irrSpecularLevelsB",set_irrSpecularLevelsA:"set_irrSpecularLevelsA",get_irrSpecularLevelsA:"get_irrSpecularLevelsA",set_blendAmount:"set_blendAmount",get_blendAmount:"get_blendAmount",set_irrSpecularB:"set_irrSpecularB",get_irrSpecularB:"get_irrSpecularB",set_irrDiffuseB:"set_irrDiffuseB",get_irrDiffuseB:"get_irrDiffuseB",set_irrSpecularA:"set_irrSpecularA",get_irrSpecularA:"get_irrSpecularA",set_irrDiffuseA:"set_irrDiffuseA",get_irrDiffuseA:"get_irrDiffuseA",set_USE_BLEND:"set_USE_BLEND",get_USE_BLEND:"get_USE_BLEND"})
});
gfx.FadeShader = $hxClasses["gfx.FadeShader"] = function() {
	this.fadeFactor__ = 0;
	this.fadeColor__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
gfx.FadeShader.__name__ = "gfx.FadeShader";
gfx.FadeShader._SHADER = null;
gfx.FadeShader.__super__ = hxsl.Shader;
gfx.FadeShader.prototype = $extend(hxsl.Shader.prototype,{
	fadeColor__: null
	,get_fadeColor: function() {
		return this.fadeColor__;
	}
	,set_fadeColor: function(_v) {
		return this.fadeColor__ = _v;
	}
	,fadeFactor__: null
	,get_fadeFactor: function() {
		return this.fadeFactor__;
	}
	,set_fadeFactor: function(_v) {
		return this.fadeFactor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.fadeColor__;
		case 1:
			return this.fadeFactor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.fadeFactor__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(gfx.FadeShader.prototype);
		s.shader = this.shader;
		s.fadeColor__ = this.fadeColor__;
		s.fadeFactor__ = this.fadeFactor__;
		return s;
	}
	,__class__: gfx.FadeShader
	,__properties__: {set_fadeFactor:"set_fadeFactor",get_fadeFactor:"get_fadeFactor",set_fadeColor:"set_fadeColor",get_fadeColor:"get_fadeColor"}
});
gfx.Renderer = $hxClasses["gfx.Renderer"] = function() {
	this.outlineBlur = new h3d.pass.Blur(4);
	this.outline = new h3d.pass.ScreenFx(new hide.ScreenOutline());
	this.depthOutput = new h3d.pass.Output("depth",[hxsl.Output.Vec4([hxsl.Output.Value("output.depth"),hxsl.Output.Const(0),hxsl.Output.Const(0),h3d.scene.pbr.Renderer.ALPHA])]);
	this.extraOutput = new h3d.pass.Output("extra",[hxsl.Output.Vec4([hxsl.Output.Const(1),hxsl.Output.Value("output.extra"),hxsl.Output.Const(0),h3d.scene.pbr.Renderer.ALPHA])]);
	this.pbrIndirectBlend = new gfx.IndirectBlend();
	this.drawHuds = true;
	this.albedoBgColor = 0;
	h3d.scene.pbr.Renderer.call(this,h3d.scene.pbr.Environment.getDefault());
	this.pbrOut.removeShader(this.pbrIndirect);
	this.pbrIndirect = this.pbrIndirectBlend;
	this.pbrOut.addShader(this.pbrIndirectBlend);
	this.fadeShader = this.fxaa.addShader(new gfx.FadeShader());
	this.allPasses.push(this.extraOutput);
	this.allPasses.push(this.depthOutput);
	this.outline.pass.setBlendMode(h2d.BlendMode.Alpha);
};
gfx.Renderer.__name__ = "gfx.Renderer";
gfx.Renderer.__super__ = h3d.scene.pbr.Renderer;
gfx.Renderer.prototype = $extend(h3d.scene.pbr.Renderer.prototype,{
	albedoBgColor: null
	,drawHuds: null
	,pbrIndirectBlend: null
	,extraOutput: null
	,depthOutput: null
	,fadeShader: null
	,decalSort: function(passes) {
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			p.depth = p.obj.absPos._43;
			if(((p.obj) instanceof prefab.TerrainPathObject)) {
				p.depth = Infinity;
			}
		}
		var list = passes.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? 1 : -1 : p.pass.layer - q.pass.layer) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
	,outline: null
	,outlineBlur: null
	,mark: function(id) {
	}
	,getPassByName: function(name) {
		switch(name) {
		case "highlight":case "highlightBack":
			return this.defaultPass;
		}
		return h3d.scene.pbr.Renderer.prototype.getPassByName.call(this,name);
	}
	,initGlobals: function() {
		h3d.scene.pbr.Renderer.prototype.initGlobals.call(this);
		var value = { texture : this.textures.other, channel : hxsl.Channel.B};
		this.ctx.setGlobalID(hxsl.Globals.allocID("extraMap"),value);
	}
	,end: function() {
		switch(this.currentStep._hx_index) {
		case 0:
			break;
		case 6:
			var depth = true;
			if(depth == null) {
				depth = true;
			}
			var outlineTex = this.ctx.textures.allocTarget("outline",Math.round(this.ctx.engine.width * 1.),Math.round(this.ctx.engine.height * 1.),depth,null);
			this.ctx.engine.pushTarget(outlineTex);
			this.ctx.engine.clear(0,null,null);
			this.draw("highlightBack");
			this.draw("highlight");
			this.ctx.engine.popTarget();
			var depth = false;
			if(depth == null) {
				depth = true;
			}
			var outlineBlurTex = this.ctx.textures.allocTarget("outlineBlur",Math.round(this.ctx.engine.width * 1.),Math.round(this.ctx.engine.height * 1.),depth,null);
			this.outlineBlur.apply(this.ctx,outlineTex,outlineBlurTex);
			this.outline.shader.texture__ = outlineBlurTex;
			this.outline.render();
			this.renderPass(this.defaultPass,this.get("debuggeom"),this.backToFront);
			this.renderPass(this.defaultPass,this.get("debuggeom_alpha"),this.backToFront);
			break;
		case 7:
			this.renderPass(this.defaultPass,this.get("overlay"),this.backToFront);
			this.renderPass(this.defaultPass,this.get("ui"),this.backToFront);
			break;
		default:
		}
		h3d.scene.pbr.Renderer.prototype.end.call(this);
	}
	,beginPbr: function() {
		h3d.scene.pbr.Renderer.prototype.beginPbr.call(this);
		var _this = this.pbrIndirectBlend;
		_this.constModified = true;
		_this.USE_BLEND__ = this.pbrIndirectBlend.irrDiffuseA__ != null && this.pbrIndirectBlend.irrDiffuseB__ != null;
		if(this.pbrIndirectBlend.USE_BLEND__) {
			this.pbrIndirectBlend.irrPower__ = this.pbrIndirectBlend.powerOverride__;
		}
	}
	,drawPbrDecals: function(passName) {
		var passes = this.get(passName);
		if(passes.current == null) {
			return;
		}
		this.ctx.engine.pushTargets([this.textures.albedo,this.textures.normal,this.textures.pbr]);
		this.renderPass(this.decalsOutput,passes,$bind(this,this.decalSort));
		this.ctx.engine.popTarget();
	}
	,drawEmissiveDecals: function(passName) {
		var passes = this.get(passName);
		if(passes.current == null) {
			return;
		}
		this.ctx.engine.pushTargets([this.textures.albedo,this.textures.normal,this.textures.pbr,this.textures.other]);
		this.renderPass(this.emissiveDecalsOutput,passes,$bind(this,this.decalSort));
		this.ctx.engine.popTarget();
	}
	,render: function() {
		this.beginPbr();
		this.setTarget(this.textures.depth);
		this.ctx.engine.clearF(new h3d.Vector(1));
		this.setTargets([this.textures.albedo,this.textures.normal,this.textures.pbr,this.textures.other]);
		this.ctx.engine.clear(this.albedoBgColor,1,0);
		this.setTargets([this.textures.albedo,this.textures.normal,this.textures.pbr,this.textures.other,this.textures.depth]);
		this.begin(h3d.impl.Step.MainDraw);
		this.renderPass(this.output,this.get("terrain"));
		this.drawPbrDecals("terrainDecal");
		this.renderPass(this.output,this.get("default"),this.frontToBack);
		this.renderPass(this.output,this.get("alpha"),this.backToFront);
		this.renderPass(this.output,this.get("additive"));
		this.end();
		this.begin(h3d.impl.Step.Decals);
		this.drawPbrDecals("decal");
		this.drawEmissiveDecals("emissiveDecal");
		this.end();
		this.begin(h3d.impl.Step.Custom("depthWrite"));
		this.setTarget(this.textures.depth);
		this.renderPass(this.depthOutput,this.get("depthWrite"));
		this.end();
		var extra = this.get("extra");
		if(extra != null) {
			this.setTarget(this.textures.other);
			this.renderPass(this.extraOutput,extra);
		}
		this.setTarget(this.textures.hdr);
		this.ctx.engine.clear(0,null,null);
		this.lighting();
		this.begin(h3d.impl.Step.Forward);
		var value = this.getLightSystem();
		var ls = ((value) instanceof h3d.scene.pbr.LightSystem) ? value : null;
		ls.forwardMode = true;
		this.draw("forward");
		this.renderPass(this.defaultPass,this.get("forwardAlpha"),this.backToFront);
		ls.forwardMode = false;
		this.end();
		if(this.renderMode == h3d.scene.RenderMode.LightProbe) {
			this.resetTarget();
			this.copy(this.textures.hdr,null);
			var h = this.passObjects.h;
			var p_h = h;
			var p_keys = Object.keys(h);
			var p_length = p_keys.length;
			var p_current = 0;
			while(p_current < p_length) {
				var p = p_h[p_keys[p_current++]];
				if(p != null) {
					p.rendered = true;
				}
			}
			return;
		}
		this.begin(h3d.impl.Step.BeforeTonemapping);
		this.draw("beforeTonemappingDecal");
		this.draw("beforeTonemapping");
		this.end();
		this.setTarget(this.textures.ldr);
		this.tonemap.render();
		var isBattle = false;
		this.begin(h3d.impl.Step.AfterTonemapping);
		this.drawWorldFOW();
		this.draw("afterTonemappingDecal");
		this.draw("afterTonemapping");
		if(!isBattle) {
			this.draw("outline");
		}
		this.end();
		this.begin(h3d.impl.Step.Overlay);
		if(isBattle) {
			this.draw("outline");
		}
		this.draw("overlay");
		this.end();
		this.endPbr();
	}
	,drawWorldFOW: function() {
	}
	,__class__: gfx.Renderer
});
if(!gfx.shader) gfx.shader = {};
gfx.shader.ColorizeShader = $hxClasses["gfx.shader.ColorizeShader"] = function(color,specTexture) {
	this.color__ = new h3d.Vector();
	hxsl.Shader.call(this);
	this.specTexture__ = specTexture;
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
gfx.shader.ColorizeShader.__name__ = "gfx.shader.ColorizeShader";
gfx.shader.ColorizeShader._SHADER = null;
gfx.shader.ColorizeShader.__super__ = hxsl.Shader;
gfx.shader.ColorizeShader.prototype = $extend(hxsl.Shader.prototype,{
	color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,specTexture__: null
	,get_specTexture: function() {
		return this.specTexture__;
	}
	,set_specTexture: function(_v) {
		return this.specTexture__ = _v;
	}
	,invert__: null
	,get_invert: function() {
		return this.invert__;
	}
	,set_invert: function(_v) {
		this.constModified = true;
		return this.invert__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.invert__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specTexture__;
		case 2:
			return this.invert__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(gfx.shader.ColorizeShader.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.specTexture__ = this.specTexture__;
		s.invert__ = this.invert__;
		return s;
	}
	,__class__: gfx.shader.ColorizeShader
	,__properties__: {set_invert:"set_invert",get_invert:"get_invert",set_specTexture:"set_specTexture",get_specTexture:"get_specTexture",set_color:"set_color",get_color:"get_color"}
});
Math.__name__ = "Math";
var js = js || {};
if(!js.node) js.node = {};
js.node.ChildProcess = require("child_process");
js.node.Crypto = require("crypto");
js.node.Fs = require("fs");
js.node.Module = require("module");
js.node.Path = require("path");
if(!js.node.events) js.node.events = {};
js.node.events.EventEmitter = require("events").EventEmitter;
js.node.Stream = require("stream");
js.node.Timers = require("timers");
js.node.Util = require("util");
js.node.Zlib = require("zlib");
if(!js.node.buffer) js.node.buffer = {};
js.node.buffer.Buffer = require("buffer").Buffer;
if(!js.node.buffer._Buffer) js.node.buffer._Buffer = {};
js.node.buffer._Buffer.BufferModule = require("buffer");
if(!js.node.console) js.node.console = {};
js.node.console.Console = require("console").Console;
if(!js.node.stream) js.node.stream = {};
js.node.stream.Readable = require("stream").Readable;
js.node.stream.Duplex = require("stream").Duplex;
js.node.stream.Transform = require("stream").Transform;
js.node.stream.Writable = require("stream").Writable;
if(!js.node.url) js.node.url = {};
js.node.url.URL = require("url").URL;
js.node.url.URLSearchParams = require("url").URLSearchParams;
if(!js.node.zlib) js.node.zlib = {};
js.node.zlib.Deflate = require("zlib").Deflate;
js.node.zlib.DeflateRaw = require("zlib").DeflateRaw;
js.node.zlib.Gunzip = require("zlib").Gunzip;
js.node.zlib.Gzip = require("zlib").Gzip;
js.node.zlib.Inflate = require("zlib").Inflate;
js.node.zlib.InflateRaw = require("zlib").InflateRaw;
js.node.zlib.Unzip = require("zlib").Unzip;
var lib = lib || {};
lib.OpenWorldMaterialSetup = $hxClasses["lib.OpenWorldMaterialSetup"] = $hx_exports["lib"]["OpenWorldMaterialSetup"] = function() {
	h3d.mat.PbrMaterialSetup.call(this,"PBR");
	this.displayName = "OpenWorld";
};
lib.OpenWorldMaterialSetup.__name__ = "lib.OpenWorldMaterialSetup";
lib.OpenWorldMaterialSetup.__super__ = h3d.mat.PbrMaterialSetup;
lib.OpenWorldMaterialSetup.prototype = $extend(h3d.mat.PbrMaterialSetup.prototype,{
	createRenderer: function() {
		return new gfx.Renderer();
	}
	,__class__: lib.OpenWorldMaterialSetup
});
lib.ScriptConfiguration = $hxClasses["lib.ScriptConfiguration"] = function(checker) {
	var chk = checker.checker;
	switch(checker.documentName) {
	case "cdb.element.script":
		var group = checker.constants.h["cdb.groupID"];
		if(group == null) {
			return;
		}
		this.addWorldVars(chk);
		var region = group.split("/")[2];
		chk.allowGlobalsDefine = false;
		var file = hide.Ide.inst.getPath("content/script/" + region + ".hx");
		if(!sys.FileSystem.exists(file)) {
			return;
		}
		chk.allowGlobalsDefine = true;
		var ast = this.makeParser().parseString(js.node.Fs.readFileSync(file,{ encoding : "utf8"}));
		chk.check(ast);
		var h = chk.locals.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var name = _g1_key;
			var type = _g1_value;
			chk.setGlobal(name,type);
		}
		chk.allowGlobalsDefine = false;
		break;
	case "hx":
		this.addWorldVars(chk);
		break;
	default:
	}
};
lib.ScriptConfiguration.__name__ = "lib.ScriptConfiguration";
lib.ScriptConfiguration.prototype = {
	makeParser: function() {
		var parser = new hscript.Parser();
		parser.allowTypes = true;
		parser.allowMetadata = true;
		return parser;
	}
	,addWorldVars: function(chk) {
		var parser = this.makeParser();
		chk.allowGlobalsDefine = true;
		var worldFile = hide.Ide.inst.getPath("content/script/World.hx");
		var worldAst = parser.parseString(js.node.Fs.readFileSync(worldFile,{ encoding : "utf8"}));
		chk.check(worldAst);
		var h = chk.locals.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var name = _g1_key;
			var type = _g1_value;
			var tmp;
			if(type._hx_index == 13) {
				var _g = type.args;
				var _g1 = type.ret;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp && HxOverrides.substr(name,0,2) == "on" && HxOverrides.cca(name,2) >= 65 && HxOverrides.cca(name,2) <= 90) {
				continue;
			}
			chk.setGlobal(name,type);
		}
	}
	,__class__: lib.ScriptConfiguration
};
lib.Utils = $hxClasses["lib.Utils"] = function() { };
lib.Utils.__name__ = "lib.Utils";
lib.Utils.mapRange = function(inVal,inMin,inMax,outMin,outMax) {
	var f = (inVal - inMin) / (inMax - inMin);
	var min = 0;
	var max = 1;
	if(max == null) {
		max = 1.;
	}
	if(min == null) {
		min = 0.;
	}
	var t = f < min ? min : f > max ? max : f;
	return outMin + t * (outMax - outMin);
};
lib.Utils.toVector = function(pt,z) {
	return new h3d.Vector(pt.x,pt.y,z);
};
lib.Utils.to2D = function(vec) {
	return new h2d.col.Point(vec.x,vec.y);
};
lib.Utils.toDirection = function(pt) {
	return Math.atan2(pt.y,pt.x);
};
lib.Utils.mapIter = function(map,func) {
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		var v = map.get(k1);
		func(k1,v);
	}
};
lib.Utils.iterRand = function(a,func) {
	var len = a.length;
	var offset = Std.random(len);
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var idx = (i + offset) % len;
		var item = a[idx];
		func(idx,item);
	}
};
lib.Utils.findRand = function(a,func,rnd) {
	var len = a.length;
	var offset;
	if(rnd != null) {
		rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
		rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
		offset = (((rnd.seed << 16) + rnd.seed2 | 0) & 1073741823) % len;
	} else {
		offset = Std.random(len);
	}
	var ret = null;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var idx = (i + offset) % len;
		var item = a[idx];
		ret = func(idx,item);
		if(ret != null) {
			break;
		}
	}
	return ret;
};
lib.Utils.flatten = function(arrs) {
	var ret = [];
	var _g = 0;
	while(_g < arrs.length) {
		var a = arrs[_g];
		++_g;
		ret = ret.concat(a);
	}
	return ret;
};
lib.Utils.last = function(a) {
	return a[a.length - 1];
};
lib.Utils.clear = function(a) {
	while(a.length > 0) a.pop();
};
lib.Utils.pushUnique = function(a,item) {
	if(a.indexOf(item) < 0) {
		a.push(item);
	}
};
lib.Utils.appendUnique = function(a,items) {
	var _g = 0;
	while(_g < items.length) {
		var item = items[_g];
		++_g;
		if(a.indexOf(item) < 0) {
			a.push(item);
		}
	}
};
lib.Utils.shuffle = function(a,rnd) {
	var len = a.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var y;
		if(rnd != null) {
			rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
			rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
			y = (((rnd.seed << 16) + rnd.seed2 | 0) & 1073741823) % len;
		} else {
			y = Std.random(len);
		}
		var tmp = a[i];
		a[i] = a[y];
		a[y] = tmp;
	}
};
lib.Utils.pickRandom = function(a,rnd) {
	if(a.length == 0) {
		return null;
	}
	var tmp;
	if(rnd != null) {
		rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
		rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
		tmp = (((rnd.seed << 16) + rnd.seed2 | 0) & 1073741823) % a.length;
	} else {
		tmp = Std.random(a.length);
	}
	return a[tmp];
};
lib.Utils.pickWeight = function(array,weight,rnd) {
	if(array.length == 0) {
		return null;
	}
	var total = 0.0;
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		total += weight(i);
	}
	if(total == 0) {
		return lib.Utils.pickRandom(array,rnd);
	}
	var rnd1;
	if(rnd != null) {
		rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
		rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
		rnd1 = (((rnd.seed << 16) + rnd.seed2 | 0) & 1073741823) % 10007 / 10007.0;
	} else {
		rnd1 = Math.random();
	}
	var rnd = rnd1 * total;
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		rnd -= weight(i);
		if(rnd < 0) {
			return i;
		}
	}
	throw haxe.Exception.thrown("assert");
};
lib.Utils.removeAll = function(a,func) {
	var i = a.length;
	while(i-- > 0) if(func(a[i])) {
		HxOverrides.remove(a,a[i]);
	}
};
lib.Utils.exists = function(it,f) {
	var ret = false;
	var _g = 0;
	while(_g < it.length) {
		var v = it[_g];
		++_g;
		if(f(v)) {
			ret = true;
			break;
		}
	}
	return ret;
};
lib.Utils.find = function(it,f) {
	var ret = null;
	var _g = 0;
	while(_g < it.length) {
		var v = it[_g];
		++_g;
		if(f(v)) {
			ret = v;
			break;
		}
	}
	return ret;
};
lib.Utils.any = function(it,f) {
	var ret = null;
	var _g = 0;
	while(_g < it.length) {
		var v = it[_g];
		++_g;
		if(f(v)) {
			ret = v;
			break;
		}
	}
	return ret != null;
};
lib.Utils.all = function(it,f) {
	var ret = null;
	var _g = 0;
	while(_g < it.length) {
		var v = it[_g];
		++_g;
		if(!f(v)) {
			ret = v;
			break;
		}
	}
	return ret == null;
};
lib.Utils.sum = function(a) {
	var s = 0.0;
	var _g = 0;
	while(_g < a.length) {
		var v = a[_g];
		++_g;
		s += v;
	}
	return s;
};
lib.Utils.max = function(a) {
	if(a.length == 0) {
		return 0.0;
	}
	var ret = a[0];
	var _g = 0;
	while(_g < a.length) {
		var v = a[_g];
		++_g;
		if(v > ret) {
			ret = v;
		}
	}
	return ret;
};
lib.Utils.count = function(it,f) {
	var ret = 0;
	var _g = 0;
	while(_g < it.length) {
		var v = it[_g];
		++_g;
		if(f(v)) {
			++ret;
		}
	}
	return ret;
};
lib.Utils.has = function(it,elt) {
	return it.indexOf(elt) >= 0;
};
lib.Utils.append = function(a,b) {
	var _g = 0;
	while(_g < b.length) {
		var e = b[_g];
		++_g;
		a.push(e);
	}
	return a;
};
lib.Utils.split = function(a,numGroups) {
	var _g = [];
	var _g1 = 0;
	var _g2 = numGroups;
	while(_g1 < _g2) {
		var _ = _g1++;
		_g.push([]);
	}
	var groups = _g;
	if(a.length >= 2) {
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			groups[Math.round((numGroups - 1) * i / (a.length - 1))].push(a[i]);
		}
	} else if(a.length == 1) {
		groups[0].push(a[0]);
	}
	return groups;
};
lib.Utils.findMin = function(a,f,filter) {
	var minVal = 1e10;
	var minItem = null;
	var _g = 0;
	while(_g < a.length) {
		var item = a[_g];
		++_g;
		if(filter != null && !filter(item)) {
			continue;
		}
		var v = f(item);
		if(v < minVal) {
			minVal = v;
			minItem = item;
		}
	}
	return { item : minItem, val : minVal};
};
lib.Utils.findMinItem = function(a,f,filter) {
	var minVal = 1e10;
	var minItem = null;
	var _g = 0;
	while(_g < a.length) {
		var item = a[_g];
		++_g;
		if(filter != null && !filter(item)) {
			continue;
		}
		var v = f(item);
		if(v < minVal) {
			minVal = v;
			minItem = item;
		}
	}
	var inlobj_item = minItem;
	var inlobj_val = minVal;
	return inlobj_item;
};
lib.Utils.findMinValue = function(a,f,filter) {
	var minVal = 1e10;
	var minItem = null;
	var _g = 0;
	while(_g < a.length) {
		var item = a[_g];
		++_g;
		if(filter != null && !filter(item)) {
			continue;
		}
		var v = f(item);
		if(v < minVal) {
			minVal = v;
			minItem = item;
		}
	}
	var inlobj_item = minItem;
	var inlobj_val = minVal;
	return inlobj_val;
};
lib.Utils.findMaxItem = function(a,f,filter) {
	var minVal = 1e10;
	var minItem = null;
	var _g = 0;
	while(_g < a.length) {
		var item = a[_g];
		++_g;
		if(filter != null && !filter(item)) {
			continue;
		}
		var v = -f(item);
		if(v < minVal) {
			minVal = v;
			minItem = item;
		}
	}
	var inlobj_item = minItem;
	var inlobj_val = minVal;
	return inlobj_item;
};
lib.Utils.findMaxValue = function(a,f,filter) {
	var minVal = 1e10;
	var minItem = null;
	var _g = 0;
	while(_g < a.length) {
		var item = a[_g];
		++_g;
		if(filter != null && !filter(item)) {
			continue;
		}
		var v = -f(item);
		if(v < minVal) {
			minVal = v;
			minItem = item;
		}
	}
	var inlobj_item = minItem;
	var inlobj_val = minVal;
	return -inlobj_val;
};
lib.Utils.areEqual = function(a,b) {
	if(a == null && b == null) {
		return true;
	}
	if(a == null || b == null) {
		return false;
	}
	var av = $getIterator(a);
	while(av.hasNext()) {
		var av1 = av.next();
		if(!$getIterator(b).hasNext()) {
			return false;
		}
		if(av1 != $getIterator(b).next()) {
			return false;
		}
	}
	if($getIterator(b).hasNext()) {
		return false;
	}
	return true;
};
lib.Utils.areSetEqual = function(a,b) {
	if(a.length != b.length) {
		return false;
	}
	var _g = 0;
	while(_g < a.length) {
		var av = a[_g];
		++_g;
		if(b.indexOf(av) < 0) {
			return false;
		}
	}
	return true;
};
lib.Utils.getAngle = function(pt) {
	return Math.atan2(pt.y,pt.x);
};
lib.Utils.rounded = function(pt) {
	return new h2d.col.Point(Math.round(pt.x),Math.round(pt.y));
};
lib.Utils.rotToDir = function(rot) {
	return new h2d.col.Point(Math.cos(rot),Math.sin(rot));
};
lib.Utils.checkFreq = function(dt,freq) {
	return Math.random() < dt * freq;
};
lib.Utils.convert = function(map) {
	var array = [];
	var h = map.h;
	var k_h = h;
	var k_keys = Object.keys(h);
	var k_length = k_keys.length;
	var k_current = 0;
	while(k_current < k_length) {
		var k = k_keys[k_current++];
		array.push({ key : k, value : map.h[k]});
	}
	return array;
};
lib.Utils.findRandomPoint = function(point,minDist,maxDist,fct,rand) {
	var random = Math.random;
	if(rand != null) {
		random = $bind(rand,rand.rand);
	}
	var spawnPt = new h2d.col.Point();
	var rtries = 20;
	var atries = 12;
	var pi2 = Math.PI * 2;
	var initAngle = random() * pi2;
	var _g = 0;
	var _g1 = rtries;
	while(_g < _g1) {
		var i = _g++;
		var radius = minDist + random() * (maxDist - minDist) * i / rtries;
		var _g2 = 0;
		var _g3 = atries;
		while(_g2 < _g3) {
			var r = _g2++;
			var theta = initAngle + (r + random()) * (pi2 / atries);
			var x = point.x + Math.cos(theta) * radius;
			var y = point.y + Math.sin(theta) * radius;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			spawnPt.x = x;
			spawnPt.y = y;
			if(fct(spawnPt)) {
				return spawnPt;
			}
		}
	}
	return null;
};
lib.Utils.randomInRange = function(min,max) {
	var max1 = max - min;
	if(max1 == null) {
		max1 = 1.0;
	}
	return min + Math.random() * max1;
};
lib.Utils.getBezierPoint = function(p1,p2,p3,p4,t) {
	var v = Math.pow(1 - t,3);
	var x = p1.x * v;
	var y = p1.y * v;
	var z = p1.z * v;
	var w = p1.w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m1_x = x;
	var m1_y = y;
	var m1_z = z;
	var m1_w = w;
	var v = Math.pow(1 - t,2) * t * 3.0;
	var x = p2.x * v;
	var y = p2.y * v;
	var z = p2.z * v;
	var w = p2.w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m2_x = x;
	var m2_y = y;
	var m2_z = z;
	var m2_w = w;
	var v = Math.pow(t,2) * (1 - t) * 3.0;
	var x = p3.x * v;
	var y = p3.y * v;
	var z = p3.z * v;
	var w = p3.w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m3_x = x;
	var m3_y = y;
	var m3_z = z;
	var m3_w = w;
	var v = Math.pow(t,3);
	var x = p4.x * v;
	var y = p4.y * v;
	var z = p4.z * v;
	var w = p4.w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m4_x = x;
	var m4_y = y;
	var m4_z = z;
	var m4_w = w;
	var x = m3_x + m4_x;
	var y = m3_y + m4_y;
	var z = m3_z + m4_z;
	var w = m3_w + m4_w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var v_x = x;
	var v_y = y;
	var v_z = z;
	var v_w = w;
	var x = m2_x + v_x;
	var y = m2_y + v_y;
	var z = m2_z + v_z;
	var w = m2_w + v_w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var v_x = x;
	var v_y = y;
	var v_z = z;
	var v_w = w;
	return new h3d.Vector(m1_x + v_x,m1_y + v_y,m1_z + v_z,m1_w + v_w);
};
lib.Utils.createPolygon2d = function(polygon) {
	var _g = polygon.shape;
	switch(_g._hx_index) {
	case 0:
		var subdivision = _g.subdivision;
		return [new h2d.col.Point(-0.5,-0.5),new h2d.col.Point(0.5,-0.5),new h2d.col.Point(0.5,0.5),new h2d.col.Point(-0.5,0.5)];
	case 1:
		var segments = _g.segments;
		var angle = _g.angle;
		var inner = _g.inner;
		var rings = _g.rings;
		if(angle >= 360) {
			angle = 360;
		}
		++segments;
		var anglerad = angle * 3.14159265358979323 / 180.0;
		var _g = [];
		var _g1 = 0;
		var _g2 = segments;
		while(_g1 < _g2) {
			var i = _g1++;
			var t = i / (segments - 1);
			var a = -anglerad / 2;
			var a1 = a + t * (anglerad / 2 - a);
			var ct = Math.cos(a1);
			var st = Math.sin(a1);
			_g.push(new h2d.col.Point(ct,st));
		}
		return _g;
	default:
		return polygon.points.slice();
	}
};
lib.Utils.expand = function(b,size) {
	b.xMin -= size;
	b.yMin -= size;
	b.xMax += size;
	b.yMax += size;
};
lib.Utils.getValue = function(a) {
	return a;
};
lib.CDBUtils = $hxClasses["lib.CDBUtils"] = function() { };
lib.CDBUtils.__name__ = "lib.CDBUtils";
lib.CDBUtils.find = function(a,f) {
	var ret = null;
	var _g_a = a;
	var _g_pos = 0;
	while(_g_pos < _g_a.length) {
		var v = _g_a[_g_pos++];
		if(f(v)) {
			ret = v;
			break;
		}
	}
	return ret;
};
lib.CDBUtils.findRandCdb = function(a,func) {
	var len = a.length;
	var offset = Std.random(len);
	var ret = null;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var idx = (i + offset) % len;
		var item = a[idx];
		ret = func(idx,item);
		if(ret != null) {
			break;
		}
	}
	return ret;
};
lib.MacroUtils = $hxClasses["lib.MacroUtils"] = function() { };
lib.MacroUtils.__name__ = "lib.MacroUtils";
var prefab = prefab || {};
if(!prefab._AnimTest) prefab._AnimTest = {};
prefab._AnimTest.UnitMode = {};
prefab._AnimTest.UnitMode.toString = function(this1) {
	return this1;
};
prefab.AnimTest = $hxClasses["prefab.AnimTest"] = function(parent) {
	this.distance = 1.;
	this.index = 0;
	this.animMode = "Idle";
	this.woman2 = false;
	this.woman1 = false;
	this.cloth2 = "Basic";
	this.cloth1 = "Basic";
	this.unit2 = "SS";
	this.unit1 = "SS";
	hrt.prefab.Object3D.call(this,parent);
};
prefab.AnimTest.__name__ = "prefab.AnimTest";
prefab.AnimTest.__super__ = hrt.prefab.Object3D;
prefab.AnimTest.prototype = $extend(hrt.prefab.Object3D.prototype,{
	unit1: null
	,unit2: null
	,cloth1: null
	,cloth2: null
	,woman1: null
	,woman2: null
	,animMode: null
	,index: null
	,distance: null
	,updateInstance: function(ctx,propName) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.updateInstance.call(this,ctx,propName);
		var add = function(name,type,cloth,woman) {
			var obj = ctx.local3d.getObjectByName(name);
			if(obj != null) {
				if(obj != null && obj.parent != null) {
					obj.parent.removeChild(obj);
				}
			}
			var animal = cloth.indexOf("/") > 0;
			var p;
			try {
				p = ctx.shared.loadPrefab(animal ? "chars/" + cloth + ".prefab" : "chars/Prefabs/Prefab_" + (type == null ? "null" : prefab._AnimTest.UnitMode.toString(type)) + ".prefab");
			} catch( _g ) {
				haxe.NativeStackTrace.lastError = _g;
				if(((haxe.Exception.caught(_g).unwrap()) instanceof hxd.fs.NotFound)) {
					return new h3d.scene.Object();
				} else {
					throw _g;
				}
			}
			p = hrt.prefab.Prefab.loadPrefab(p.saveData());
			if(!animal) {
				var womenPrefab = ctx.shared.loadPrefab("chars/Prefabs/Prefab_WSS.prefab").get(hrt.prefab.Model);
				var source = "chars/Clothes/" + cloth + "/Model" + (woman ? "Woman" : "") + ".fbx";
				var model = p.get(hrt.prefab.Model);
				if(woman) {
					model.load(womenPrefab.save());
					var beard = p.getOpt(hrt.prefab.Object3D,"Beard");
					if(beard != null) {
						beard.visible = false;
					}
				}
				if(hxd.res.Loader.currentInstance.exists(source)) {
					model.source = source;
				}
			}
			var obj = new h3d.scene.Object(ctx.local3d);
			obj.name = p.name;
			var prev = ctx.local3d;
			var root = ctx.shared.root3d;
			var pref = ctx.isSceneReference;
			ctx.local3d = ctx.shared.root3d = obj;
			ctx.isSceneReference = true;
			p.make(ctx);
			obj.name = name;
			ctx.local3d = prev;
			ctx.shared.root3d = root;
			ctx.isSceneReference = pref;
			var select = obj.getObjectByName("Selection");
			if(select != null) {
				var f = 2;
				select.flags &= ~f;
			}
			return obj;
		};
		var obj1 = add("unit1",this.unit1,this.cloth1,this.woman1);
		var obj2 = add("unit2",this.unit2,this.cloth2,this.woman2);
		var v = this.distance * 0.5;
		obj1.x = v;
		var f = 1;
		var b = true;
		if(b) {
			obj1.flags |= f;
		} else {
			obj1.flags &= ~f;
		}
		var v = -(this.distance * 0.5);
		obj2.x = v;
		var f = 1;
		var b = true;
		if(b) {
			obj2.flags |= f;
		} else {
			obj2.flags &= ~f;
		}
		obj1.setRotation(0,0,Math.PI);
		var counts_h = Object.create(null);
		var getAnimCount = function(prefix,unit) {
			var id = prefix + (unit == null ? "null" : prefab._AnimTest.UnitMode.toString(unit));
			var count = counts_h[id];
			if(count != null) {
				return count;
			}
			count = 0;
			while(true) {
				try {
					ctx.shared.loadAnimation(prefix + (count + 1) + (unit == null ? "" : "_" + (unit == null ? "null" : prefab._AnimTest.UnitMode.toString(unit))) + ".fbx");
				} catch( _g ) {
					haxe.NativeStackTrace.lastError = _g;
					break;
				}
				++count;
			}
			counts_h[id] = count;
			return count;
		};
		var playRandom = function(obj,unit,cloth,name,onEnd,index) {
			var animal = cloth.indexOf("/") > 0;
			if(animal) {
				unit = null;
			}
			var prefix = animal ? "chars/" + cloth.split("/").shift() + "/Anim_" + name : "chars/Anims/Anim_" + name;
			var count = getAnimCount(prefix,unit);
			if(count != 0) {
				if(index == null) {
					index = _gthis.index == 0 ? Std.random(count) : _gthis.index - 1;
				}
				prefix += index + 1;
			}
			var path = prefix + (unit == null ? "" : "_" + (unit == null ? "null" : prefab._AnimTest.UnitMode.toString(unit))) + ".fbx";
			var anim;
			try {
				anim = ctx.shared.loadAnimation(path);
			} catch( _g ) {
				haxe.NativeStackTrace.lastError = _g;
				haxe.Log.trace("Missing " + path,{ fileName : "src/prefab/AnimTest.hx", lineNumber : 121, className : "prefab.AnimTest", methodName : "updateInstance"});
				obj.stopAnimation();
				return -1;
			}
			anim = obj.playAnimation(anim);
			if(onEnd == null) {
				anim.loop = true;
			} else {
				anim.onAnimEnd = onEnd;
			}
			obj.switchToAnimation(new h3d.anim.SmoothTarget(anim,0.2));
			return index;
		};
		switch(this.animMode) {
		case "Engaged":
			var side = 0;
			var play = null;
			play = function() {
				var wait = function() {
					play();
				};
				side += 1;
				if((side - 1 & 1) == 0) {
					var idx = playRandom(obj1,_gthis.unit1,_gthis.cloth1,"EngagedAttack",wait);
					playRandom(obj2,_gthis.unit2,_gthis.cloth2,"EngagedBlock",wait,idx);
				} else {
					var idx = playRandom(obj2,_gthis.unit2,_gthis.cloth2,"EngagedAttack",wait);
					playRandom(obj1,_gthis.unit1,_gthis.cloth1,"EngagedBlock",wait,idx);
				}
			};
			play();
			break;
		case "Idle":
			playRandom(obj1,this.unit1,this.cloth1,"Idle");
			playRandom(obj2,this.unit2,this.cloth2,"Idle");
			break;
		}
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.edit.call(this,ctx);
		var unitsMode = "\r\n\t\t\t<option value=\"F\">Fist\r\n\t\t\t<option value=\"S\">Sword\r\n\t\t\t<option value=\"B\">Bow\r\n\t\t\t<option value=\"D\">Dagger\r\n\t\t\t<option value=\"P\">Polearm\r\n\t\t\t<option value=\"M\">Mace\r\n\t\t\t<option value=\"A\">Axe\r\n\r\n\t\t\t<option value=\"SS\">SwordShield\r\n\t\t\t<option value=\"DS\">DaggerShield\r\n\t\t\t<option value=\"MS\">MaceShield\r\n\t\t\t<option value=\"AS\">AxeShield\r\n\r\n\t\t\t<option value=\"S2\">Sword2H\r\n\t\t\t<option value=\"M2\">Mace2H\r\n\t\t\t<option value=\"A2\">Axe2H\r\n\r\n\t\t";
		var _g = [];
		var _g1 = 0;
		var _g2 = js.node.Fs.readdirSync(ctx.get_ide().getPath("chars/Clothes"));
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(!StringTools.endsWith(f,"_W")) {
				_g.push(f);
			}
		}
		var clothList = _g;
		var cpath = ctx.get_ide().getPath("chars");
		var _g = [];
		var _g1 = 0;
		var _g2 = js.node.Fs.readdirSync(cpath);
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(f != "Clothes" && f != "Prefabs" && sys.FileSystem.isDirectory(cpath + "/" + f)) {
				var _g3 = 0;
				var _g4 = js.node.Fs.readdirSync(cpath + "/" + f);
				while(_g3 < _g4.length) {
					var p = _g4[_g3];
					++_g3;
					if(StringTools.endsWith(p,".prefab")) {
						_g.push(clothList.push(f + "/" + HxOverrides.substr(p,0,-7)));
					}
				}
			}
		}
		var prefabList = _g;
		var _g = [];
		var _g1 = 0;
		while(_g1 < clothList.length) {
			var c = clothList[_g1];
			++_g1;
			_g.push("<option value=\"" + c + "\">" + c.split("/").join(" / ") + "</option>");
		}
		var unitsCloth = _g;
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Setup\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Unit1</dt><dd><select field=\"unit1\">" + unitsMode + "</select></dd>\r\n\t\t\t\t<dt>Clothes</dt><dd><select style=\"width:150px\" field=\"cloth1\">" + Std.string(unitsCloth) + "</select> <label><input type=\"checkbox\" field=\"woman1\"/> W</label></dd>\r\n\t\t\t\t<dt>Unit2</dt><dd><select field=\"unit2\">" + unitsMode + "</select></dd>\r\n\t\t\t\t<dt>Clothes</dt><dd><select style=\"width:150px\" field=\"cloth2\">" + Std.string(unitsCloth) + "</select> <label><input type=\"checkbox\" field=\"woman2\"/> W</label></dd>\r\n\t\t\t\t<dt>Mode</dt><dd><select field=\"animMode\">\r\n\t\t\t\t\t<option value=\"Idle\">Idle\r\n\t\t\t\t\t<option value=\"Engaged\">Engaged\r\n\t\t\t\t</select></dd>\r\n\t\t\t\t<dt>Index</dt><dd><input type=\"number\" field=\"index\" min=\"0\" max=\"3\"/></dd>\r\n\t\t\t\t<dt>Distance</dt><dd><input type=\"range\" value=\"1\" field=\"distance\" min=\"0\" max=\"2\"/></dd>\r\n\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.unit1 != "SS") {
			obj.unit1 = this.unit1;
		}
		if(this.unit2 != "SS") {
			obj.unit2 = this.unit2;
		}
		if(this.cloth1 != "Basic") {
			obj.cloth1 = this.cloth1;
		}
		if(this.cloth2 != "Basic") {
			obj.cloth2 = this.cloth2;
		}
		if(this.woman1 != false) {
			obj.woman1 = this.woman1;
		}
		if(this.woman2 != false) {
			obj.woman2 = this.woman2;
		}
		if(this.animMode != "Idle") {
			obj.animMode = this.animMode;
		}
		if(this.index != 0) {
			obj.index = this.index;
		}
		if(this.distance != 1.) {
			obj.distance = this.distance;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.unit1 = obj.unit1 == null ? "SS" : obj.unit1;
		this.unit2 = obj.unit2 == null ? "SS" : obj.unit2;
		this.cloth1 = obj.cloth1 == null ? "Basic" : obj.cloth1;
		this.cloth2 = obj.cloth2 == null ? "Basic" : obj.cloth2;
		this.woman1 = obj.woman1 == null ? false : obj.woman1;
		this.woman2 = obj.woman2 == null ? false : obj.woman2;
		this.animMode = obj.animMode == null ? "Idle" : obj.animMode;
		this.index = obj.index == null ? 0 : obj.index;
		this.distance = obj.distance == null ? 1. : obj.distance;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.unit1 = p1.unit1;
		this.unit2 = p1.unit2;
		this.cloth1 = p1.cloth1;
		this.cloth2 = p1.cloth2;
		this.woman1 = p1.woman1;
		this.woman2 = p1.woman2;
		this.animMode = p1.animMode;
		this.index = p1.index;
		this.distance = p1.distance;
	}
	,__class__: prefab.AnimTest
});
prefab.ApplyShadowAttenuationShader = $hxClasses["prefab.ApplyShadowAttenuationShader"] = function() {
	hxsl.Shader.call(this);
};
prefab.ApplyShadowAttenuationShader.__name__ = "prefab.ApplyShadowAttenuationShader";
prefab.ApplyShadowAttenuationShader._SHADER = null;
prefab.ApplyShadowAttenuationShader.__super__ = hxsl.Shader;
prefab.ApplyShadowAttenuationShader.prototype = $extend(hxsl.Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: prefab.ApplyShadowAttenuationShader
});
prefab.ApplyOcclusionAttenuationShader = $hxClasses["prefab.ApplyOcclusionAttenuationShader"] = function() {
	hxsl.Shader.call(this);
};
prefab.ApplyOcclusionAttenuationShader.__name__ = "prefab.ApplyOcclusionAttenuationShader";
prefab.ApplyOcclusionAttenuationShader._SHADER = null;
prefab.ApplyOcclusionAttenuationShader.__super__ = hxsl.Shader;
prefab.ApplyOcclusionAttenuationShader.prototype = $extend(hxsl.Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: prefab.ApplyOcclusionAttenuationShader
});
prefab.ApplyShadowAttenuation = $hxClasses["prefab.ApplyShadowAttenuation"] = function(parent) {
	this.occlusionShader = new prefab.ApplyOcclusionAttenuationShader();
	this.shadowShader = new prefab.ApplyShadowAttenuationShader();
	hrt.prefab.rfx.RendererFX.call(this,parent);
};
prefab.ApplyShadowAttenuation.__name__ = "prefab.ApplyShadowAttenuation";
prefab.ApplyShadowAttenuation.__super__ = hrt.prefab.rfx.RendererFX;
prefab.ApplyShadowAttenuation.prototype = $extend(hrt.prefab.rfx.RendererFX.prototype,{
	shadowShader: null
	,occlusionShader: null
	,makeInstance: function(ctx) {
		ctx = hrt.prefab.rfx.RendererFX.prototype.makeInstance.call(this,ctx);
		this.updateInstance(ctx);
		return ctx;
	}
	,begin: function(r,step) {
		if(step == h3d.impl.Step.Lighting) {
			var pbrRenderer = r;
			pbrRenderer.slides.addShader(this.occlusionShader);
			pbrRenderer.pbrOut.addShader(this.occlusionShader);
			if(r.getLightSystem() != null) {
				var pbrLightSystem = r.getLightSystem();
				if(pbrLightSystem != null) {
					pbrLightSystem.lightingShaders.push(this.shadowShader);
				}
			}
		}
	}
	,end: function(r,step) {
		if(step == h3d.impl.Step.Lighting) {
			var pbrRenderer = r;
			pbrRenderer.slides.removeShader(this.occlusionShader);
			pbrRenderer.pbrOut.removeShader(this.occlusionShader);
		}
	}
	,__class__: prefab.ApplyShadowAttenuation
});
prefab.BattleDecalShader = $hxClasses["prefab.BattleDecalShader"] = function() {
	this.scale__ = 0;
	this.emissiveValue__ = 0;
	this.movingEmberPointC__ = 0;
	this.movingEmberColorC__ = new h3d.Vector();
	this.movingEmberPointB__ = 0;
	this.movingEmberColorB__ = new h3d.Vector();
	this.movingEmberPointA__ = 0;
	this.movingEmberColorA__ = new h3d.Vector();
	this.movingEmberSpeed__ = 0;
	this.staticEmberPointC__ = 0;
	this.staticEmberColorC__ = new h3d.Vector();
	this.staticEmberPointB__ = 0;
	this.staticEmberColorB__ = new h3d.Vector();
	this.staticEmberPointA__ = 0;
	this.staticEmberColorA__ = new h3d.Vector();
	this.groundPointC__ = 0;
	this.groundColorC__ = new h3d.Vector();
	this.groundPointB__ = 0;
	this.groundColorB__ = new h3d.Vector();
	this.groundPointA__ = 0;
	this.groundColorA__ = new h3d.Vector();
	this.uvDistorsionScale__ = 0;
	this.uvDistorsionIntensity__ = 0;
	this.uvDistorsionSpeed__ = 0;
	this.noiseScale__ = 0;
	this.uvScale__ = 0;
	this.fadeEnd__ = 0;
	this.fadeStart__ = 0;
	this.fadePower__ = 0;
	this.tangent__ = new h3d.Vector();
	this.normal__ = new h3d.Vector();
	this.emissiveStrength__ = 0;
	this.pbrStrength__ = 0;
	this.normalStrength__ = 0;
	this.albedoStrength__ = 0;
	hxsl.Shader.call(this);
};
prefab.BattleDecalShader.__name__ = "prefab.BattleDecalShader";
prefab.BattleDecalShader._SHADER = null;
prefab.BattleDecalShader.__super__ = hxsl.Shader;
prefab.BattleDecalShader.prototype = $extend(hxsl.Shader.prototype,{
	CENTERED__: null
	,get_CENTERED: function() {
		return this.CENTERED__;
	}
	,set_CENTERED: function(_v) {
		this.constModified = true;
		return this.CENTERED__ = _v;
	}
	,albedoStrength__: null
	,get_albedoStrength: function() {
		return this.albedoStrength__;
	}
	,set_albedoStrength: function(_v) {
		return this.albedoStrength__ = _v;
	}
	,normalStrength__: null
	,get_normalStrength: function() {
		return this.normalStrength__;
	}
	,set_normalStrength: function(_v) {
		return this.normalStrength__ = _v;
	}
	,pbrStrength__: null
	,get_pbrStrength: function() {
		return this.pbrStrength__;
	}
	,set_pbrStrength: function(_v) {
		return this.pbrStrength__ = _v;
	}
	,emissiveStrength__: null
	,get_emissiveStrength: function() {
		return this.emissiveStrength__;
	}
	,set_emissiveStrength: function(_v) {
		return this.emissiveStrength__ = _v;
	}
	,normal__: null
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,tangent__: null
	,get_tangent: function() {
		return this.tangent__;
	}
	,set_tangent: function(_v) {
		return this.tangent__ = _v;
	}
	,fadePower__: null
	,get_fadePower: function() {
		return this.fadePower__;
	}
	,set_fadePower: function(_v) {
		return this.fadePower__ = _v;
	}
	,fadeStart__: null
	,get_fadeStart: function() {
		return this.fadeStart__;
	}
	,set_fadeStart: function(_v) {
		return this.fadeStart__ = _v;
	}
	,fadeEnd__: null
	,get_fadeEnd: function() {
		return this.fadeEnd__;
	}
	,set_fadeEnd: function(_v) {
		return this.fadeEnd__ = _v;
	}
	,albedoTexture__: null
	,get_albedoTexture: function() {
		return this.albedoTexture__;
	}
	,set_albedoTexture: function(_v) {
		return this.albedoTexture__ = _v;
	}
	,normalTexture__: null
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,pbrTexture__: null
	,get_pbrTexture: function() {
		return this.pbrTexture__;
	}
	,set_pbrTexture: function(_v) {
		return this.pbrTexture__ = _v;
	}
	,uvScale__: null
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,borderNoiseTexture__: null
	,get_borderNoiseTexture: function() {
		return this.borderNoiseTexture__;
	}
	,set_borderNoiseTexture: function(_v) {
		return this.borderNoiseTexture__ = _v;
	}
	,noiseScale__: null
	,get_noiseScale: function() {
		return this.noiseScale__;
	}
	,set_noiseScale: function(_v) {
		return this.noiseScale__ = _v;
	}
	,uvDistorsionTexture__: null
	,get_uvDistorsionTexture: function() {
		return this.uvDistorsionTexture__;
	}
	,set_uvDistorsionTexture: function(_v) {
		return this.uvDistorsionTexture__ = _v;
	}
	,uvDistorsionSpeed__: null
	,get_uvDistorsionSpeed: function() {
		return this.uvDistorsionSpeed__;
	}
	,set_uvDistorsionSpeed: function(_v) {
		return this.uvDistorsionSpeed__ = _v;
	}
	,uvDistorsionIntensity__: null
	,get_uvDistorsionIntensity: function() {
		return this.uvDistorsionIntensity__;
	}
	,set_uvDistorsionIntensity: function(_v) {
		return this.uvDistorsionIntensity__ = _v;
	}
	,uvDistorsionScale__: null
	,get_uvDistorsionScale: function() {
		return this.uvDistorsionScale__;
	}
	,set_uvDistorsionScale: function(_v) {
		return this.uvDistorsionScale__ = _v;
	}
	,groundColorA__: null
	,get_groundColorA: function() {
		return this.groundColorA__;
	}
	,set_groundColorA: function(_v) {
		return this.groundColorA__ = _v;
	}
	,groundPointA__: null
	,get_groundPointA: function() {
		return this.groundPointA__;
	}
	,set_groundPointA: function(_v) {
		return this.groundPointA__ = _v;
	}
	,groundColorB__: null
	,get_groundColorB: function() {
		return this.groundColorB__;
	}
	,set_groundColorB: function(_v) {
		return this.groundColorB__ = _v;
	}
	,groundPointB__: null
	,get_groundPointB: function() {
		return this.groundPointB__;
	}
	,set_groundPointB: function(_v) {
		return this.groundPointB__ = _v;
	}
	,groundColorC__: null
	,get_groundColorC: function() {
		return this.groundColorC__;
	}
	,set_groundColorC: function(_v) {
		return this.groundColorC__ = _v;
	}
	,groundPointC__: null
	,get_groundPointC: function() {
		return this.groundPointC__;
	}
	,set_groundPointC: function(_v) {
		return this.groundPointC__ = _v;
	}
	,staticEmberTexture__: null
	,get_staticEmberTexture: function() {
		return this.staticEmberTexture__;
	}
	,set_staticEmberTexture: function(_v) {
		return this.staticEmberTexture__ = _v;
	}
	,staticEmberColorA__: null
	,get_staticEmberColorA: function() {
		return this.staticEmberColorA__;
	}
	,set_staticEmberColorA: function(_v) {
		return this.staticEmberColorA__ = _v;
	}
	,staticEmberPointA__: null
	,get_staticEmberPointA: function() {
		return this.staticEmberPointA__;
	}
	,set_staticEmberPointA: function(_v) {
		return this.staticEmberPointA__ = _v;
	}
	,staticEmberColorB__: null
	,get_staticEmberColorB: function() {
		return this.staticEmberColorB__;
	}
	,set_staticEmberColorB: function(_v) {
		return this.staticEmberColorB__ = _v;
	}
	,staticEmberPointB__: null
	,get_staticEmberPointB: function() {
		return this.staticEmberPointB__;
	}
	,set_staticEmberPointB: function(_v) {
		return this.staticEmberPointB__ = _v;
	}
	,staticEmberColorC__: null
	,get_staticEmberColorC: function() {
		return this.staticEmberColorC__;
	}
	,set_staticEmberColorC: function(_v) {
		return this.staticEmberColorC__ = _v;
	}
	,staticEmberPointC__: null
	,get_staticEmberPointC: function() {
		return this.staticEmberPointC__;
	}
	,set_staticEmberPointC: function(_v) {
		return this.staticEmberPointC__ = _v;
	}
	,movingEmberTexture__: null
	,get_movingEmberTexture: function() {
		return this.movingEmberTexture__;
	}
	,set_movingEmberTexture: function(_v) {
		return this.movingEmberTexture__ = _v;
	}
	,movingEmberSpeed__: null
	,get_movingEmberSpeed: function() {
		return this.movingEmberSpeed__;
	}
	,set_movingEmberSpeed: function(_v) {
		return this.movingEmberSpeed__ = _v;
	}
	,movingEmberColorA__: null
	,get_movingEmberColorA: function() {
		return this.movingEmberColorA__;
	}
	,set_movingEmberColorA: function(_v) {
		return this.movingEmberColorA__ = _v;
	}
	,movingEmberPointA__: null
	,get_movingEmberPointA: function() {
		return this.movingEmberPointA__;
	}
	,set_movingEmberPointA: function(_v) {
		return this.movingEmberPointA__ = _v;
	}
	,movingEmberColorB__: null
	,get_movingEmberColorB: function() {
		return this.movingEmberColorB__;
	}
	,set_movingEmberColorB: function(_v) {
		return this.movingEmberColorB__ = _v;
	}
	,movingEmberPointB__: null
	,get_movingEmberPointB: function() {
		return this.movingEmberPointB__;
	}
	,set_movingEmberPointB: function(_v) {
		return this.movingEmberPointB__ = _v;
	}
	,movingEmberColorC__: null
	,get_movingEmberColorC: function() {
		return this.movingEmberColorC__;
	}
	,set_movingEmberColorC: function(_v) {
		return this.movingEmberColorC__ = _v;
	}
	,movingEmberPointC__: null
	,get_movingEmberPointC: function() {
		return this.movingEmberPointC__;
	}
	,set_movingEmberPointC: function(_v) {
		return this.movingEmberPointC__ = _v;
	}
	,alphaTexture__: null
	,get_alphaTexture: function() {
		return this.alphaTexture__;
	}
	,set_alphaTexture: function(_v) {
		return this.alphaTexture__ = _v;
	}
	,emissiveValue__: null
	,get_emissiveValue: function() {
		return this.emissiveValue__;
	}
	,set_emissiveValue: function(_v) {
		return this.emissiveValue__ = _v;
	}
	,vfxMap__: null
	,get_vfxMap: function() {
		return this.vfxMap__;
	}
	,set_vfxMap: function(_v) {
		return this.vfxMap__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.CENTERED__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.CENTERED__;
		case 1:
			return this.albedoStrength__;
		case 2:
			return this.normalStrength__;
		case 3:
			return this.pbrStrength__;
		case 4:
			return this.emissiveStrength__;
		case 5:
			return this.normal__;
		case 6:
			return this.tangent__;
		case 7:
			return this.fadePower__;
		case 8:
			return this.fadeStart__;
		case 9:
			return this.fadeEnd__;
		case 10:
			return this.albedoTexture__;
		case 11:
			return this.normalTexture__;
		case 12:
			return this.pbrTexture__;
		case 13:
			return this.uvScale__;
		case 14:
			return this.borderNoiseTexture__;
		case 15:
			return this.noiseScale__;
		case 16:
			return this.uvDistorsionTexture__;
		case 17:
			return this.uvDistorsionSpeed__;
		case 18:
			return this.uvDistorsionIntensity__;
		case 19:
			return this.uvDistorsionScale__;
		case 20:
			return this.groundColorA__;
		case 21:
			return this.groundPointA__;
		case 22:
			return this.groundColorB__;
		case 23:
			return this.groundPointB__;
		case 24:
			return this.groundColorC__;
		case 25:
			return this.groundPointC__;
		case 26:
			return this.staticEmberTexture__;
		case 27:
			return this.staticEmberColorA__;
		case 28:
			return this.staticEmberPointA__;
		case 29:
			return this.staticEmberColorB__;
		case 30:
			return this.staticEmberPointB__;
		case 31:
			return this.staticEmberColorC__;
		case 32:
			return this.staticEmberPointC__;
		case 33:
			return this.movingEmberTexture__;
		case 34:
			return this.movingEmberSpeed__;
		case 35:
			return this.movingEmberColorA__;
		case 36:
			return this.movingEmberPointA__;
		case 37:
			return this.movingEmberColorB__;
		case 38:
			return this.movingEmberPointB__;
		case 39:
			return this.movingEmberColorC__;
		case 40:
			return this.movingEmberPointC__;
		case 41:
			return this.alphaTexture__;
		case 42:
			return this.emissiveValue__;
		case 43:
			return this.vfxMap__;
		case 44:
			return this.scale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.albedoStrength__;
		case 2:
			return this.normalStrength__;
		case 3:
			return this.pbrStrength__;
		case 4:
			return this.emissiveStrength__;
		case 7:
			return this.fadePower__;
		case 8:
			return this.fadeStart__;
		case 9:
			return this.fadeEnd__;
		case 13:
			return this.uvScale__;
		case 15:
			return this.noiseScale__;
		case 17:
			return this.uvDistorsionSpeed__;
		case 18:
			return this.uvDistorsionIntensity__;
		case 19:
			return this.uvDistorsionScale__;
		case 21:
			return this.groundPointA__;
		case 23:
			return this.groundPointB__;
		case 25:
			return this.groundPointC__;
		case 28:
			return this.staticEmberPointA__;
		case 30:
			return this.staticEmberPointB__;
		case 32:
			return this.staticEmberPointC__;
		case 34:
			return this.movingEmberSpeed__;
		case 36:
			return this.movingEmberPointA__;
		case 38:
			return this.movingEmberPointB__;
		case 40:
			return this.movingEmberPointC__;
		case 42:
			return this.emissiveValue__;
		case 44:
			return this.scale__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.BattleDecalShader.prototype);
		s.shader = this.shader;
		s.CENTERED__ = this.CENTERED__;
		s.albedoStrength__ = this.albedoStrength__;
		s.normalStrength__ = this.normalStrength__;
		s.pbrStrength__ = this.pbrStrength__;
		s.emissiveStrength__ = this.emissiveStrength__;
		s.normal__ = this.normal__;
		s.tangent__ = this.tangent__;
		s.fadePower__ = this.fadePower__;
		s.fadeStart__ = this.fadeStart__;
		s.fadeEnd__ = this.fadeEnd__;
		s.albedoTexture__ = this.albedoTexture__;
		s.normalTexture__ = this.normalTexture__;
		s.pbrTexture__ = this.pbrTexture__;
		s.uvScale__ = this.uvScale__;
		s.borderNoiseTexture__ = this.borderNoiseTexture__;
		s.noiseScale__ = this.noiseScale__;
		s.uvDistorsionTexture__ = this.uvDistorsionTexture__;
		s.uvDistorsionSpeed__ = this.uvDistorsionSpeed__;
		s.uvDistorsionIntensity__ = this.uvDistorsionIntensity__;
		s.uvDistorsionScale__ = this.uvDistorsionScale__;
		s.groundColorA__ = this.groundColorA__;
		s.groundPointA__ = this.groundPointA__;
		s.groundColorB__ = this.groundColorB__;
		s.groundPointB__ = this.groundPointB__;
		s.groundColorC__ = this.groundColorC__;
		s.groundPointC__ = this.groundPointC__;
		s.staticEmberTexture__ = this.staticEmberTexture__;
		s.staticEmberColorA__ = this.staticEmberColorA__;
		s.staticEmberPointA__ = this.staticEmberPointA__;
		s.staticEmberColorB__ = this.staticEmberColorB__;
		s.staticEmberPointB__ = this.staticEmberPointB__;
		s.staticEmberColorC__ = this.staticEmberColorC__;
		s.staticEmberPointC__ = this.staticEmberPointC__;
		s.movingEmberTexture__ = this.movingEmberTexture__;
		s.movingEmberSpeed__ = this.movingEmberSpeed__;
		s.movingEmberColorA__ = this.movingEmberColorA__;
		s.movingEmberPointA__ = this.movingEmberPointA__;
		s.movingEmberColorB__ = this.movingEmberColorB__;
		s.movingEmberPointB__ = this.movingEmberPointB__;
		s.movingEmberColorC__ = this.movingEmberColorC__;
		s.movingEmberPointC__ = this.movingEmberPointC__;
		s.alphaTexture__ = this.alphaTexture__;
		s.emissiveValue__ = this.emissiveValue__;
		s.vfxMap__ = this.vfxMap__;
		s.scale__ = this.scale__;
		return s;
	}
	,__class__: prefab.BattleDecalShader
	,__properties__: {set_scale:"set_scale",get_scale:"get_scale",set_vfxMap:"set_vfxMap",get_vfxMap:"get_vfxMap",set_emissiveValue:"set_emissiveValue",get_emissiveValue:"get_emissiveValue",set_alphaTexture:"set_alphaTexture",get_alphaTexture:"get_alphaTexture",set_movingEmberPointC:"set_movingEmberPointC",get_movingEmberPointC:"get_movingEmberPointC",set_movingEmberColorC:"set_movingEmberColorC",get_movingEmberColorC:"get_movingEmberColorC",set_movingEmberPointB:"set_movingEmberPointB",get_movingEmberPointB:"get_movingEmberPointB",set_movingEmberColorB:"set_movingEmberColorB",get_movingEmberColorB:"get_movingEmberColorB",set_movingEmberPointA:"set_movingEmberPointA",get_movingEmberPointA:"get_movingEmberPointA",set_movingEmberColorA:"set_movingEmberColorA",get_movingEmberColorA:"get_movingEmberColorA",set_movingEmberSpeed:"set_movingEmberSpeed",get_movingEmberSpeed:"get_movingEmberSpeed",set_movingEmberTexture:"set_movingEmberTexture",get_movingEmberTexture:"get_movingEmberTexture",set_staticEmberPointC:"set_staticEmberPointC",get_staticEmberPointC:"get_staticEmberPointC",set_staticEmberColorC:"set_staticEmberColorC",get_staticEmberColorC:"get_staticEmberColorC",set_staticEmberPointB:"set_staticEmberPointB",get_staticEmberPointB:"get_staticEmberPointB",set_staticEmberColorB:"set_staticEmberColorB",get_staticEmberColorB:"get_staticEmberColorB",set_staticEmberPointA:"set_staticEmberPointA",get_staticEmberPointA:"get_staticEmberPointA",set_staticEmberColorA:"set_staticEmberColorA",get_staticEmberColorA:"get_staticEmberColorA",set_staticEmberTexture:"set_staticEmberTexture",get_staticEmberTexture:"get_staticEmberTexture",set_groundPointC:"set_groundPointC",get_groundPointC:"get_groundPointC",set_groundColorC:"set_groundColorC",get_groundColorC:"get_groundColorC",set_groundPointB:"set_groundPointB",get_groundPointB:"get_groundPointB",set_groundColorB:"set_groundColorB",get_groundColorB:"get_groundColorB",set_groundPointA:"set_groundPointA",get_groundPointA:"get_groundPointA",set_groundColorA:"set_groundColorA",get_groundColorA:"get_groundColorA",set_uvDistorsionScale:"set_uvDistorsionScale",get_uvDistorsionScale:"get_uvDistorsionScale",set_uvDistorsionIntensity:"set_uvDistorsionIntensity",get_uvDistorsionIntensity:"get_uvDistorsionIntensity",set_uvDistorsionSpeed:"set_uvDistorsionSpeed",get_uvDistorsionSpeed:"get_uvDistorsionSpeed",set_uvDistorsionTexture:"set_uvDistorsionTexture",get_uvDistorsionTexture:"get_uvDistorsionTexture",set_noiseScale:"set_noiseScale",get_noiseScale:"get_noiseScale",set_borderNoiseTexture:"set_borderNoiseTexture",get_borderNoiseTexture:"get_borderNoiseTexture",set_uvScale:"set_uvScale",get_uvScale:"get_uvScale",set_pbrTexture:"set_pbrTexture",get_pbrTexture:"get_pbrTexture",set_normalTexture:"set_normalTexture",get_normalTexture:"get_normalTexture",set_albedoTexture:"set_albedoTexture",get_albedoTexture:"get_albedoTexture",set_fadeEnd:"set_fadeEnd",get_fadeEnd:"get_fadeEnd",set_fadeStart:"set_fadeStart",get_fadeStart:"get_fadeStart",set_fadePower:"set_fadePower",get_fadePower:"get_fadePower",set_tangent:"set_tangent",get_tangent:"get_tangent",set_normal:"set_normal",get_normal:"get_normal",set_emissiveStrength:"set_emissiveStrength",get_emissiveStrength:"get_emissiveStrength",set_pbrStrength:"set_pbrStrength",get_pbrStrength:"get_pbrStrength",set_normalStrength:"set_normalStrength",get_normalStrength:"get_normalStrength",set_albedoStrength:"set_albedoStrength",get_albedoStrength:"get_albedoStrength",set_CENTERED:"set_CENTERED",get_CENTERED:"get_CENTERED"}
});
prefab.BattleDecal = $hxClasses["prefab.BattleDecal"] = function(parent) {
	this.movingEmberPointC = 0.0;
	this.movingEmberColorC = 0;
	this.movingEmberPointB = 0.5;
	this.movingEmberColorB = 6710886;
	this.movingEmberPointA = 1.0;
	this.movingEmberColorA = 16777215;
	this.movingEmberSpeed = 0.1;
	this.staticEmberPointC = 0.0;
	this.staticEmberColorC = 0;
	this.staticEmberPointB = 0.5;
	this.staticEmberColorB = 6710886;
	this.staticEmberPointA = 1.0;
	this.staticEmberColorA = 16777215;
	this.groundPointC = 0.0;
	this.groundColorC = 0;
	this.groundPointB = 0.5;
	this.groundColorB = 6710886;
	this.groundPointA = 1.0;
	this.groundColorA = 16777215;
	this.uvDistorsionIntensity = 0.5;
	this.uvDistorsionScale = 1.0;
	this.uvDistorsionSpeed = 0.0;
	this.noiseScale = 1.0;
	this.uvScale = 1.0;
	this.shader = null;
	hrt.prefab.l3d.Decal.call(this,parent);
};
prefab.BattleDecal.__name__ = "prefab.BattleDecal";
prefab.BattleDecal.__super__ = hrt.prefab.l3d.Decal;
prefab.BattleDecal.prototype = $extend(hrt.prefab.l3d.Decal.prototype,{
	shader: null
	,debugMap: null
	,uvScale: null
	,borderNoiseMap: null
	,noiseScale: null
	,alphaMap: null
	,uvDistorsionMap: null
	,uvDistorsionSpeed: null
	,uvDistorsionScale: null
	,uvDistorsionIntensity: null
	,groundColorA: null
	,groundPointA: null
	,groundColorB: null
	,groundPointB: null
	,groundColorC: null
	,groundPointC: null
	,staticEmberAlbedoMap: null
	,staticEmberColorA: null
	,staticEmberPointA: null
	,staticEmberColorB: null
	,staticEmberPointB: null
	,staticEmberColorC: null
	,staticEmberPointC: null
	,movingEmberAlbedoMap: null
	,movingEmberSpeed: null
	,movingEmberColorA: null
	,movingEmberPointA: null
	,movingEmberColorB: null
	,movingEmberPointB: null
	,movingEmberColorC: null
	,movingEmberPointC: null
	,save: function() {
		var obj = hrt.prefab.l3d.Decal.prototype.save.call(this);
		if(this.blendMode != h2d.BlendMode.Alpha) {
			obj.blendMode = this.blendMode._hx_index;
		}
		return obj;
	}
	,load: function(obj) {
		hrt.prefab.l3d.Decal.prototype.load.call(this,obj);
		this.blendMode = obj.blendMode != null ? Type.createEnumIndex(h2d.BlendMode,obj.blendMode,null) : h2d.BlendMode.Alpha;
	}
	,makeInstance: function(ctx) {
		ctx = ctx.clone(this);
		var mesh = new h3d.scene.pbr.Decal(h3d.prim.Cube.defaultUnitCube(),null,ctx.local3d);
		this.shader = mesh.material.passes.getShader(prefab.BattleDecalShader);
		if(this.shader == null) {
			this.shader = new prefab.BattleDecalShader();
			mesh.material.passes.addShader(this.shader);
		}
		mesh.material.passes.setPassName(this.renderMode == "Default" ? "decal" : "terrainDecal");
		mesh.material.passes.set_depthWrite(false);
		mesh.material.passes.set_depthTest(h3d.mat.Compare.GreaterEqual);
		mesh.material.passes.set_culling(h3d.mat.Face.Front);
		var _this = mesh.material;
		_this.set_castShadows(false);
		_this.set_receiveShadows(false);
		ctx.local3d = mesh;
		ctx.local3d.name = this.name;
		this.updateInstance(ctx);
		return ctx;
	}
	,updateRenderParams: function(ctx) {
		var value = ctx.local3d;
		var mesh = ((value) instanceof h3d.scene.Mesh) ? value : null;
		mesh.material.passes.setBlendMode(this.blendMode);
		mesh.material.passes.stencil = new h3d.mat.Stencil();
		mesh.material.passes.stencil.setFunc(h3d.mat.Compare.Equal,0,4,0);
		mesh.material.passes.stencil.setOp(h3d.mat.StencilOp.Keep,h3d.mat.StencilOp.Keep,h3d.mat.StencilOp.Keep);
		this.shader = mesh.material.passes.getShader(prefab.BattleDecalShader);
		if(this.shader != null) {
			this.shader.vfxMap__ = this.debugMap != null ? ctx.loadTexture(this.debugMap) : h3d.mat.Texture.fromColor(-1);
			if(this.shader.vfxMap__ != null) {
				this.shader.vfxMap__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.shader.borderNoiseTexture__ = this.borderNoiseMap != null ? ctx.loadTexture(this.borderNoiseMap) : h3d.mat.Texture.fromColor(-1);
			if(this.shader.borderNoiseTexture__ != null) {
				this.shader.borderNoiseTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.shader.alphaTexture__ = this.alphaMap != null ? ctx.loadTexture(this.alphaMap) : h3d.mat.Texture.fromColor(-1);
			if(this.shader.alphaTexture__ != null) {
				this.shader.alphaTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.shader.uvDistorsionTexture__ = this.uvDistorsionMap != null ? ctx.loadTexture(this.uvDistorsionMap) : h3d.mat.Texture.fromColor(-1);
			if(this.shader.uvDistorsionTexture__ != null) {
				this.shader.uvDistorsionTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.shader.uvDistorsionSpeed__ = this.uvDistorsionSpeed;
			this.shader.uvDistorsionIntensity__ = this.uvDistorsionIntensity;
			this.shader.uvDistorsionScale__ = this.uvDistorsionScale;
			this.shader.albedoTexture__ = this.albedoMap != null ? ctx.loadTexture(this.albedoMap) : h3d.mat.Texture.fromColor(0);
			if(this.shader.albedoTexture__ != null) {
				this.shader.albedoTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.shader.normalTexture__ = this.normalMap != null ? ctx.loadTexture(this.normalMap) : h3d.mat.Texture.fromColor(255);
			if(this.shader.normalTexture__ != null) {
				this.shader.normalTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			var c = this.groundColorA;
			var s = 0.00392156862745098;
			this.shader.groundColorA__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.groundPointA__ = this.groundPointA;
			var c = this.groundColorB;
			var s = 0.00392156862745098;
			this.shader.groundColorB__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.groundPointB__ = this.groundPointB;
			var c = this.groundColorC;
			var s = 0.00392156862745098;
			this.shader.groundColorC__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.groundPointC__ = this.groundPointC;
			this.shader.staticEmberTexture__ = this.staticEmberAlbedoMap != null ? ctx.loadTexture(this.staticEmberAlbedoMap) : h3d.mat.Texture.fromColor(0);
			if(this.shader.staticEmberTexture__ != null) {
				this.shader.staticEmberTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			var c = this.staticEmberColorA;
			var s = 0.00392156862745098;
			this.shader.staticEmberColorA__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.staticEmberPointA__ = this.staticEmberPointA;
			var c = this.staticEmberColorB;
			var s = 0.00392156862745098;
			this.shader.staticEmberColorB__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.staticEmberPointB__ = this.staticEmberPointB;
			var c = this.staticEmberColorC;
			var s = 0.00392156862745098;
			this.shader.staticEmberColorC__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.staticEmberPointC__ = this.staticEmberPointC;
			this.shader.movingEmberTexture__ = this.movingEmberAlbedoMap != null ? ctx.loadTexture(this.movingEmberAlbedoMap) : h3d.mat.Texture.fromColor(0);
			if(this.shader.movingEmberTexture__ != null) {
				this.shader.movingEmberTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.shader.movingEmberSpeed__ = this.movingEmberSpeed;
			var c = this.movingEmberColorA;
			var s = 0.00392156862745098;
			this.shader.movingEmberColorA__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.movingEmberPointA__ = this.movingEmberPointA;
			var c = this.movingEmberColorB;
			var s = 0.00392156862745098;
			this.shader.movingEmberColorB__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.movingEmberPointB__ = this.movingEmberPointB;
			var c = this.movingEmberColorC;
			var s = 0.00392156862745098;
			this.shader.movingEmberColorC__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			this.shader.movingEmberPointC__ = this.movingEmberPointC;
			this.shader.albedoStrength__ = this.albedoStrength;
			this.shader.normalStrength__ = this.normalStrength;
			this.shader.pbrStrength__ = this.pbrStrength;
			this.shader.emissiveStrength__ = this.emissiveStrength;
			var _this = this.shader;
			_this.constModified = true;
			_this.CENTERED__ = this.centered;
			this.shader.fadePower__ = this.fadePower;
			this.shader.fadeStart__ = this.fadeStart;
			this.shader.fadeEnd__ = this.fadeEnd;
			this.shader.uvScale__ = this.uvScale;
			this.shader.noiseScale__ = this.noiseScale;
			this.shader.emissiveValue__ = this.emissive;
		}
		var pbrTexture = this.pbrMap != null ? ctx.loadTexture(this.pbrMap) : null;
		if(pbrTexture != null) {
			var propsTexture = mesh.material.passes.getShader(h3d.shader.pbr.PropsTexture);
			if(propsTexture == null) {
				propsTexture = mesh.material.passes.addShader(new h3d.shader.pbr.PropsTexture());
			}
			propsTexture.texture__ = pbrTexture;
			propsTexture.texture__.set_wrap(h3d.mat.Wrap.Repeat);
		} else {
			mesh.material.passes.removeShader(mesh.material.passes.getShader(h3d.shader.pbr.PropsTexture));
		}
		if(this.renderMode == "Default") {
			if(this.emissiveStrength != 0) {
				mesh.material.passes.setPassName("emissiveDecal");
			} else {
				mesh.material.passes.setPassName("decal");
			}
		} else {
			mesh.material.passes.setPassName("terrainDecal");
		}
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.l3d.Decal.prototype.updateInstance.call(this,ctx,propName);
		this.updateRenderParams(ctx);
	}
	,getHideProps: function() {
		return { icon : "paint-brush", name : "BattleDecal"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.l3d.Decal.prototype.edit.call(this,ctx);
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Debug\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Debug map</dt><dd><input type=\"texturepath\" field=\"debugMap\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"BattleDecal\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>UV Scale</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"uvScale\"/></dd>\r\n\t\t\t\t\t<dt>Noise</dt><dd><input type=\"texturepath\" field=\"borderNoiseMap\"/></dd>\r\n\t\t\t\t\t<dt>Noise Scale</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"noiseScale\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"AlphaMap\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"alphaMap\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"UVDistorsion\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"uvDistorsionMap\"/></dd>\r\n\t\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"uvDistorsionSpeed\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"uvDistorsionScale\"/></dd>\r\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"uvDistorsionIntensity\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Ground\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>ColorA</dt><dd><input type=\"color\" field=\"groundColorA\"/></dd>\r\n\t\t\t\t\t<dt>Point A</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"groundPointA\"/></dd>\r\n\t\t\t\t\t<dt>ColorB</dt><dd><input type=\"color\" field=\"groundColorB\"/></dd>\r\n\t\t\t\t\t<dt>Point B</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"groundPointB\"/></dd>\r\n\t\t\t\t\t<dt>ColorC</dt><dd><input type=\"color\" field=\"groundColorC\"/></dd>\r\n\t\t\t\t\t<dt>Point C</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"groundPointC\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Static Ember\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"staticEmberAlbedoMap\"/></dd>\r\n\t\t\t\t\t<dt>ColorA</dt><dd><input type=\"color\" field=\"staticEmberColorA\"/></dd>\r\n\t\t\t\t\t<dt>Point A</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"staticEmberPointA\"/></dd>\r\n\t\t\t\t\t<dt>ColorB</dt><dd><input type=\"color\" field=\"staticEmberColorB\"/></dd>\r\n\t\t\t\t\t<dt>Point B</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"staticEmberPointB\"/></dd>\r\n\t\t\t\t\t<dt>ColorC</dt><dd><input type=\"color\" field=\"staticEmberColorC\"/></dd>\r\n\t\t\t\t\t<dt>Point C</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"staticEmberPointC\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Moving Ember\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"movingEmberAlbedoMap\"/></dd>\r\n\t\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"movingEmberSpeed\"/></dd>\r\n\t\t\t\t\t<dt>ColorA</dt><dd><input type=\"color\" field=\"movingEmberColorA\"/></dd>\r\n\t\t\t\t\t<dt>Point A</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"movingEmberPointA\"/></dd>\r\n\t\t\t\t\t<dt>ColorB</dt><dd><input type=\"color\" field=\"movingEmberColorB\"/></dd>\r\n\t\t\t\t\t<dt>Point B</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"movingEmberPointB\"/></dd>\r\n\t\t\t\t\t<dt>ColorC</dt><dd><input type=\"color\" field=\"movingEmberColorC\"/></dd>\r\n\t\t\t\t\t<dt>Point C</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"movingEmberPointC\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.l3d.Decal.prototype.saveSerializedFields.call(this,obj);
		if(this.debugMap != null) {
			obj.debugMap = this.debugMap;
		}
		if(this.uvScale != 1.0) {
			obj.uvScale = this.uvScale;
		}
		if(this.borderNoiseMap != null) {
			obj.borderNoiseMap = this.borderNoiseMap;
		}
		if(this.noiseScale != 1.0) {
			obj.noiseScale = this.noiseScale;
		}
		if(this.alphaMap != null) {
			obj.alphaMap = this.alphaMap;
		}
		if(this.uvDistorsionMap != null) {
			obj.uvDistorsionMap = this.uvDistorsionMap;
		}
		if(this.uvDistorsionSpeed != 0.0) {
			obj.uvDistorsionSpeed = this.uvDistorsionSpeed;
		}
		if(this.uvDistorsionScale != 1.0) {
			obj.uvDistorsionScale = this.uvDistorsionScale;
		}
		if(this.uvDistorsionIntensity != 0.5) {
			obj.uvDistorsionIntensity = this.uvDistorsionIntensity;
		}
		if(this.groundColorA != 16777215) {
			obj.groundColorA = this.groundColorA;
		}
		if(this.groundPointA != 1.0) {
			obj.groundPointA = this.groundPointA;
		}
		if(this.groundColorB != 6710886) {
			obj.groundColorB = this.groundColorB;
		}
		if(this.groundPointB != 0.5) {
			obj.groundPointB = this.groundPointB;
		}
		if(this.groundColorC != 0) {
			obj.groundColorC = this.groundColorC;
		}
		if(this.groundPointC != 0.0) {
			obj.groundPointC = this.groundPointC;
		}
		if(this.staticEmberAlbedoMap != null) {
			obj.staticEmberAlbedoMap = this.staticEmberAlbedoMap;
		}
		if(this.staticEmberColorA != 16777215) {
			obj.staticEmberColorA = this.staticEmberColorA;
		}
		if(this.staticEmberPointA != 1.0) {
			obj.staticEmberPointA = this.staticEmberPointA;
		}
		if(this.staticEmberColorB != 6710886) {
			obj.staticEmberColorB = this.staticEmberColorB;
		}
		if(this.staticEmberPointB != 0.5) {
			obj.staticEmberPointB = this.staticEmberPointB;
		}
		if(this.staticEmberColorC != 0) {
			obj.staticEmberColorC = this.staticEmberColorC;
		}
		if(this.staticEmberPointC != 0.0) {
			obj.staticEmberPointC = this.staticEmberPointC;
		}
		if(this.movingEmberAlbedoMap != null) {
			obj.movingEmberAlbedoMap = this.movingEmberAlbedoMap;
		}
		if(this.movingEmberSpeed != 0.1) {
			obj.movingEmberSpeed = this.movingEmberSpeed;
		}
		if(this.movingEmberColorA != 16777215) {
			obj.movingEmberColorA = this.movingEmberColorA;
		}
		if(this.movingEmberPointA != 1.0) {
			obj.movingEmberPointA = this.movingEmberPointA;
		}
		if(this.movingEmberColorB != 6710886) {
			obj.movingEmberColorB = this.movingEmberColorB;
		}
		if(this.movingEmberPointB != 0.5) {
			obj.movingEmberPointB = this.movingEmberPointB;
		}
		if(this.movingEmberColorC != 0) {
			obj.movingEmberColorC = this.movingEmberColorC;
		}
		if(this.movingEmberPointC != 0.0) {
			obj.movingEmberPointC = this.movingEmberPointC;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.l3d.Decal.prototype.loadSerializedFields.call(this,obj);
		this.debugMap = obj.debugMap == null ? null : obj.debugMap;
		this.uvScale = obj.uvScale == null ? 1.0 : obj.uvScale;
		this.borderNoiseMap = obj.borderNoiseMap == null ? null : obj.borderNoiseMap;
		this.noiseScale = obj.noiseScale == null ? 1.0 : obj.noiseScale;
		this.alphaMap = obj.alphaMap == null ? null : obj.alphaMap;
		this.uvDistorsionMap = obj.uvDistorsionMap == null ? null : obj.uvDistorsionMap;
		this.uvDistorsionSpeed = obj.uvDistorsionSpeed == null ? 0.0 : obj.uvDistorsionSpeed;
		this.uvDistorsionScale = obj.uvDistorsionScale == null ? 1.0 : obj.uvDistorsionScale;
		this.uvDistorsionIntensity = obj.uvDistorsionIntensity == null ? 0.5 : obj.uvDistorsionIntensity;
		this.groundColorA = obj.groundColorA == null ? 16777215 : obj.groundColorA;
		this.groundPointA = obj.groundPointA == null ? 1.0 : obj.groundPointA;
		this.groundColorB = obj.groundColorB == null ? 6710886 : obj.groundColorB;
		this.groundPointB = obj.groundPointB == null ? 0.5 : obj.groundPointB;
		this.groundColorC = obj.groundColorC == null ? 0 : obj.groundColorC;
		this.groundPointC = obj.groundPointC == null ? 0.0 : obj.groundPointC;
		this.staticEmberAlbedoMap = obj.staticEmberAlbedoMap == null ? null : obj.staticEmberAlbedoMap;
		this.staticEmberColorA = obj.staticEmberColorA == null ? 16777215 : obj.staticEmberColorA;
		this.staticEmberPointA = obj.staticEmberPointA == null ? 1.0 : obj.staticEmberPointA;
		this.staticEmberColorB = obj.staticEmberColorB == null ? 6710886 : obj.staticEmberColorB;
		this.staticEmberPointB = obj.staticEmberPointB == null ? 0.5 : obj.staticEmberPointB;
		this.staticEmberColorC = obj.staticEmberColorC == null ? 0 : obj.staticEmberColorC;
		this.staticEmberPointC = obj.staticEmberPointC == null ? 0.0 : obj.staticEmberPointC;
		this.movingEmberAlbedoMap = obj.movingEmberAlbedoMap == null ? null : obj.movingEmberAlbedoMap;
		this.movingEmberSpeed = obj.movingEmberSpeed == null ? 0.1 : obj.movingEmberSpeed;
		this.movingEmberColorA = obj.movingEmberColorA == null ? 16777215 : obj.movingEmberColorA;
		this.movingEmberPointA = obj.movingEmberPointA == null ? 1.0 : obj.movingEmberPointA;
		this.movingEmberColorB = obj.movingEmberColorB == null ? 6710886 : obj.movingEmberColorB;
		this.movingEmberPointB = obj.movingEmberPointB == null ? 0.5 : obj.movingEmberPointB;
		this.movingEmberColorC = obj.movingEmberColorC == null ? 0 : obj.movingEmberColorC;
		this.movingEmberPointC = obj.movingEmberPointC == null ? 0.0 : obj.movingEmberPointC;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.l3d.Decal.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.debugMap = p1.debugMap;
		this.uvScale = p1.uvScale;
		this.borderNoiseMap = p1.borderNoiseMap;
		this.noiseScale = p1.noiseScale;
		this.alphaMap = p1.alphaMap;
		this.uvDistorsionMap = p1.uvDistorsionMap;
		this.uvDistorsionSpeed = p1.uvDistorsionSpeed;
		this.uvDistorsionScale = p1.uvDistorsionScale;
		this.uvDistorsionIntensity = p1.uvDistorsionIntensity;
		this.groundColorA = p1.groundColorA;
		this.groundPointA = p1.groundPointA;
		this.groundColorB = p1.groundColorB;
		this.groundPointB = p1.groundPointB;
		this.groundColorC = p1.groundColorC;
		this.groundPointC = p1.groundPointC;
		this.staticEmberAlbedoMap = p1.staticEmberAlbedoMap;
		this.staticEmberColorA = p1.staticEmberColorA;
		this.staticEmberPointA = p1.staticEmberPointA;
		this.staticEmberColorB = p1.staticEmberColorB;
		this.staticEmberPointB = p1.staticEmberPointB;
		this.staticEmberColorC = p1.staticEmberColorC;
		this.staticEmberPointC = p1.staticEmberPointC;
		this.movingEmberAlbedoMap = p1.movingEmberAlbedoMap;
		this.movingEmberSpeed = p1.movingEmberSpeed;
		this.movingEmberColorA = p1.movingEmberColorA;
		this.movingEmberPointA = p1.movingEmberPointA;
		this.movingEmberColorB = p1.movingEmberColorB;
		this.movingEmberPointB = p1.movingEmberPointB;
		this.movingEmberColorC = p1.movingEmberColorC;
		this.movingEmberPointC = p1.movingEmberPointC;
	}
	,__class__: prefab.BattleDecal
});
prefab.BattleDitherShader = $hxClasses["prefab.BattleDitherShader"] = function() {
	this.zStart__ = 0;
	this.amount__ = 0;
	hxsl.Shader.call(this);
};
prefab.BattleDitherShader.__name__ = "prefab.BattleDitherShader";
prefab.BattleDitherShader._SHADER = null;
prefab.BattleDitherShader.__super__ = hxsl.Shader;
prefab.BattleDitherShader.prototype = $extend(hxsl.Shader.prototype,{
	amount__: null
	,get_amount: function() {
		return this.amount__;
	}
	,set_amount: function(_v) {
		return this.amount__ = _v;
	}
	,IGNORE_Z_THRESHOLD__: null
	,get_IGNORE_Z_THRESHOLD: function() {
		return this.IGNORE_Z_THRESHOLD__;
	}
	,set_IGNORE_Z_THRESHOLD: function(_v) {
		this.constModified = true;
		return this.IGNORE_Z_THRESHOLD__ = _v;
	}
	,zStart__: null
	,get_zStart: function() {
		return this.zStart__;
	}
	,set_zStart: function(_v) {
		return this.zStart__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.IGNORE_Z_THRESHOLD__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.amount__;
		case 1:
			return this.IGNORE_Z_THRESHOLD__;
		case 2:
			return this.zStart__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.amount__;
		case 2:
			return this.zStart__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.BattleDitherShader.prototype);
		s.shader = this.shader;
		s.amount__ = this.amount__;
		s.IGNORE_Z_THRESHOLD__ = this.IGNORE_Z_THRESHOLD__;
		s.zStart__ = this.zStart__;
		return s;
	}
	,__class__: prefab.BattleDitherShader
	,__properties__: {set_zStart:"set_zStart",get_zStart:"get_zStart",set_IGNORE_Z_THRESHOLD:"set_IGNORE_Z_THRESHOLD",get_IGNORE_Z_THRESHOLD:"get_IGNORE_Z_THRESHOLD",set_amount:"set_amount",get_amount:"get_amount"}
});
prefab.NoShadowDither = $hxClasses["prefab.NoShadowDither"] = function() {
	hxsl.Shader.call(this);
};
prefab.NoShadowDither.__name__ = "prefab.NoShadowDither";
prefab.NoShadowDither._SHADER = null;
prefab.NoShadowDither.__super__ = hxsl.Shader;
prefab.NoShadowDither.prototype = $extend(hxsl.Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: prefab.NoShadowDither
});
prefab.BattleDither = $hxClasses["prefab.BattleDither"] = function(parent) {
	this.IGNORE_Z_THRESHOLD = false;
	this.zStart = 0.0;
	hrt.prefab.Shader.call(this,parent);
};
prefab.BattleDither.__name__ = "prefab.BattleDither";
prefab.BattleDither.__super__ = hrt.prefab.Shader;
prefab.BattleDither.prototype = $extend(hrt.prefab.Shader.prototype,{
	zStart: null
	,IGNORE_Z_THRESHOLD: null
	,makeShader: function(ctx) {
		var s = new prefab.BattleDitherShader();
		s.amount__ = 0.0;
		s.zStart__ = this.zStart;
		s.constModified = true;
		s.IGNORE_Z_THRESHOLD__ = this.IGNORE_Z_THRESHOLD;
		return s;
	}
	,save: function() {
		var obj = hrt.prefab.Shader.prototype.save.call(this);
		obj.zStart = this.zStart;
		obj.IGNORE_Z_THRESHOLD = this.IGNORE_Z_THRESHOLD;
		return obj;
	}
	,load: function(obj) {
		hrt.prefab.Shader.prototype.load.call(this,obj);
		this.zStart = obj.zStart;
		this.IGNORE_Z_THRESHOLD = obj.IGNORE_Z_THRESHOLD;
	}
	,applyShader: function(obj,material,shader) {
		var s = this.makeShader();
		material.passes.addShader(s);
		var sh = material.getPass("shadow");
		if(sh != null) {
			sh.addShader(prefab.BattleDither.noShadowDither);
		}
		var battleDithering = obj.getScene().renderer.getEffect(prefab.BattleDithering);
		if(battleDithering == null) {
			var p = this;
			while(p.parent != null) p = p.parent;
			battleDithering = p.getOpt(prefab.BattleDithering,null,true);
		}
		if(battleDithering != null) {
			var _g = 0;
			var _g1 = obj.getMeshes();
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				battleDithering.addMesh(m);
			}
		}
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Dithering\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Ignore Z Start</dt><dd><input type=\"checkbox\" field=\"IGNORE_Z_THRESHOLD\"/></dd>\r\n\t\t\t\t\t<dt>zStart</dt><dd><input type=\"range\" min=\"0\" max=\"1.0\" field=\"zStart\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,getHideProps: function() {
		return { icon : "cog", name : "BattleDither", allowParent : function(p) {
			if(!(p.to(hrt.prefab.Object2D) != null || p.to(hrt.prefab.Object3D) != null)) {
				return p.to(hrt.prefab.Material) != null;
			} else {
				return true;
			}
		}};
	}
	,__class__: prefab.BattleDither
});
prefab.BattleDithering = $hxClasses["prefab.BattleDithering"] = function(parent) {
	this.campMeshes = [];
	this.battleMeshes = [];
	this.clearRangeAroundCam = 10.0;
	this.fovRatio = 0.5;
	this.fadeTime = 0.5;
	hrt.prefab.rfx.RendererFX.call(this,parent);
};
prefab.BattleDithering.__name__ = "prefab.BattleDithering";
prefab.BattleDithering.__super__ = hrt.prefab.rfx.RendererFX;
prefab.BattleDithering.prototype = $extend(hrt.prefab.rfx.RendererFX.prototype,{
	fadeTime: null
	,fovRatio: null
	,clearRangeAroundCam: null
	,battleMeshes: null
	,campMeshes: null
	,addMesh: function(mesh) {
	}
	,clear: function() {
		var a = this.battleMeshes;
		while(a.length > 0) a.pop();
		var a = this.campMeshes;
		while(a.length > 0) a.pop();
	}
	,processMesh: function(m,r) {
		var cam = r.ctx.camera;
		var _g = 0;
		var _g1 = m.getMeshes();
		while(_g < _g1.length) {
			var mesh = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = mesh.getMaterials();
			while(_g2 < _g3.length) {
				var mat = _g3[_g2];
				++_g2;
				var shader = js.Boot.__cast(mat.passes.getShaderByName("prefab.BattleDitherShader") , prefab.BattleDitherShader);
				if(shader != null) {
					var _this = mesh.getAbsPos();
					var v = null;
					if(v == null) {
						v = new h3d.Vector();
					}
					var x = _this._41;
					var y = _this._42;
					var z = _this._43;
					var w = _this._44;
					if(w == null) {
						w = 1.;
					}
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					v.x = x;
					v.y = y;
					v.z = z;
					v.w = w;
					var _this1 = v;
					var v1 = cam.pos;
					var x1 = _this1.x - v1.x;
					var y1 = _this1.y - v1.y;
					var z1 = _this1.z - v1.z;
					var w1 = _this1.w - v1.w;
					if(w1 == null) {
						w1 = 1.;
					}
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var toCam_x = x1;
					var toCam_y = y1;
					var toCam_z = z1;
					var toCam_w = w1;
					var dist = Math.sqrt(toCam_x * toCam_x + toCam_y * toCam_y + toCam_z * toCam_z);
					toCam_z = 0.0;
					var groundDist = Math.sqrt(toCam_x * toCam_x + toCam_y * toCam_y + toCam_z * toCam_z);
					var k = toCam_x * toCam_x + toCam_y * toCam_y + toCam_z * toCam_z;
					if(k < 1e-10) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					toCam_x *= k;
					toCam_y *= k;
					toCam_z *= k;
					var _this2 = cam.target;
					var v2 = cam.pos;
					var x2 = _this2.x - v2.x;
					var y2 = _this2.y - v2.y;
					var z2 = _this2.z - v2.z;
					var w2 = _this2.w - v2.w;
					if(w2 == null) {
						w2 = 1.;
					}
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					var camDir_x = x2;
					var camDir_y = y2;
					var camDir_z = z2;
					var camDir_w = w2;
					var d = Math.sqrt(camDir_x * camDir_x + camDir_y * camDir_y + camDir_z * camDir_z);
					camDir_z = 0.0;
					var k1 = camDir_x * camDir_x + camDir_y * camDir_y + camDir_z * camDir_z;
					if(k1 < 1e-10) {
						k1 = 0;
					} else {
						k1 = 1. / Math.sqrt(k1);
					}
					camDir_x *= k1;
					camDir_y *= k1;
					camDir_z *= k1;
					var cosAngle = toCam_x * camDir_x + toCam_y * camDir_y + toCam_z * camDir_z;
					var a = r.ctx.elapsedTime;
					var b = hxd.Timer.dt;
					var delta = (a < b ? b : a) / this.fadeTime;
					var limitCosAngle = Math.cos(this.fovRatio * cam.getFovX() / 180.0 * 3.14159265358979323);
					if(cosAngle > limitCosAngle && dist < d * 1.1 || groundDist < this.clearRangeAroundCam) {
						var f = shader.amount__ + delta;
						var min = 0.0;
						var max = 1.0;
						if(max == null) {
							max = 1.;
						}
						if(min == null) {
							min = 0.;
						}
						shader.amount__ = f < min ? min : f > max ? max : f;
					} else {
						var f1 = shader.amount__ - delta;
						var min1 = 0.0;
						var max1 = 1.0;
						if(max1 == null) {
							max1 = 1.;
						}
						if(min1 == null) {
							min1 = 0.;
						}
						shader.amount__ = f1 < min1 ? min1 : f1 > max1 ? max1 : f1;
					}
				}
			}
		}
	}
	,end: function(r,step) {
		if(step == h3d.impl.Step.MainDraw) {
			r.mark("BattleDithering");
			var _g = 0;
			var _g1 = this.battleMeshes;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				this.processMesh(m,r);
			}
			var _g = 0;
			var _g1 = this.campMeshes;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				this.processMesh(m,r);
			}
		}
	}
	,edit: function(ctx) {
		ctx.properties.add($("\r\n\t\t<div class=\"group\" name=\"SSR\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Fade time</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"fadeTime\"/></dd>\r\n\t\t\t\t<dt>Fov ratio</dt><dd><input type=\"range\" min=\"0\" max=\"180\" field=\"fovRatio\"/></dd>\r\n\t\t\t\t<dt>Clear range around camera</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"clearRangeAroundCam\"/></dd>\r\n\t\t\t</dl>\r\n\t\t</div>\r\n\t\t"),this);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.saveSerializedFields.call(this,obj);
		if(this.fadeTime != 0.5) {
			obj.fadeTime = this.fadeTime;
		}
		if(this.fovRatio != 0.5) {
			obj.fovRatio = this.fovRatio;
		}
		if(this.clearRangeAroundCam != 10.0) {
			obj.clearRangeAroundCam = this.clearRangeAroundCam;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.loadSerializedFields.call(this,obj);
		this.fadeTime = obj.fadeTime == null ? 0.5 : obj.fadeTime;
		this.fovRatio = obj.fovRatio == null ? 0.5 : obj.fovRatio;
		this.clearRangeAroundCam = obj.clearRangeAroundCam == null ? 10.0 : obj.clearRangeAroundCam;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.rfx.RendererFX.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.fadeTime = p1.fadeTime;
		this.fovRatio = p1.fovRatio;
		this.clearRangeAroundCam = p1.clearRangeAroundCam;
	}
	,__class__: prefab.BattleDithering
});
prefab.VolumetricFogShader = $hxClasses["prefab.VolumetricFogShader"] = function() {
	this.fadeElevationEnd__ = 0;
	this.fadeElevationStart__ = 0;
	this.emissiveValue__ = 0;
	this.shadows__ = 0;
	this.lowColor__ = new h3d.Vector();
	this.fogColor__ = new h3d.Vector();
	this.noiseEdgeScale__ = 1;
	this.fadeDistance__ = 0;
	this.heightPower__ = 1;
	this.fogPower__ = 1;
	this.fogAmount__ = 1;
	this.zMax__ = 15;
	this.zMin__ = 0;
	this.innerTurmoil__ = 0.1;
	this.speedZ__ = 0;
	this.speedY__ = 0;
	this.speedX__ = 0;
	this.persistence__ = 0.5;
	this.lacunarity__ = 0.5;
	this.octaves__ = 6;
	this.noiseMax__ = 1;
	this.noiseMin__ = 0;
	this.noiseScale__ = 1;
	this.steps__ = 20;
	hxsl.Shader.call(this);
};
prefab.VolumetricFogShader.__name__ = "prefab.VolumetricFogShader";
prefab.VolumetricFogShader._SHADER = null;
prefab.VolumetricFogShader.__super__ = hxsl.Shader;
prefab.VolumetricFogShader.prototype = $extend(hxsl.Shader.prototype,{
	steps__: null
	,get_steps: function() {
		return this.steps__;
	}
	,set_steps: function(_v) {
		this.constModified = true;
		return this.steps__ = _v;
	}
	,noiseTex__: null
	,get_noiseTex: function() {
		return this.noiseTex__;
	}
	,set_noiseTex: function(_v) {
		return this.noiseTex__ = _v;
	}
	,noiseScale__: null
	,get_noiseScale: function() {
		return this.noiseScale__;
	}
	,set_noiseScale: function(_v) {
		return this.noiseScale__ = _v;
	}
	,noiseMin__: null
	,get_noiseMin: function() {
		return this.noiseMin__;
	}
	,set_noiseMin: function(_v) {
		return this.noiseMin__ = _v;
	}
	,noiseMax__: null
	,get_noiseMax: function() {
		return this.noiseMax__;
	}
	,set_noiseMax: function(_v) {
		return this.noiseMax__ = _v;
	}
	,octaves__: null
	,get_octaves: function() {
		return this.octaves__;
	}
	,set_octaves: function(_v) {
		this.constModified = true;
		return this.octaves__ = _v;
	}
	,lacunarity__: null
	,get_lacunarity: function() {
		return this.lacunarity__;
	}
	,set_lacunarity: function(_v) {
		return this.lacunarity__ = _v;
	}
	,persistence__: null
	,get_persistence: function() {
		return this.persistence__;
	}
	,set_persistence: function(_v) {
		return this.persistence__ = _v;
	}
	,speedX__: null
	,get_speedX: function() {
		return this.speedX__;
	}
	,set_speedX: function(_v) {
		return this.speedX__ = _v;
	}
	,speedY__: null
	,get_speedY: function() {
		return this.speedY__;
	}
	,set_speedY: function(_v) {
		return this.speedY__ = _v;
	}
	,speedZ__: null
	,get_speedZ: function() {
		return this.speedZ__;
	}
	,set_speedZ: function(_v) {
		return this.speedZ__ = _v;
	}
	,innerTurmoil__: null
	,get_innerTurmoil: function() {
		return this.innerTurmoil__;
	}
	,set_innerTurmoil: function(_v) {
		return this.innerTurmoil__ = _v;
	}
	,zMin__: null
	,get_zMin: function() {
		return this.zMin__;
	}
	,set_zMin: function(_v) {
		return this.zMin__ = _v;
	}
	,zMax__: null
	,get_zMax: function() {
		return this.zMax__;
	}
	,set_zMax: function(_v) {
		return this.zMax__ = _v;
	}
	,fogAmount__: null
	,get_fogAmount: function() {
		return this.fogAmount__;
	}
	,set_fogAmount: function(_v) {
		return this.fogAmount__ = _v;
	}
	,fogPower__: null
	,get_fogPower: function() {
		return this.fogPower__;
	}
	,set_fogPower: function(_v) {
		return this.fogPower__ = _v;
	}
	,heightPower__: null
	,get_heightPower: function() {
		return this.heightPower__;
	}
	,set_heightPower: function(_v) {
		return this.heightPower__ = _v;
	}
	,fadeDistance__: null
	,get_fadeDistance: function() {
		return this.fadeDistance__;
	}
	,set_fadeDistance: function(_v) {
		return this.fadeDistance__ = _v;
	}
	,noiseEdgeTexture__: null
	,get_noiseEdgeTexture: function() {
		return this.noiseEdgeTexture__;
	}
	,set_noiseEdgeTexture: function(_v) {
		return this.noiseEdgeTexture__ = _v;
	}
	,noiseEdgeScale__: null
	,get_noiseEdgeScale: function() {
		return this.noiseEdgeScale__;
	}
	,set_noiseEdgeScale: function(_v) {
		return this.noiseEdgeScale__ = _v;
	}
	,fogColor__: null
	,get_fogColor: function() {
		return this.fogColor__;
	}
	,set_fogColor: function(_v) {
		return this.fogColor__ = _v;
	}
	,lowColor__: null
	,get_lowColor: function() {
		return this.lowColor__;
	}
	,set_lowColor: function(_v) {
		return this.lowColor__ = _v;
	}
	,shadows__: null
	,get_shadows: function() {
		return this.shadows__;
	}
	,set_shadows: function(_v) {
		return this.shadows__ = _v;
	}
	,emissiveValue__: null
	,get_emissiveValue: function() {
		return this.emissiveValue__;
	}
	,set_emissiveValue: function(_v) {
		return this.emissiveValue__ = _v;
	}
	,fadeElevationStart__: null
	,get_fadeElevationStart: function() {
		return this.fadeElevationStart__;
	}
	,set_fadeElevationStart: function(_v) {
		return this.fadeElevationStart__ = _v;
	}
	,fadeElevationEnd__: null
	,get_fadeElevationEnd: function() {
		return this.fadeElevationEnd__;
	}
	,set_fadeElevationEnd: function(_v) {
		return this.fadeElevationEnd__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.steps__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("steps" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		var v = this.octaves__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("octaves" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 14;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.steps__;
		case 1:
			return this.noiseTex__;
		case 2:
			return this.noiseScale__;
		case 3:
			return this.noiseMin__;
		case 4:
			return this.noiseMax__;
		case 5:
			return this.octaves__;
		case 6:
			return this.lacunarity__;
		case 7:
			return this.persistence__;
		case 8:
			return this.speedX__;
		case 9:
			return this.speedY__;
		case 10:
			return this.speedZ__;
		case 11:
			return this.innerTurmoil__;
		case 12:
			return this.zMin__;
		case 13:
			return this.zMax__;
		case 14:
			return this.fogAmount__;
		case 15:
			return this.fogPower__;
		case 16:
			return this.heightPower__;
		case 17:
			return this.fadeDistance__;
		case 18:
			return this.noiseEdgeTexture__;
		case 19:
			return this.noiseEdgeScale__;
		case 20:
			return this.fogColor__;
		case 21:
			return this.lowColor__;
		case 22:
			return this.shadows__;
		case 23:
			return this.emissiveValue__;
		case 24:
			return this.fadeElevationStart__;
		case 25:
			return this.fadeElevationEnd__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.noiseScale__;
		case 3:
			return this.noiseMin__;
		case 4:
			return this.noiseMax__;
		case 6:
			return this.lacunarity__;
		case 7:
			return this.persistence__;
		case 8:
			return this.speedX__;
		case 9:
			return this.speedY__;
		case 10:
			return this.speedZ__;
		case 11:
			return this.innerTurmoil__;
		case 12:
			return this.zMin__;
		case 13:
			return this.zMax__;
		case 14:
			return this.fogAmount__;
		case 15:
			return this.fogPower__;
		case 16:
			return this.heightPower__;
		case 17:
			return this.fadeDistance__;
		case 19:
			return this.noiseEdgeScale__;
		case 22:
			return this.shadows__;
		case 23:
			return this.emissiveValue__;
		case 24:
			return this.fadeElevationStart__;
		case 25:
			return this.fadeElevationEnd__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.VolumetricFogShader.prototype);
		s.shader = this.shader;
		s.steps__ = this.steps__;
		s.noiseTex__ = this.noiseTex__;
		s.noiseScale__ = this.noiseScale__;
		s.noiseMin__ = this.noiseMin__;
		s.noiseMax__ = this.noiseMax__;
		s.octaves__ = this.octaves__;
		s.lacunarity__ = this.lacunarity__;
		s.persistence__ = this.persistence__;
		s.speedX__ = this.speedX__;
		s.speedY__ = this.speedY__;
		s.speedZ__ = this.speedZ__;
		s.innerTurmoil__ = this.innerTurmoil__;
		s.zMin__ = this.zMin__;
		s.zMax__ = this.zMax__;
		s.fogAmount__ = this.fogAmount__;
		s.fogPower__ = this.fogPower__;
		s.heightPower__ = this.heightPower__;
		s.fadeDistance__ = this.fadeDistance__;
		s.noiseEdgeTexture__ = this.noiseEdgeTexture__;
		s.noiseEdgeScale__ = this.noiseEdgeScale__;
		s.fogColor__ = this.fogColor__;
		s.lowColor__ = this.lowColor__;
		s.shadows__ = this.shadows__;
		s.emissiveValue__ = this.emissiveValue__;
		s.fadeElevationStart__ = this.fadeElevationStart__;
		s.fadeElevationEnd__ = this.fadeElevationEnd__;
		return s;
	}
	,__class__: prefab.VolumetricFogShader
	,__properties__: {set_fadeElevationEnd:"set_fadeElevationEnd",get_fadeElevationEnd:"get_fadeElevationEnd",set_fadeElevationStart:"set_fadeElevationStart",get_fadeElevationStart:"get_fadeElevationStart",set_emissiveValue:"set_emissiveValue",get_emissiveValue:"get_emissiveValue",set_shadows:"set_shadows",get_shadows:"get_shadows",set_lowColor:"set_lowColor",get_lowColor:"get_lowColor",set_fogColor:"set_fogColor",get_fogColor:"get_fogColor",set_noiseEdgeScale:"set_noiseEdgeScale",get_noiseEdgeScale:"get_noiseEdgeScale",set_noiseEdgeTexture:"set_noiseEdgeTexture",get_noiseEdgeTexture:"get_noiseEdgeTexture",set_fadeDistance:"set_fadeDistance",get_fadeDistance:"get_fadeDistance",set_heightPower:"set_heightPower",get_heightPower:"get_heightPower",set_fogPower:"set_fogPower",get_fogPower:"get_fogPower",set_fogAmount:"set_fogAmount",get_fogAmount:"get_fogAmount",set_zMax:"set_zMax",get_zMax:"get_zMax",set_zMin:"set_zMin",get_zMin:"get_zMin",set_innerTurmoil:"set_innerTurmoil",get_innerTurmoil:"get_innerTurmoil",set_speedZ:"set_speedZ",get_speedZ:"get_speedZ",set_speedY:"set_speedY",get_speedY:"get_speedY",set_speedX:"set_speedX",get_speedX:"get_speedX",set_persistence:"set_persistence",get_persistence:"get_persistence",set_lacunarity:"set_lacunarity",get_lacunarity:"get_lacunarity",set_octaves:"set_octaves",get_octaves:"get_octaves",set_noiseMax:"set_noiseMax",get_noiseMax:"get_noiseMax",set_noiseMin:"set_noiseMin",get_noiseMin:"get_noiseMin",set_noiseScale:"set_noiseScale",get_noiseScale:"get_noiseScale",set_noiseTex:"set_noiseTex",get_noiseTex:"get_noiseTex",set_steps:"set_steps",get_steps:"get_steps"}
});
prefab.BattleFogShader = $hxClasses["prefab.BattleFogShader"] = function() {
	this.secondLowColor__ = new h3d.Vector();
	this.secondFogColor__ = new h3d.Vector();
	this.AMOUNT_DISCOVERED__ = 0;
	this.HAS_FOG__ = false;
	this.roughPassSteps__ = 20;
	prefab.VolumetricFogShader.call(this);
};
prefab.BattleFogShader.__name__ = "prefab.BattleFogShader";
prefab.BattleFogShader._SHADER = null;
prefab.BattleFogShader.__super__ = prefab.VolumetricFogShader;
prefab.BattleFogShader.prototype = $extend(prefab.VolumetricFogShader.prototype,{
	roughPassSteps__: null
	,get_roughPassSteps: function() {
		return this.roughPassSteps__;
	}
	,set_roughPassSteps: function(_v) {
		this.constModified = true;
		return this.roughPassSteps__ = _v;
	}
	,HAS_FOG__: null
	,get_HAS_FOG: function() {
		return this.HAS_FOG__;
	}
	,set_HAS_FOG: function(_v) {
		this.constModified = true;
		return this.HAS_FOG__ = _v;
	}
	,AMOUNT_DISCOVERED__: null
	,get_AMOUNT_DISCOVERED: function() {
		return this.AMOUNT_DISCOVERED__;
	}
	,set_AMOUNT_DISCOVERED: function(_v) {
		return this.AMOUNT_DISCOVERED__ = _v;
	}
	,vfxMap__: null
	,get_vfxMap: function() {
		return this.vfxMap__;
	}
	,set_vfxMap: function(_v) {
		return this.vfxMap__ = _v;
	}
	,secondFogColor__: null
	,get_secondFogColor: function() {
		return this.secondFogColor__;
	}
	,set_secondFogColor: function(_v) {
		return this.secondFogColor__ = _v;
	}
	,secondLowColor__: null
	,get_secondLowColor: function() {
		return this.secondLowColor__;
	}
	,set_secondLowColor: function(_v) {
		return this.secondLowColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.steps__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("steps" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		var v = this.octaves__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("octaves" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 14;
		var v = this.roughPassSteps__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("roughPassSteps" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 22;
		if(this.HAS_FOG__) {
			this.constBits |= 1073741824;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.steps__;
		case 1:
			return this.noiseTex__;
		case 2:
			return this.noiseScale__;
		case 3:
			return this.noiseMin__;
		case 4:
			return this.noiseMax__;
		case 5:
			return this.octaves__;
		case 6:
			return this.lacunarity__;
		case 7:
			return this.persistence__;
		case 8:
			return this.speedX__;
		case 9:
			return this.speedY__;
		case 10:
			return this.speedZ__;
		case 11:
			return this.innerTurmoil__;
		case 12:
			return this.zMin__;
		case 13:
			return this.zMax__;
		case 14:
			return this.fogAmount__;
		case 15:
			return this.fogPower__;
		case 16:
			return this.heightPower__;
		case 17:
			return this.fadeDistance__;
		case 18:
			return this.noiseEdgeTexture__;
		case 19:
			return this.noiseEdgeScale__;
		case 20:
			return this.fogColor__;
		case 21:
			return this.lowColor__;
		case 22:
			return this.shadows__;
		case 23:
			return this.emissiveValue__;
		case 24:
			return this.fadeElevationStart__;
		case 25:
			return this.fadeElevationEnd__;
		case 26:
			return this.roughPassSteps__;
		case 27:
			return this.HAS_FOG__;
		case 28:
			return this.AMOUNT_DISCOVERED__;
		case 29:
			return this.vfxMap__;
		case 30:
			return this.secondFogColor__;
		case 31:
			return this.secondLowColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.noiseScale__;
		case 3:
			return this.noiseMin__;
		case 4:
			return this.noiseMax__;
		case 6:
			return this.lacunarity__;
		case 7:
			return this.persistence__;
		case 8:
			return this.speedX__;
		case 9:
			return this.speedY__;
		case 10:
			return this.speedZ__;
		case 11:
			return this.innerTurmoil__;
		case 12:
			return this.zMin__;
		case 13:
			return this.zMax__;
		case 14:
			return this.fogAmount__;
		case 15:
			return this.fogPower__;
		case 16:
			return this.heightPower__;
		case 17:
			return this.fadeDistance__;
		case 19:
			return this.noiseEdgeScale__;
		case 22:
			return this.shadows__;
		case 23:
			return this.emissiveValue__;
		case 24:
			return this.fadeElevationStart__;
		case 25:
			return this.fadeElevationEnd__;
		case 28:
			return this.AMOUNT_DISCOVERED__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.BattleFogShader.prototype);
		s.shader = this.shader;
		s.steps__ = this.steps__;
		s.noiseTex__ = this.noiseTex__;
		s.noiseScale__ = this.noiseScale__;
		s.noiseMin__ = this.noiseMin__;
		s.noiseMax__ = this.noiseMax__;
		s.octaves__ = this.octaves__;
		s.lacunarity__ = this.lacunarity__;
		s.persistence__ = this.persistence__;
		s.speedX__ = this.speedX__;
		s.speedY__ = this.speedY__;
		s.speedZ__ = this.speedZ__;
		s.innerTurmoil__ = this.innerTurmoil__;
		s.zMin__ = this.zMin__;
		s.zMax__ = this.zMax__;
		s.fogAmount__ = this.fogAmount__;
		s.fogPower__ = this.fogPower__;
		s.heightPower__ = this.heightPower__;
		s.fadeDistance__ = this.fadeDistance__;
		s.noiseEdgeTexture__ = this.noiseEdgeTexture__;
		s.noiseEdgeScale__ = this.noiseEdgeScale__;
		s.fogColor__ = this.fogColor__;
		s.lowColor__ = this.lowColor__;
		s.shadows__ = this.shadows__;
		s.emissiveValue__ = this.emissiveValue__;
		s.fadeElevationStart__ = this.fadeElevationStart__;
		s.fadeElevationEnd__ = this.fadeElevationEnd__;
		s.roughPassSteps__ = this.roughPassSteps__;
		s.HAS_FOG__ = this.HAS_FOG__;
		s.AMOUNT_DISCOVERED__ = this.AMOUNT_DISCOVERED__;
		s.vfxMap__ = this.vfxMap__;
		s.secondFogColor__ = this.secondFogColor__;
		s.secondLowColor__ = this.secondLowColor__;
		return s;
	}
	,__class__: prefab.BattleFogShader
	,__properties__: $extend(prefab.VolumetricFogShader.prototype.__properties__,{set_secondLowColor:"set_secondLowColor",get_secondLowColor:"get_secondLowColor",set_secondFogColor:"set_secondFogColor",get_secondFogColor:"get_secondFogColor",set_vfxMap:"set_vfxMap",get_vfxMap:"get_vfxMap",set_AMOUNT_DISCOVERED:"set_AMOUNT_DISCOVERED",get_AMOUNT_DISCOVERED:"get_AMOUNT_DISCOVERED",set_HAS_FOG:"set_HAS_FOG",get_HAS_FOG:"get_HAS_FOG",set_roughPassSteps:"set_roughPassSteps",get_roughPassSteps:"get_roughPassSteps"})
});
prefab.VolumetricFog = $hxClasses["prefab.VolumetricFog"] = function(parent) {
	hrt.prefab.Shader.call(this,parent);
};
prefab.VolumetricFog.__name__ = "prefab.VolumetricFog";
prefab.VolumetricFog.__super__ = hrt.prefab.Shader;
prefab.VolumetricFog.prototype = $extend(hrt.prefab.Shader.prototype,{
	makeShader: function(ctx) {
		return new prefab.VolumetricFogShader();
	}
	,applyShader: function(obj,material,shader) {
		hrt.prefab.Shader.prototype.applyShader.call(this,obj,material,shader);
		material.passes.set_depthWrite(false);
		material.set_castShadows(false);
		material.set_receiveShadows(false);
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.Shader.prototype.updateInstance.call(this,ctx,propName);
		var value = ctx.custom;
		var vol = ((value) instanceof prefab.VolumetricFogShader) ? value : null;
		if(vol != null) {
			vol.noiseTex__ = this.makeNoiseTex();
			if(vol.noiseEdgeTexture__ == null) {
				vol.noiseEdgeTexture__ = h3d.mat.Texture.fromColor(16777215);
			}
			vol.noiseEdgeTexture__.set_wrap(h3d.mat.Wrap.Repeat);
		}
	}
	,noiseTex: null
	,makeNoiseTex: function() {
		if(this.noiseTex != null) {
			return this.noiseTex;
		}
		var rands = [];
		var rand = new hxd.Rand(0);
		var _g = 0;
		while(_g < 256) {
			var x = _g++;
			var _g1 = 0;
			while(_g1 < 256) {
				var y = _g1++;
				rand.seed = 36969 * (rand.seed & 65535) + (rand.seed >> 16);
				rand.seed2 = 18000 * (rand.seed2 & 65535) + (rand.seed2 >> 16);
				rands.push((((rand.seed << 16) + rand.seed2 | 0) & 1073741823) % 256);
			}
		}
		var pix = hxd.Pixels.alloc(256,256,hxd.PixelFormat.RGBA);
		var _g = 0;
		while(_g < 256) {
			var x = _g++;
			var _g1 = 0;
			while(_g1 < 256) {
				var y = _g1++;
				var r = rands[x + y * 256];
				var g = rands[(x - 37 & 255) + (y - 239 & 255) * 256];
				var off = (x + y * 256) * 4;
				pix.bytes.b[off] = r;
				pix.bytes.b[off + 1] = g;
				pix.bytes.b[off + 3] = 255;
			}
		}
		var tex = new h3d.mat.Texture(pix.width,pix.height,[],hxd.PixelFormat.RGBA);
		tex.uploadPixels(pix);
		tex.set_wrap(h3d.mat.Wrap.Repeat);
		return this.noiseTex = tex;
	}
	,__class__: prefab.VolumetricFog
});
prefab.BattleFog = $hxClasses["prefab.BattleFog"] = function(parent) {
	this.debugMap = null;
	prefab.VolumetricFog.call(this,parent);
};
prefab.BattleFog.__name__ = "prefab.BattleFog";
prefab.BattleFog.__super__ = prefab.VolumetricFog;
prefab.BattleFog.prototype = $extend(prefab.VolumetricFog.prototype,{
	vfxMap: null
	,s: null
	,debugMap: null
	,makeInstance: function(ctx) {
		this.s = new prefab.BattleFogShader();
		return prefab.VolumetricFog.prototype.makeInstance.call(this,ctx);
	}
	,setVFXMap: function(tex) {
		this.vfxMap = tex;
		this.s.vfxMap__ = this.vfxMap;
	}
	,makeShader: function(ctx) {
		this.s.vfxMap__ = this.vfxMap != null ? this.vfxMap : h3d.mat.Texture.fromColor(0);
		var amountDiscovered = 0.6;
		this.s.AMOUNT_DISCOVERED__ = amountDiscovered;
		return this.s;
	}
	,updateInstance: function(ctx,propName) {
		prefab.VolumetricFog.prototype.updateInstance.call(this,ctx,propName);
		var value = ctx.custom;
		var vol = ((value) instanceof prefab.BattleFogShader) ? value : null;
		if(vol != null) {
			vol.vfxMap__ = this.debugMap != null ? ctx.loadTexture(this.debugMap) : h3d.mat.Texture.fromColor(0);
			vol.vfxMap__.set_wrap(h3d.mat.Wrap.Repeat);
		}
	}
	,edit: function(ctx) {
		var _gthis = this;
		prefab.VolumetricFog.prototype.edit.call(this,ctx);
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Debug\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"debugMap\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		prefab.VolumetricFog.prototype.saveSerializedFields.call(this,obj);
		if(this.debugMap != null) {
			obj.debugMap = this.debugMap;
		}
	}
	,loadSerializedFields: function(obj) {
		prefab.VolumetricFog.prototype.loadSerializedFields.call(this,obj);
		this.debugMap = obj.debugMap == null ? null : obj.debugMap;
	}
	,copySerializedFields: function(p) {
		prefab.VolumetricFog.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.debugMap = p1.debugMap;
	}
	,__class__: prefab.BattleFog
});
prefab.DirLightWithCloudsAndAttenuation = $hxClasses["prefab.DirLightWithCloudsAndAttenuation"] = function() {
	hrt.prefab.rfx.DirLightWithClouds.call(this);
};
prefab.DirLightWithCloudsAndAttenuation.__name__ = "prefab.DirLightWithCloudsAndAttenuation";
prefab.DirLightWithCloudsAndAttenuation._SHADER = null;
prefab.DirLightWithCloudsAndAttenuation.__super__ = hrt.prefab.rfx.DirLightWithClouds;
prefab.DirLightWithCloudsAndAttenuation.prototype = $extend(hrt.prefab.rfx.DirLightWithClouds.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.hasDistort__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.clouds__;
		case 3:
			return this.scale__;
		case 4:
			return this.speed__;
		case 5:
			return this.opacity__;
		case 6:
			return this.rotation__;
		case 7:
			return this.hasDistort__;
		case 8:
			return this.distort__;
		case 9:
			return this.distortSpeed__;
		case 10:
			return this.distortScale__;
		case 11:
			return this.distortAmount__;
		case 12:
			return this.time__;
		case 13:
			return this.cameraPosition__;
		case 14:
			return this.lightDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.occlusionFactor__;
		case 3:
			return this.scale__;
		case 5:
			return this.opacity__;
		case 10:
			return this.distortScale__;
		case 11:
			return this.distortAmount__;
		case 12:
			return this.time__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.DirLightWithCloudsAndAttenuation.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.clouds__ = this.clouds__;
		s.scale__ = this.scale__;
		s.speed__ = this.speed__;
		s.opacity__ = this.opacity__;
		s.rotation__ = this.rotation__;
		s.hasDistort__ = this.hasDistort__;
		s.distort__ = this.distort__;
		s.distortSpeed__ = this.distortSpeed__;
		s.distortScale__ = this.distortScale__;
		s.distortAmount__ = this.distortAmount__;
		s.time__ = this.time__;
		s.cameraPosition__ = this.cameraPosition__;
		s.lightDir__ = this.lightDir__;
		return s;
	}
	,__class__: prefab.DirLightWithCloudsAndAttenuation
});
prefab.CloudShadowWithAttenuation = $hxClasses["prefab.CloudShadowWithAttenuation"] = function(parent) {
	this.dlwcwa = new prefab.DirLightWithCloudsAndAttenuation();
	hrt.prefab.rfx.CloudShadow.call(this,parent);
};
prefab.CloudShadowWithAttenuation.__name__ = "prefab.CloudShadowWithAttenuation";
prefab.CloudShadowWithAttenuation.__super__ = hrt.prefab.rfx.CloudShadow;
prefab.CloudShadowWithAttenuation.prototype = $extend(hrt.prefab.rfx.CloudShadow.prototype,{
	dlwcwa: null
	,makeInstance: function(ctx) {
		ctx = hrt.prefab.rfx.CloudShadow.prototype.makeInstance.call(this,ctx);
		this.updateInstance(ctx);
		return ctx;
	}
	,end: function(r,step) {
		if(step == h3d.impl.Step.Shadows) {
			var ctx = r.ctx;
			var mainLight = null;
			var l = ctx.lights;
			while(l != null) {
				var pbrLight = ((l) instanceof h3d.scene.pbr.DirLight) ? l : null;
				if(pbrLight != null && pbrLight.isMainLight) {
					mainLight = pbrLight;
					break;
				}
				l = l.next;
			}
			if(mainLight != null) {
				mainLight.shader = this.dlwcwa;
				this.dlwcwa.lightDir__ = mainLight.pbr.lightDir__;
				var _this = this.dlwcwa.lightColor__;
				var v = mainLight._color;
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				_this.w = v.w;
				var _this = this.dlwcwa.lightColor__;
				var v = mainLight.power * mainLight.power;
				_this.x *= v;
				_this.y *= v;
				_this.z *= v;
				this.dlwcwa.occlusionFactor__ = mainLight.occlusionFactor;
				var angle = this.angle * Math.PI / 180;
				var speed = this.speed / this.scale;
				var _this = this.dlwcwa.speed__;
				var x = Math.cos(angle) * speed;
				var y = Math.sin(angle) * speed;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = 0.;
				_this.w = 1.;
				this.dlwcwa.scale__ = 1.0 / this.scale;
				this.dlwcwa.opacity__ = this.opacity;
				this.dlwcwa.time__ = ctx.time;
				if(this.texturePath != null) {
					this.dlwcwa.clouds__ = hxd.res.Loader.currentInstance.load(this.texturePath).toTexture();
				}
				if(this.dlwcwa.clouds__ != null) {
					this.dlwcwa.clouds__.set_wrap(h3d.mat.Wrap.Repeat);
				}
				var dist = this.distort;
				var _this = this.dlwcwa;
				_this.constModified = true;
				_this.hasDistort__ = dist != null;
				if(dist != null) {
					var angle = dist.angle * Math.PI / 180;
					this.dlwcwa.distort__ = hxd.res.Loader.currentInstance.load(dist.path).toTexture();
					if(this.dlwcwa.distort__ != null) {
						this.dlwcwa.distort__.set_wrap(h3d.mat.Wrap.Repeat);
					}
					this.dlwcwa.distortAmount__ = dist.amount * 0.01;
					var _this = this.dlwcwa.distortSpeed__;
					var x = Math.cos(angle) * dist.speed * 0.1;
					var y = Math.sin(angle) * dist.speed * 0.1;
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					_this.x = x;
					_this.y = y;
					_this.z = 0.;
					_this.w = 1.;
					this.dlwcwa.distortScale__ = dist.scale;
				}
			}
		}
	}
	,edit: function(ctx) {
		var _gthis = this;
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Cloud\">\r\n\t\t\t\t<dt>Opacity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"opacity\"/></dd>\r\n\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"50\" field=\"scale\"/></dd>\r\n\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"-1\" max=\"1\" field=\"speed\"/></dd>\r\n\t\t\t\t<dt>Angle</dt><dd><input type=\"range\" min=\"-180\" max=\"180\" field=\"angle\"/></dd>\r\n\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"texturePath\"/></dd>\r\n\t\t\t</div>\r\n\t\t"),this);
		var dist = this.distort;
		if(dist == null) {
			dist = { path : null, scale : 1, speed : 0, angle : 0, amount : 1};
		}
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Distort\">\r\n\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"path\"/></dd>\r\n\t\t\t\t<dt>Amount</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"amount\"/></dd>\r\n\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0.1\" max=\"2\" field=\"scale\"/></dd>\r\n\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"-1\" max=\"1\" field=\"speed\"/></dd>\r\n\t\t\t\t<dt>Angle</dt><dd><input type=\"range\" min=\"-180\" max=\"180\" field=\"angle\"/></dd>\r\n\t\t\t</div>\r\n\t\t"),dist,function(name) {
			if(name == "path") {
				if(dist.path == null) {
					_gthis.distort = undefined;
				} else {
					_gthis.distort = dist;
				}
			}
		});
	}
	,__class__: prefab.CloudShadowWithAttenuation
});
prefab.CycleCurve = $hxClasses["prefab.CycleCurve"] = function(parent) {
	hrt.prefab.Curve.call(this,parent);
	this.type = "cycleCurve";
};
prefab.CycleCurve.__name__ = "prefab.CycleCurve";
prefab.CycleCurve.__super__ = hrt.prefab.Curve;
prefab.CycleCurve.prototype = $extend(hrt.prefab.Curve.prototype,{
	edit: function(ctx) {
		var _gthis = this;
		ctx.properties.add($("\r\n\t\t<div class=\"group\" name=\"Parameters\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Loop curve</dt><dd><input type=\"checkbox\" field=\"loop\"/></dd>\r\n\t\t\t</dl>\r\n\t\t</div>"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
		var ce = new hide.comp.CurveEditor(ctx.properties.undo,ctx.properties.element);
		ce.set_curve(this);
		ce.maxLength = 1.0;
	}
	,__class__: prefab.CycleCurve
});
prefab.CycleProps = $hxClasses["prefab.CycleProps"] = function(parent) {
	this.fogLightColor = 0;
	this.fogEndColor = 16777215;
	this.fogStartColor = 16777215;
	this.lightInclination = 90.0;
	this.time = 0.0;
	hrt.prefab.RenderProps.call(this,parent);
};
prefab.CycleProps.__name__ = "prefab.CycleProps";
prefab.CycleProps.__super__ = hrt.prefab.RenderProps;
prefab.CycleProps.prototype = $extend(hrt.prefab.RenderProps.prototype,{
	time: null
	,lightInclination: null
	,fogStartColor: null
	,fogEndColor: null
	,fogLightColor: null
	,lutPath: null
	,makeInstance: function(ctx) {
		var ctx1 = hrt.prefab.RenderProps.prototype.makeInstance.call(this,ctx);
		if(this.name == "mainRenderer") {
			this.disableDirlights(ctx1);
		}
		return ctx1;
	}
	,disableDirlights: function(ctx) {
		var scene = ctx.local3d.getScene();
		var shared = ctx.shared;
		var renderProps = [];
		var k = shared.contexts.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			if(((k1) instanceof prefab.CycleProps)) {
				renderProps.push(k1);
			}
		}
		var _g = 0;
		while(_g < renderProps.length) {
			var rp = renderProps[_g];
			++_g;
			var _g1 = 0;
			var _g2 = rp.children;
			while(_g1 < _g2.length) {
				var c = _g2[_g1];
				++_g1;
				var d = ((c) instanceof prefab.Light) ? c : null;
				if(d != null) {
					var visible = rp == this;
					var context = shared.getContexts(d)[0];
					if(context != null) {
						var _this = context.local3d;
						var f = 2;
						if(visible) {
							_this.flags |= f;
						} else {
							_this.flags &= ~f;
						}
					}
				}
			}
		}
	}
	,mainRenderer: null
	,getHideProps: function() {
		return { icon : "sun-o", name : "RenderProps", allowChildren : function(t) {
			if(!(hrt.prefab.Library.isOfType(t,hrt.prefab.rfx.RendererFX) || hrt.prefab.Library.isOfType(t,prefab.Light) || hrt.prefab.Library.isOfType(t,hrt.prefab.l3d.Environment))) {
				return hrt.prefab.Library.isOfType(t,prefab.CycleCurve);
			} else {
				return true;
			}
		}};
	}
	,updateInstance: function(ctx,prop) {
		if(this.mainRenderer == null) {
			return;
		}
		var col = this.mainRenderer.getOpt(hrt.prefab.rfx.ColorGrading);
		if(col != null) {
			col.customLut = this.lutPath == null ? null : hxd.res.Loader.currentInstance.load(this.lutPath).toTexture();
		}
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.RenderProps.prototype.edit.call(this,ctx);
		var rctx = ctx.getContext(this);
		this.disableDirlights(rctx);
		if(this.name == "mainRenderer") {
			return;
		}
		var shared = ctx.rootContext.shared;
		var k = shared.contexts.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			if(((k1) instanceof prefab.CycleProps)) {
				if(k1.name == "mainRenderer") {
					this.mainRenderer = k1;
					break;
				}
			}
		}
		if(this.mainRenderer != null) {
			this.mainRenderer.applyProps(ctx.scene.s3d.renderer);
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var env = ((s) instanceof hrt.prefab.l3d.Environment) ? s : null;
				if(env != null) {
					env.applyToRenderer(ctx.scene.s3d.renderer);
				}
			}
		}
		var p = $("\r\n\t\t<div class=\"group\" name=\"CycleProps\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Time</dt><dd><input type=\"range\" max=\"1.0\" field=\"time\"/></dd>\r\n\t\t\t\t<dt>Light Inclination</dt><dd><input type=\"range\" max=\"90\" field=\"lightInclination\"/></dd>\r\n\t\t\t\t<dt>LUT</dt><dd><input type=\"texturepath\" field=\"lutPath\"/></dd>\r\n\t\t\t\t<dt>Fog Start</dt><dd><input type=\"color\" field=\"fogStartColor\"/></dd>\r\n\t\t\t\t<dt>Fog End</dt><dd><input type=\"color\" field=\"fogEndColor\"/></dd>\r\n\t\t\t\t<dt>Fog Light</dt><dd><input type=\"color\" field=\"fogLightColor\"/></dd>\r\n\t\t\t</dl>\r\n\t\t</div>\r\n\t\t");
		ctx.properties.add(p,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
		this.updateInstance(rctx);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.RenderProps.prototype.saveSerializedFields.call(this,obj);
		if(this.time != 0.0) {
			obj.time = this.time;
		}
		if(this.lightInclination != 90.0) {
			obj.lightInclination = this.lightInclination;
		}
		if(this.fogStartColor != 16777215) {
			obj.fogStartColor = this.fogStartColor;
		}
		if(this.fogEndColor != 16777215) {
			obj.fogEndColor = this.fogEndColor;
		}
		if(this.fogLightColor != 0) {
			obj.fogLightColor = this.fogLightColor;
		}
		if(this.lutPath != null) {
			obj.lutPath = this.lutPath;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.RenderProps.prototype.loadSerializedFields.call(this,obj);
		this.time = obj.time == null ? 0.0 : obj.time;
		this.lightInclination = obj.lightInclination == null ? 90.0 : obj.lightInclination;
		this.fogStartColor = obj.fogStartColor == null ? 16777215 : obj.fogStartColor;
		this.fogEndColor = obj.fogEndColor == null ? 16777215 : obj.fogEndColor;
		this.fogLightColor = obj.fogLightColor == null ? 0 : obj.fogLightColor;
		this.lutPath = obj.lutPath == null ? null : obj.lutPath;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.RenderProps.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.time = p1.time;
		this.lightInclination = p1.lightInclination;
		this.fogStartColor = p1.fogStartColor;
		this.fogEndColor = p1.fogEndColor;
		this.fogLightColor = p1.fogLightColor;
		this.lutPath = p1.lutPath;
	}
	,__class__: prefab.CycleProps
});
prefab.LutBlend = $hxClasses["prefab.LutBlend"] = function() {
	this.t__ = 0;
	h3d.shader.ScreenShader.call(this);
};
prefab.LutBlend.__name__ = "prefab.LutBlend";
prefab.LutBlend._SHADER = null;
prefab.LutBlend.__super__ = h3d.shader.ScreenShader;
prefab.LutBlend.prototype = $extend(h3d.shader.ScreenShader.prototype,{
	from__: null
	,get_from: function() {
		return this.from__;
	}
	,set_from: function(_v) {
		return this.from__ = _v;
	}
	,to__: null
	,get_to: function() {
		return this.to__;
	}
	,set_to: function(_v) {
		return this.to__ = _v;
	}
	,t__: null
	,get_t: function() {
		return this.t__;
	}
	,set_t: function(_v) {
		return this.t__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.from__;
		case 2:
			return this.to__;
		case 3:
			return this.t__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 3:
			return this.t__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.LutBlend.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.from__ = this.from__;
		s.to__ = this.to__;
		s.t__ = this.t__;
		return s;
	}
	,__class__: prefab.LutBlend
	,__properties__: $extend(h3d.shader.ScreenShader.prototype.__properties__,{set_t:"set_t",get_t:"get_t",set_to:"set_to",get_to:"get_to",set_from:"set_from",get_from:"get_from"})
});
prefab.CycleMarker = $hxClasses["prefab.CycleMarker"] = function() {
	this.lut = null;
	this.lightColor = new h3d.Vector();
};
prefab.CycleMarker.__name__ = "prefab.CycleMarker";
prefab.CycleMarker.prototype = {
	time: null
	,lightColor: null
	,lightInclination: null
	,lighPower: null
	,fogStartColor: null
	,fogEndColor: null
	,fogLightColor: null
	,env: null
	,curve: null
	,lut: null
	,__class__: prefab.CycleMarker
};
prefab.DayNightCycleObject = $hxClasses["prefab.DayNightCycleObject"] = function(parent) {
	h3d.scene.Object.call(this,parent);
};
prefab.DayNightCycleObject.__name__ = "prefab.DayNightCycleObject";
prefab.DayNightCycleObject.__super__ = h3d.scene.Object;
prefab.DayNightCycleObject.prototype = $extend(h3d.scene.Object.prototype,{
	prefab: null
	,lutBlend: null
	,onRemove: function() {
		h3d.scene.Object.prototype.onRemove.call(this);
		if(this.lutBlend != null) {
			this.lutBlend.dispose();
		}
	}
	,sync: function(ctx) {
		if(this.prefab.autoUpdate) {
			this.prefab.setTime(ctx.time * this.prefab.cycleSpeed * 0.01 % 1.0,this.getScene(),this);
			return;
		}
	}
	,__class__: prefab.DayNightCycleObject
});
prefab.DayNightCycle = $hxClasses["prefab.DayNightCycle"] = function(parent) {
	this.curTime = -1e9;
	this.tmpQuat = new h3d.Quat();
	this.tmpVec = new h3d.Vector();
	this.blendShader = new prefab.LutBlend();
	this.lightRotation = 0.;
	this.autoUpdate = false;
	this.envMapRotationSpeed = 1.0;
	this.cycleSpeed = 1.0;
	this.currentCycle = 0.0;
	this.cycleMarkers = [];
	hrt.prefab.Object3D.call(this,parent);
};
prefab.DayNightCycle.__name__ = "prefab.DayNightCycle";
prefab.DayNightCycle.__super__ = hrt.prefab.Object3D;
prefab.DayNightCycle.prototype = $extend(hrt.prefab.Object3D.prototype,{
	cycleMarkers: null
	,currentCycle: null
	,cycleSpeed: null
	,envMapRotationSpeed: null
	,autoUpdate: null
	,lightRotation: null
	,specialLightTime: null
	,blendShader: null
	,findClass: function(o,t) {
		var _g = 0;
		var _g1 = o.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = js.Boot.__downcastCheck(c,t) ? c : null;
			if(d != null) {
				return d;
			}
		}
		return null;
	}
	,makeInstance: function(ctx) {
		var ctx1 = ctx.clone(this);
		var dnc = new prefab.DayNightCycleObject(ctx1.local3d);
		dnc.prefab = this;
		dnc.lutBlend = new h3d.mat.Texture(256,16,[h3d.mat.TextureFlags.Target],hxd.PixelFormat.RGBA);
		ctx1.local3d = dnc;
		ctx1.local3d.name = this.name;
		this.refreshMarkers(ctx1);
		this.updateInstance(ctx1);
		return ctx1;
	}
	,smoothstep: function(t) {
		return t * t * (3.0 - 2.0 * t);
	}
	,refreshMarkers: function(ctx) {
		this.cycleMarkers = [];
		var shared = ctx.shared;
		var renderProps = [];
		var k = shared.contexts.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			if(((k1) instanceof prefab.CycleProps)) {
				if(k1.name != "mainRenderer") {
					renderProps.push(k1);
				}
			}
		}
		var _g = 0;
		while(_g < renderProps.length) {
			var rp = renderProps[_g];
			++_g;
			var i = renderProps.indexOf(rp) / renderProps.length;
			var cm = new prefab.CycleMarker();
			var l = this.findClass(rp,hrt.prefab.Light);
			if(l != null) {
				var c = l.color;
				var s = 0.00392156862745098;
				cm.lightColor = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
				cm.lighPower = l.power;
			}
			var c1 = this.findClass(rp,hrt.prefab.Curve);
			if(c1 != null) {
				cm.curve = c1;
			}
			var e = this.findClass(rp,hrt.prefab.l3d.Environment);
			if(e != null) {
				cm.env = e.env;
			}
			if(rp.lutPath != null) {
				cm.lut = hxd.res.Loader.currentInstance.load(rp.lutPath).toTexture();
			}
			cm.fogStartColor = rp.fogStartColor;
			cm.fogEndColor = rp.fogEndColor;
			cm.fogLightColor = rp.fogLightColor;
			cm.time = rp.time;
			cm.lightInclination = rp.lightInclination;
			this.cycleMarkers.push(cm);
		}
		var sortMarker = function(a,b) {
			if(a.time - b.time > 0) {
				return 1;
			} else {
				return -1;
			}
		};
		this.cycleMarkers.sort(sortMarker);
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.Object3D.prototype.updateInstance.call(this,ctx,propName);
		if(propName == "currentCycle") {
			this.autoUpdate = false;
		}
		this.currentCycle = (this.currentCycle + 12) % 24.0 / 24;
		this.setTime(this.currentCycle,ctx.local3d.getScene(),ctx.local3d);
	}
	,tmpVec: null
	,tmpQuat: null
	,curTime: null
	,resetTime: function() {
		this.curTime = -1e9;
	}
	,setTime: function(time,scene,dnc,lightOnly) {
		if(lightOnly == null) {
			lightOnly = false;
		}
		var r = scene.renderer;
		var cb = this.getMarkersAt(time);
		this.curTime = time;
		if(cb == null) {
			return;
		}
		var t = cb.from.curve != null ? cb.from.curve.getVal(cb.t) : this.smoothstep(cb.t);
		if(t < 0.) {
			t = 0.;
		} else if(t > 1.) {
			t = 1.;
		}
		var lightRot = 0.;
		var dl = scene.find(function(o) {
			if((o.flags & 2) == 0) {
				return null;
			}
			var dl = ((o) instanceof h3d.scene.pbr.DirLight) ? o : null;
			if(dl != null && dl.isMainLight) {
				return dl;
			} else {
				return null;
			}
		});
		if(dl != null) {
			var _this = dl._color;
			var v1 = cb.from.lightColor;
			var v2 = cb.to.lightColor;
			var a = v1.x;
			_this.x = a + t * (v2.x - a);
			var a = v1.y;
			_this.y = a + t * (v2.y - a);
			var a = v1.z;
			_this.z = a + t * (v2.z - a);
			var a = v1.w;
			_this.w = a + t * (v2.w - a);
			var a = cb.from.lighPower;
			dl.power = a + t * (cb.to.lighPower - a);
			var rotZ = this.lightRotation == 0 ? time / 0.5 * 3.14159265358979323 : this.lightRotation * 3.14159265358979323 / 180;
			var a = cb.from.lightInclination;
			var rotY = a + t * (cb.to.lightInclination - a);
			lightRot = rotZ;
			this.tmpQuat.initRotation(0.0,rotY * 3.14159265358979323 / 180.0,rotZ);
			var _this = this.tmpQuat;
			dl.setDirection(new h3d.Vector(1 - 2 * (_this.y * _this.y + _this.z * _this.z),2 * (_this.x * _this.y + _this.z * _this.w),2 * (_this.x * _this.z - _this.y * _this.w)));
		}
		if(lightOnly) {
			return;
		}
		var f = r.getEffect(hrt.prefab.rfx.GenFog);
		if(f != null) {
			f.startColor = hxd.Math.colorLerp(cb.from.fogStartColor,cb.to.fogStartColor,t);
			f.endColor = hxd.Math.colorLerp(cb.from.fogEndColor,cb.to.fogEndColor,t);
			f.lightColor = hxd.Math.colorLerp(cb.from.fogLightColor,cb.to.fogLightColor,t);
		}
		var f = r.getEffect(hrt.prefab.rfx.ColorGrading);
		if(f != null) {
			var defLut = f.getLutTexture();
			var from = cb.from.lut == null ? defLut : cb.from.lut;
			var to = cb.to.lut == null ? defLut : cb.to.lut;
			if(from == to) {
				f.customLut = from;
			} else {
				this.blendShader.from__ = from;
				this.blendShader.to__ = to;
				this.blendShader.t__ = t;
				h3d.pass.ScreenFx.run(this.blendShader,dnc.lutBlend);
				f.customLut = dnc.lutBlend;
			}
		}
		if(r.pbrIndirectBlend != null) {
			if(r.env != null) {
				r.env.rotation = lightRot * this.envMapRotationSpeed % 6.2831853071795862;
			}
			if(cb.from.env != null && cb.to.env != null) {
				r.pbrIndirectBlend.irrDiffuseA__ = cb.from.env.diffuse;
				r.pbrIndirectBlend.irrDiffuseB__ = cb.to.env.diffuse;
				r.pbrIndirectBlend.irrSpecularA__ = cb.from.env.specular;
				r.pbrIndirectBlend.irrSpecularB__ = cb.to.env.specular;
				r.pbrIndirectBlend.irrSpecularLevelsA__ = cb.from.env.specLevels;
				r.pbrIndirectBlend.irrSpecularLevelsB__ = cb.to.env.specLevels;
				var a = cb.from.env.power;
				r.pbrIndirectBlend.powerOverride__ = a + t * (cb.to.env.power - a);
				r.pbrIndirectBlend.powerOverride__ *= r.pbrIndirectBlend.powerOverride__;
				r.pbrIndirectBlend.blendAmount__ = t;
			} else {
				r.pbrIndirectBlend.irrDiffuseA__ = null;
				r.pbrIndirectBlend.irrDiffuseB__ = null;
				r.pbrIndirectBlend.irrSpecularA__ = null;
				r.pbrIndirectBlend.irrSpecularB__ = null;
				r.pbrIndirectBlend.irrSpecularLevelsA__ = 0;
				r.pbrIndirectBlend.irrSpecularLevelsB__ = 0;
			}
		}
		if(this.specialLightTime != null) {
			this.setTime(this.specialLightTime,scene,dnc,true);
			this.curTime = time;
		}
	}
	,getMarkersAt: function(time) {
		var cb = null;
		var _g = 0;
		var _g1 = this.cycleMarkers.length;
		while(_g < _g1) {
			var i = _g++;
			var from = this.cycleMarkers[i];
			var to = this.cycleMarkers[(i + 1) % this.cycleMarkers.length];
			if(time < from.time) {
				continue;
			}
			if(to.time > from.time && time > to.time) {
				continue;
			}
			var t = 0.0;
			if(to.time > from.time) {
				t = (time - from.time) / (to.time - from.time);
			} else {
				t = (time < to.time ? time + (1.0 - from.time) : time - from.time) / (1.0 - from.time + to.time);
			}
			cb = { from : from, to : to, t : t};
		}
		return cb;
	}
	,setSelected: function(ctx,b) {
		hrt.prefab.Object3D.prototype.setSelected.call(this,ctx,b);
		var shared = ctx.shared;
		if(b) {
			var k = shared.contexts.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				var rp = ((k1) instanceof prefab.CycleProps) ? k1 : null;
				if(rp != null && rp.name == "mainRenderer") {
					rp.applyProps(ctx.local3d.getScene().renderer);
				}
			}
			var scene = ctx.local3d.getScene();
			var lights = scene.findAll(function(f) {
				if(((f) instanceof h3d.scene.pbr.DirLight)) {
					return f;
				} else {
					return null;
				}
			});
			var _g = 0;
			while(_g < lights.length) {
				var l = lights[_g];
				++_g;
				if(l.parent != null && l.parent.name == "mainRenderer") {
					var f = 2;
					l.flags |= f;
				} else {
					var f1 = 2;
					l.flags &= ~f1;
				}
			}
		}
		return true;
	}
	,getHideProps: function() {
		return { icon : "sun-o", name : "DayNightCycle"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.edit.call(this,ctx);
		this.refreshMarkers(ctx.getContext(this));
		this.updateInstance(ctx.getContext(this));
		var p = $("\r\n\t\t<div class=\"group\" name=\"General\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Debug Speed</dt><dd><input type=\"range\" max=\"100\" field=\"cycleSpeed\"/></dd>\r\n\t\t\t\t<dt>Use Debug Speed</dt><dd><input type=\"checkbox\" field=\"autoUpdate\"/></dd>\r\n\t\t\t</dl>\r\n\t\t</div>\r\n\t\t<div class=\"group\" name=\"Environment\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Rotation Speed</dt><dd><input type=\"range\" max=\"20\" field=\"envMapRotationSpeed\"/></dd>\r\n\t\t\t\t<dt>Light Rotation</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"lightRotation\"/></dd>\r\n \t\t\t</dl>\r\n\t\t</div>\r\n\t\t<div class=\"group\" name=\"Debug\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Current</dt><dd><input type=\"range\" max=\"24\" min=\"0\" field=\"currentCycle\"/></dd>\r\n\t\t\t\t<div align=\"center\"><input type=\"button\" value=\"Refresh\" class=\"refreshButton\" /></div>\r\n\t\t\t</dl>\r\n\t\t</div>");
		var refreshButton = p.find(".refreshButton");
		refreshButton.click(function(_) {
			_gthis.refreshMarkers(ctx.getContext(_gthis));
			ctx.onChange(_gthis,null);
		});
		ctx.properties.add(p,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.cycleSpeed != 1.0) {
			obj.cycleSpeed = this.cycleSpeed;
		}
		if(this.envMapRotationSpeed != 1.0) {
			obj.envMapRotationSpeed = this.envMapRotationSpeed;
		}
		if(this.autoUpdate != false) {
			obj.autoUpdate = this.autoUpdate;
		}
		if(this.lightRotation != 0.) {
			obj.lightRotation = this.lightRotation;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.cycleSpeed = obj.cycleSpeed == null ? 1.0 : obj.cycleSpeed;
		this.envMapRotationSpeed = obj.envMapRotationSpeed == null ? 1.0 : obj.envMapRotationSpeed;
		this.autoUpdate = obj.autoUpdate == null ? false : obj.autoUpdate;
		this.lightRotation = obj.lightRotation == null ? 0. : obj.lightRotation;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.cycleSpeed = p1.cycleSpeed;
		this.envMapRotationSpeed = p1.envMapRotationSpeed;
		this.autoUpdate = p1.autoUpdate;
		this.lightRotation = p1.lightRotation;
	}
	,__class__: prefab.DayNightCycle
});
prefab.EmissivePulseShader = $hxClasses["prefab.EmissivePulseShader"] = function() {
	this.minEmissive__ = 0;
	this.reboundIntensity__ = 0;
	this.reboundPower__ = 0;
	this.reboundOffset__ = 0;
	this.power__ = 0;
	this.frequency__ = 0;
	hxsl.Shader.call(this);
};
prefab.EmissivePulseShader.__name__ = "prefab.EmissivePulseShader";
prefab.EmissivePulseShader._SHADER = null;
prefab.EmissivePulseShader.__super__ = hxsl.Shader;
prefab.EmissivePulseShader.prototype = $extend(hxsl.Shader.prototype,{
	mask__: null
	,get_mask: function() {
		return this.mask__;
	}
	,set_mask: function(_v) {
		return this.mask__ = _v;
	}
	,frequency__: null
	,get_frequency: function() {
		return this.frequency__;
	}
	,set_frequency: function(_v) {
		return this.frequency__ = _v;
	}
	,power__: null
	,get_power: function() {
		return this.power__;
	}
	,set_power: function(_v) {
		return this.power__ = _v;
	}
	,reboundOffset__: null
	,get_reboundOffset: function() {
		return this.reboundOffset__;
	}
	,set_reboundOffset: function(_v) {
		return this.reboundOffset__ = _v;
	}
	,reboundPower__: null
	,get_reboundPower: function() {
		return this.reboundPower__;
	}
	,set_reboundPower: function(_v) {
		return this.reboundPower__ = _v;
	}
	,reboundIntensity__: null
	,get_reboundIntensity: function() {
		return this.reboundIntensity__;
	}
	,set_reboundIntensity: function(_v) {
		return this.reboundIntensity__ = _v;
	}
	,minEmissive__: null
	,get_minEmissive: function() {
		return this.minEmissive__;
	}
	,set_minEmissive: function(_v) {
		return this.minEmissive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.mask__;
		case 1:
			return this.frequency__;
		case 2:
			return this.power__;
		case 3:
			return this.reboundOffset__;
		case 4:
			return this.reboundPower__;
		case 5:
			return this.reboundIntensity__;
		case 6:
			return this.minEmissive__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.frequency__;
		case 2:
			return this.power__;
		case 3:
			return this.reboundOffset__;
		case 4:
			return this.reboundPower__;
		case 5:
			return this.reboundIntensity__;
		case 6:
			return this.minEmissive__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.EmissivePulseShader.prototype);
		s.shader = this.shader;
		s.mask__ = this.mask__;
		s.frequency__ = this.frequency__;
		s.power__ = this.power__;
		s.reboundOffset__ = this.reboundOffset__;
		s.reboundPower__ = this.reboundPower__;
		s.reboundIntensity__ = this.reboundIntensity__;
		s.minEmissive__ = this.minEmissive__;
		return s;
	}
	,__class__: prefab.EmissivePulseShader
	,__properties__: {set_minEmissive:"set_minEmissive",get_minEmissive:"get_minEmissive",set_reboundIntensity:"set_reboundIntensity",get_reboundIntensity:"get_reboundIntensity",set_reboundPower:"set_reboundPower",get_reboundPower:"get_reboundPower",set_reboundOffset:"set_reboundOffset",get_reboundOffset:"get_reboundOffset",set_power:"set_power",get_power:"get_power",set_frequency:"set_frequency",get_frequency:"get_frequency",set_mask:"set_mask",get_mask:"get_mask"}
});
prefab.EmissivePulse = $hxClasses["prefab.EmissivePulse"] = function(parent) {
	this.minEmissive = 0.0;
	this.reboundIntensity = 1.0;
	this.reboundPower = 1.0;
	this.reboundOffset = 0.0;
	this.power = 1.0;
	this.frequency = 1.0;
	this.mask = null;
	hrt.prefab.Shader.call(this,parent);
};
prefab.EmissivePulse.__name__ = "prefab.EmissivePulse";
prefab.EmissivePulse.__super__ = hrt.prefab.Shader;
prefab.EmissivePulse.prototype = $extend(hrt.prefab.Shader.prototype,{
	mask: null
	,frequency: null
	,power: null
	,reboundOffset: null
	,reboundPower: null
	,reboundIntensity: null
	,minEmissive: null
	,makeShader: function(ctx) {
		return new prefab.EmissivePulseShader();
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.Shader.prototype.updateInstance.call(this,ctx,propName);
	}
	,syncShaderVars: function(shader,shaderDef) {
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,shader,shaderDef);
		var s = shader;
		if(this.mask != null) {
			s.mask__ = hxd.res.Loader.currentInstance.load(this.mask).toTexture();
		} else {
			s.mask__ = h3d.mat.Texture.fromColor(-1);
		}
		s.frequency__ = this.frequency * Math.PI;
		s.power__ = this.power;
		s.reboundOffset__ = this.reboundOffset;
		s.reboundPower__ = this.reboundPower;
		s.reboundIntensity__ = this.reboundIntensity;
		s.minEmissive__ = this.minEmissive;
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"EmissivePulse\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Mask</dt><dd><input type=\"texturepath\" field=\"mask\"/></dd>\r\n\t\t\t\t\t<dt>Frequency</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"frequency\"/></dd>\r\n\t\t\t\t\t<dt>Rebound Offset</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"reboundOffset\"/></dd>\r\n\t\t\t\t\t<dt>Rebound Power</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"reboundPower\"/></dd>\r\n\t\t\t\t\t<dt>Rebound Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"reboundIntensity\"/></dd>\r\n\t\t\t\t\t<dt>Min Emissive</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"minEmissive\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.mask != null) {
			obj.mask = this.mask;
		}
		if(this.frequency != 1.0) {
			obj.frequency = this.frequency;
		}
		if(this.power != 1.0) {
			obj.power = this.power;
		}
		if(this.reboundOffset != 0.0) {
			obj.reboundOffset = this.reboundOffset;
		}
		if(this.reboundPower != 1.0) {
			obj.reboundPower = this.reboundPower;
		}
		if(this.reboundIntensity != 1.0) {
			obj.reboundIntensity = this.reboundIntensity;
		}
		if(this.minEmissive != 0.0) {
			obj.minEmissive = this.minEmissive;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.mask = obj.mask == null ? null : obj.mask;
		this.frequency = obj.frequency == null ? 1.0 : obj.frequency;
		this.power = obj.power == null ? 1.0 : obj.power;
		this.reboundOffset = obj.reboundOffset == null ? 0.0 : obj.reboundOffset;
		this.reboundPower = obj.reboundPower == null ? 1.0 : obj.reboundPower;
		this.reboundIntensity = obj.reboundIntensity == null ? 1.0 : obj.reboundIntensity;
		this.minEmissive = obj.minEmissive == null ? 0.0 : obj.minEmissive;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.mask = p1.mask;
		this.frequency = p1.frequency;
		this.power = p1.power;
		this.reboundOffset = p1.reboundOffset;
		this.reboundPower = p1.reboundPower;
		this.reboundIntensity = p1.reboundIntensity;
		this.minEmissive = p1.minEmissive;
	}
	,__class__: prefab.EmissivePulse
});
prefab.FireLightingShader = $hxClasses["prefab.FireLightingShader"] = function() {
	this.threshold__ = 0;
	this.secondFrequency__ = 0;
	this.frequency__ = 0;
	this.noiseIntensity__ = 0;
	this.offsetScale__ = 0;
	this.noiseScale__ = 0;
	this.fireColor__ = new h3d.Vector();
	this.intensity__ = 0;
	this.startHeight__ = 0;
	this.endHeight__ = 0;
	hrt.shader.PbrShader.call(this);
};
prefab.FireLightingShader.__name__ = "prefab.FireLightingShader";
prefab.FireLightingShader._SHADER = null;
prefab.FireLightingShader.__super__ = hrt.shader.PbrShader;
prefab.FireLightingShader.prototype = $extend(hrt.shader.PbrShader.prototype,{
	vfxMap__: null
	,get_vfxMap: function() {
		return this.vfxMap__;
	}
	,set_vfxMap: function(_v) {
		return this.vfxMap__ = _v;
	}
	,endHeight__: null
	,get_endHeight: function() {
		return this.endHeight__;
	}
	,set_endHeight: function(_v) {
		return this.endHeight__ = _v;
	}
	,startHeight__: null
	,get_startHeight: function() {
		return this.startHeight__;
	}
	,set_startHeight: function(_v) {
		return this.startHeight__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,fireColor__: null
	,get_fireColor: function() {
		return this.fireColor__;
	}
	,set_fireColor: function(_v) {
		return this.fireColor__ = _v;
	}
	,borderNoiseTexture__: null
	,get_borderNoiseTexture: function() {
		return this.borderNoiseTexture__;
	}
	,set_borderNoiseTexture: function(_v) {
		return this.borderNoiseTexture__ = _v;
	}
	,noiseScale__: null
	,get_noiseScale: function() {
		return this.noiseScale__;
	}
	,set_noiseScale: function(_v) {
		return this.noiseScale__ = _v;
	}
	,offsetScale__: null
	,get_offsetScale: function() {
		return this.offsetScale__;
	}
	,set_offsetScale: function(_v) {
		return this.offsetScale__ = _v;
	}
	,noiseIntensity__: null
	,get_noiseIntensity: function() {
		return this.noiseIntensity__;
	}
	,set_noiseIntensity: function(_v) {
		return this.noiseIntensity__ = _v;
	}
	,frequency__: null
	,get_frequency: function() {
		return this.frequency__;
	}
	,set_frequency: function(_v) {
		return this.frequency__ = _v;
	}
	,secondFrequency__: null
	,get_secondFrequency: function() {
		return this.secondFrequency__;
	}
	,set_secondFrequency: function(_v) {
		return this.secondFrequency__ = _v;
	}
	,threshold__: null
	,get_threshold: function() {
		return this.threshold__;
	}
	,set_threshold: function(_v) {
		return this.threshold__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.vfxMap__;
		case 2:
			return this.endHeight__;
		case 3:
			return this.startHeight__;
		case 4:
			return this.intensity__;
		case 5:
			return this.fireColor__;
		case 6:
			return this.borderNoiseTexture__;
		case 7:
			return this.noiseScale__;
		case 8:
			return this.offsetScale__;
		case 9:
			return this.noiseIntensity__;
		case 10:
			return this.frequency__;
		case 11:
			return this.secondFrequency__;
		case 12:
			return this.threshold__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 2:
			return this.endHeight__;
		case 3:
			return this.startHeight__;
		case 4:
			return this.intensity__;
		case 7:
			return this.noiseScale__;
		case 8:
			return this.offsetScale__;
		case 9:
			return this.noiseIntensity__;
		case 10:
			return this.frequency__;
		case 11:
			return this.secondFrequency__;
		case 12:
			return this.threshold__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.FireLightingShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.vfxMap__ = this.vfxMap__;
		s.endHeight__ = this.endHeight__;
		s.startHeight__ = this.startHeight__;
		s.intensity__ = this.intensity__;
		s.fireColor__ = this.fireColor__;
		s.borderNoiseTexture__ = this.borderNoiseTexture__;
		s.noiseScale__ = this.noiseScale__;
		s.offsetScale__ = this.offsetScale__;
		s.noiseIntensity__ = this.noiseIntensity__;
		s.frequency__ = this.frequency__;
		s.secondFrequency__ = this.secondFrequency__;
		s.threshold__ = this.threshold__;
		return s;
	}
	,__class__: prefab.FireLightingShader
	,__properties__: $extend(hrt.shader.PbrShader.prototype.__properties__,{set_threshold:"set_threshold",get_threshold:"get_threshold",set_secondFrequency:"set_secondFrequency",get_secondFrequency:"get_secondFrequency",set_frequency:"set_frequency",get_frequency:"get_frequency",set_noiseIntensity:"set_noiseIntensity",get_noiseIntensity:"get_noiseIntensity",set_offsetScale:"set_offsetScale",get_offsetScale:"get_offsetScale",set_noiseScale:"set_noiseScale",get_noiseScale:"get_noiseScale",set_borderNoiseTexture:"set_borderNoiseTexture",get_borderNoiseTexture:"get_borderNoiseTexture",set_fireColor:"set_fireColor",get_fireColor:"get_fireColor",set_intensity:"set_intensity",get_intensity:"get_intensity",set_startHeight:"set_startHeight",get_startHeight:"get_startHeight",set_endHeight:"set_endHeight",get_endHeight:"get_endHeight",set_vfxMap:"set_vfxMap",get_vfxMap:"get_vfxMap"})
});
prefab.FireLighting = $hxClasses["prefab.FireLighting"] = function(parent) {
	this.fireColor = 16711680;
	this.offsetScale = 1.0;
	this.noiseScale = 1.0;
	this.noiseIntensity = 0.5;
	this.threshold = 0.8;
	this.secondFrequency = 0.2;
	this.frequency = 1.0;
	this.intensity = 1.0;
	this.endHeight = 1.0;
	this.startHeight = 0.0;
	hrt.prefab.rfx.RendererFX.call(this,parent);
};
prefab.FireLighting.__name__ = "prefab.FireLighting";
prefab.FireLighting.__super__ = hrt.prefab.rfx.RendererFX;
prefab.FireLighting.prototype = $extend(hrt.prefab.rfx.RendererFX.prototype,{
	pass: null
	,startHeight: null
	,endHeight: null
	,intensity: null
	,frequency: null
	,secondFrequency: null
	,threshold: null
	,noiseIntensity: null
	,debugMap: null
	,borderNoiseMap: null
	,noiseScale: null
	,offsetScale: null
	,fireColor: null
	,makeInstance: function(ctx) {
		ctx = hrt.prefab.rfx.RendererFX.prototype.makeInstance.call(this,ctx);
		this.pass = new h3d.pass.ScreenFx(new prefab.FireLightingShader());
		this.updateInstance(ctx);
		return ctx;
	}
	,begin: function(r,step) {
		if(step == h3d.impl.Step.Lighting) {
			var ctx = r.ctx;
			this.pass.pass.setBlendMode(h2d.BlendMode.Add);
			this.pass.shader.vfxMap__ = h3d.mat.Texture.fromColor(0);
			this.pass.shader.borderNoiseTexture__ = this.borderNoiseMap != null ? hxd.res.Loader.currentInstance.load(this.borderNoiseMap).toTexture() : h3d.mat.Texture.fromColor(-1);
			if(this.pass.shader.borderNoiseTexture__ != null) {
				this.pass.shader.borderNoiseTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.pass.shader.endHeight__ = this.endHeight;
			this.pass.shader.startHeight__ = this.startHeight;
			this.pass.shader.intensity__ = this.intensity;
			this.pass.shader.noiseIntensity__ = this.noiseIntensity;
			this.pass.shader.frequency__ = this.frequency;
			this.pass.shader.secondFrequency__ = this.secondFrequency;
			this.pass.shader.threshold__ = this.threshold;
			this.pass.shader.noiseScale__ = this.noiseScale;
			this.pass.shader.offsetScale__ = this.offsetScale;
			var c = this.fireColor;
			var s = 0.00392156862745098;
			this.pass.shader.fireColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			var pbrRenderer = r;
			var propsImport = this.pass.getShader(h3d.shader.pbr.PropsImport);
			if(propsImport == null) {
				this.pass.addShader(pbrRenderer.pbrProps);
			}
			var wasScreen = pbrRenderer.pbrProps.isScreen__;
			var _this = pbrRenderer.pbrProps;
			_this.constModified = true;
			_this.isScreen__ = true;
			if(this.debugMap != null) {
				this.pass.shader.vfxMap__ = hxd.res.Loader.currentInstance.load(this.debugMap).toTexture();
				this.pass.shader.vfxMap__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.pass.setGlobals(ctx);
			this.pass.render();
			var _this = pbrRenderer.pbrProps;
			_this.constModified = true;
			_this.isScreen__ = wasScreen;
		}
	}
	,edit: function(ctx) {
		ctx.properties.add($("\r\n\t\t\t<dl>\r\n\t\t\t\t<div class=\"group\" name=\"Lighting\">\r\n\t\t\t\t\t<dt>Debug Map</dt><dd><input type=\"texturepath\" field=\"debugMap\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t</dl>\r\n\t\t\t<dl>\r\n\t\t\t\t<div class=\"group\" name=\"Lighting\">\r\n\t\t\t\t\t<dt>Start Height</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"startHeight\"/></dd>\r\n\t\t\t\t\t<dt>End Height</dt><dd><input type=\"range\" min=\"0\" max=\"5\" field=\"endHeight\"/></dd>\r\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"intensity\"/></dd>\r\n\t\t\t\t\t<dt>Color</dt><dd><input type=\"color\" field=\"fireColor\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t</dl>\r\n\t\t\t<dl>\r\n\t\t\t\t<div class=\"group\" name=\"Noise\">\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"borderNoiseMap\"/></dd>\r\n\t\t\t\t\t<dt>Frequency</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"frequency\"/></dd>\r\n\t\t\t\t\t<dt>Second Frequency</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"secondFrequency\"/></dd>\r\n\t\t\t\t\t<dt>Noise intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"noiseIntensity\"/></dd>\r\n\t\t\t\t\t<dt>Threshold</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"threshold\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"noiseScale\"/></dd>\r\n\t\t\t\t\t<dt>Offset Scale</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"offsetScale\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t</dl>\r\n\t\t"),this);
		hrt.prefab.rfx.RendererFX.prototype.edit.call(this,ctx);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.saveSerializedFields.call(this,obj);
		if(this.startHeight != 0.0) {
			obj.startHeight = this.startHeight;
		}
		if(this.endHeight != 1.0) {
			obj.endHeight = this.endHeight;
		}
		if(this.intensity != 1.0) {
			obj.intensity = this.intensity;
		}
		if(this.frequency != 1.0) {
			obj.frequency = this.frequency;
		}
		if(this.secondFrequency != 0.2) {
			obj.secondFrequency = this.secondFrequency;
		}
		if(this.threshold != 0.8) {
			obj.threshold = this.threshold;
		}
		if(this.noiseIntensity != 0.5) {
			obj.noiseIntensity = this.noiseIntensity;
		}
		if(this.debugMap != null) {
			obj.debugMap = this.debugMap;
		}
		if(this.borderNoiseMap != null) {
			obj.borderNoiseMap = this.borderNoiseMap;
		}
		if(this.noiseScale != 1.0) {
			obj.noiseScale = this.noiseScale;
		}
		if(this.offsetScale != 1.0) {
			obj.offsetScale = this.offsetScale;
		}
		if(this.fireColor != 16711680) {
			obj.fireColor = this.fireColor;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.loadSerializedFields.call(this,obj);
		this.startHeight = obj.startHeight == null ? 0.0 : obj.startHeight;
		this.endHeight = obj.endHeight == null ? 1.0 : obj.endHeight;
		this.intensity = obj.intensity == null ? 1.0 : obj.intensity;
		this.frequency = obj.frequency == null ? 1.0 : obj.frequency;
		this.secondFrequency = obj.secondFrequency == null ? 0.2 : obj.secondFrequency;
		this.threshold = obj.threshold == null ? 0.8 : obj.threshold;
		this.noiseIntensity = obj.noiseIntensity == null ? 0.5 : obj.noiseIntensity;
		this.debugMap = obj.debugMap == null ? null : obj.debugMap;
		this.borderNoiseMap = obj.borderNoiseMap == null ? null : obj.borderNoiseMap;
		this.noiseScale = obj.noiseScale == null ? 1.0 : obj.noiseScale;
		this.offsetScale = obj.offsetScale == null ? 1.0 : obj.offsetScale;
		this.fireColor = obj.fireColor == null ? 16711680 : obj.fireColor;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.rfx.RendererFX.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.startHeight = p1.startHeight;
		this.endHeight = p1.endHeight;
		this.intensity = p1.intensity;
		this.frequency = p1.frequency;
		this.secondFrequency = p1.secondFrequency;
		this.threshold = p1.threshold;
		this.noiseIntensity = p1.noiseIntensity;
		this.debugMap = p1.debugMap;
		this.borderNoiseMap = p1.borderNoiseMap;
		this.noiseScale = p1.noiseScale;
		this.offsetScale = p1.offsetScale;
		this.fireColor = p1.fireColor;
	}
	,__class__: prefab.FireLighting
});
prefab.FootprintPathShader = $hxClasses["prefab.FootprintPathShader"] = function() {
	this.playerPos__ = new h3d.Vector(0,0,0);
	this.endFade__ = 0;
	this.startFade__ = 0;
	this.worldNoiseScale__ = 0;
	this.scale__ = 0;
	this.noiseScale__ = 0;
	this.emissivePower__ = 0;
	hxsl.Shader.call(this);
};
prefab.FootprintPathShader.__name__ = "prefab.FootprintPathShader";
prefab.FootprintPathShader._SHADER = null;
prefab.FootprintPathShader.__super__ = hxsl.Shader;
prefab.FootprintPathShader.prototype = $extend(hxsl.Shader.prototype,{
	albedoTexture__: null
	,get_albedoTexture: function() {
		return this.albedoTexture__;
	}
	,set_albedoTexture: function(_v) {
		return this.albedoTexture__ = _v;
	}
	,normalTexture__: null
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,footprintTexture__: null
	,get_footprintTexture: function() {
		return this.footprintTexture__;
	}
	,set_footprintTexture: function(_v) {
		return this.footprintTexture__ = _v;
	}
	,emissivePower__: null
	,get_emissivePower: function() {
		return this.emissivePower__;
	}
	,set_emissivePower: function(_v) {
		return this.emissivePower__ = _v;
	}
	,noise__: null
	,get_noise: function() {
		return this.noise__;
	}
	,set_noise: function(_v) {
		return this.noise__ = _v;
	}
	,noiseScale__: null
	,get_noiseScale: function() {
		return this.noiseScale__;
	}
	,set_noiseScale: function(_v) {
		return this.noiseScale__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,worldNoise__: null
	,get_worldNoise: function() {
		return this.worldNoise__;
	}
	,set_worldNoise: function(_v) {
		return this.worldNoise__ = _v;
	}
	,worldNoiseScale__: null
	,get_worldNoiseScale: function() {
		return this.worldNoiseScale__;
	}
	,set_worldNoiseScale: function(_v) {
		return this.worldNoiseScale__ = _v;
	}
	,startFade__: null
	,get_startFade: function() {
		return this.startFade__;
	}
	,set_startFade: function(_v) {
		return this.startFade__ = _v;
	}
	,endFade__: null
	,get_endFade: function() {
		return this.endFade__;
	}
	,set_endFade: function(_v) {
		return this.endFade__ = _v;
	}
	,playerPos__: null
	,get_playerPos: function() {
		return this.playerPos__;
	}
	,set_playerPos: function(_v) {
		return this.playerPos__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.albedoTexture__;
		case 1:
			return this.normalTexture__;
		case 2:
			return this.footprintTexture__;
		case 3:
			return this.emissivePower__;
		case 4:
			return this.noise__;
		case 5:
			return this.noiseScale__;
		case 6:
			return this.scale__;
		case 7:
			return this.worldNoise__;
		case 8:
			return this.worldNoiseScale__;
		case 9:
			return this.startFade__;
		case 10:
			return this.endFade__;
		case 11:
			return this.playerPos__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 3:
			return this.emissivePower__;
		case 5:
			return this.noiseScale__;
		case 6:
			return this.scale__;
		case 8:
			return this.worldNoiseScale__;
		case 9:
			return this.startFade__;
		case 10:
			return this.endFade__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.FootprintPathShader.prototype);
		s.shader = this.shader;
		s.albedoTexture__ = this.albedoTexture__;
		s.normalTexture__ = this.normalTexture__;
		s.footprintTexture__ = this.footprintTexture__;
		s.emissivePower__ = this.emissivePower__;
		s.noise__ = this.noise__;
		s.noiseScale__ = this.noiseScale__;
		s.scale__ = this.scale__;
		s.worldNoise__ = this.worldNoise__;
		s.worldNoiseScale__ = this.worldNoiseScale__;
		s.startFade__ = this.startFade__;
		s.endFade__ = this.endFade__;
		s.playerPos__ = this.playerPos__;
		return s;
	}
	,__class__: prefab.FootprintPathShader
	,__properties__: {set_playerPos:"set_playerPos",get_playerPos:"get_playerPos",set_endFade:"set_endFade",get_endFade:"get_endFade",set_startFade:"set_startFade",get_startFade:"get_startFade",set_worldNoiseScale:"set_worldNoiseScale",get_worldNoiseScale:"get_worldNoiseScale",set_worldNoise:"set_worldNoise",get_worldNoise:"get_worldNoise",set_scale:"set_scale",get_scale:"get_scale",set_noiseScale:"set_noiseScale",get_noiseScale:"get_noiseScale",set_noise:"set_noise",get_noise:"get_noise",set_emissivePower:"set_emissivePower",get_emissivePower:"get_emissivePower",set_footprintTexture:"set_footprintTexture",get_footprintTexture:"get_footprintTexture",set_normalTexture:"set_normalTexture",get_normalTexture:"get_normalTexture",set_albedoTexture:"set_albedoTexture",get_albedoTexture:"get_albedoTexture"}
});
prefab.TerrainPathObject = $hxClasses["prefab.TerrainPathObject"] = function(primitive,material,parent) {
	this.points = [];
	h3d.scene.Mesh.call(this,primitive,material,parent);
};
prefab.TerrainPathObject.__name__ = "prefab.TerrainPathObject";
prefab.TerrainPathObject.__super__ = h3d.scene.Mesh;
prefab.TerrainPathObject.prototype = $extend(h3d.scene.Mesh.prototype,{
	points: null
	,terrainPathShader: null
	,onRemove: function() {
		h3d.scene.Mesh.prototype.onRemove.call(this);
	}
	,__class__: prefab.TerrainPathObject
});
prefab.FootprintPathObject = $hxClasses["prefab.FootprintPathObject"] = function(primitive,material,parent) {
	prefab.TerrainPathObject.call(this,primitive,material,parent);
};
prefab.FootprintPathObject.__name__ = "prefab.FootprintPathObject";
prefab.FootprintPathObject.__super__ = prefab.TerrainPathObject;
prefab.FootprintPathObject.prototype = $extend(prefab.TerrainPathObject.prototype,{
	footprintPathShader: null
	,sync: function(ctx) {
	}
	,__class__: prefab.FootprintPathObject
});
prefab.TerrainPath = $hxClasses["prefab.TerrainPath"] = function(parent) {
	this.pts = [];
	this.wireframe = false;
	this.SPLINE_UV = false;
	this.uScale = 1.;
	this.noiseScale = 0.;
	this.scale = 1.0;
	this.pbrTexture = null;
	this.normalTexture = null;
	this.albedoTexture = null;
	this.precision = 5;
	this.width = 1.0;
	this.t = null;
	hrt.prefab.l3d.Spline.call(this,parent);
};
prefab.TerrainPath.__name__ = "prefab.TerrainPath";
prefab.TerrainPath.__super__ = hrt.prefab.l3d.Spline;
prefab.TerrainPath.prototype = $extend(hrt.prefab.l3d.Spline.prototype,{
	t: null
	,width: null
	,precision: null
	,albedoTexture: null
	,normalTexture: null
	,pbrTexture: null
	,scale: null
	,noiseTexture: null
	,noiseScale: null
	,uScale: null
	,SPLINE_UV: null
	,wireframe: null
	,pts: null
	,makeInstance: function(ctx) {
		ctx = ctx.clone(this);
		var tpo = new prefab.TerrainPathObject(null,null,ctx.local3d);
		ctx.local3d = tpo;
		ctx.local3d.name = this.name;
		tpo.terrainPathShader = new prefab.TerrainPathShader();
		tpo.material.passes.addShader(tpo.terrainPathShader);
		tpo.material.set_castShadows(false);
		tpo.material.passes.setBlendMode(h2d.BlendMode.Alpha);
		tpo.material.passes.set_depthWrite(false);
		tpo.material.passes.setPassName("terrainDecal");
		if(tpo.material.passes.getShader(h3d.shader.pbr.PropsTexture) == null) {
			tpo.material.passes.addShader(new h3d.shader.pbr.PropsTexture());
		}
		this.points = [];
		var _g = 0;
		var _g1 = this.pointsData;
		while(_g < _g1.length) {
			var pd = _g1[_g];
			++_g;
			var sp = new hrt.prefab.l3d.SplinePoint(this);
			sp.setTransform(pd);
			sp.getAbsPos();
		}
		if(this.get_points().length == 0) {
			new hrt.prefab.l3d.SplinePoint(this);
		}
		this.updateInstance(ctx);
		return ctx;
	}
	,updateInstance: function(ctx,propName) {
		var t = ctx.shared.find(this,hrt.prefab.l3d.HeightMap,null,true);
		var _this = ctx.local3d.getAbsPos();
		var v = null;
		if(v == null) {
			v = new h3d.Vector();
		}
		var x = _this._41;
		var y = _this._42;
		var z = _this._43;
		var w = _this._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		v.w = w;
		var splineHeight = v.z;
		if(t != null) {
			var _g = 0;
			var _g1 = this.get_points();
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var _this = p.getAbsPos();
				var v = null;
				if(v == null) {
					v = new h3d.Vector();
				}
				var x = _this._41;
				var y = _this._42;
				var z = _this._43;
				var w = _this._44;
				if(w == null) {
					w = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				v.x = x;
				v.y = y;
				v.z = z;
				v.w = w;
				var worldPos = v;
				var height = t.getZ(worldPos.x,worldPos.y) - splineHeight;
				p.z = height;
				if(this.editor != null) {
					p.applyTransform(this.editor.editContext.getContext(p).local3d);
				}
			}
		}
		hrt.prefab.l3d.Spline.prototype.updateInstance.call(this,ctx,propName);
	}
	,computeSpline: function(ctx) {
		hrt.prefab.l3d.Spline.prototype.computeSpline.call(this,ctx);
		this.t = prefab.WaterUtils.findTerrain(this,ctx);
		var tpo = ctx.local3d;
		var p = this.generatePrimitive(tpo,ctx);
		tpo.set_primitive(p);
		if(this.pbrTexture != null) {
			var pt = tpo.material.passes.getShader(h3d.shader.pbr.PropsTexture);
			if(pt != null) {
				pt.texture__ = hxd.res.Loader.currentInstance.load(this.pbrTexture).toTexture();
			}
		}
		if(this.albedoTexture != null) {
			tpo.terrainPathShader.albedoTexture__ = hxd.res.Loader.currentInstance.load(this.albedoTexture).toTexture();
		}
		if(this.normalTexture != null) {
			tpo.terrainPathShader.normalTexture__ = hxd.res.Loader.currentInstance.load(this.normalTexture).toTexture();
		}
		if(this.noiseTexture != null) {
			tpo.terrainPathShader.noise__ = hxd.res.Loader.currentInstance.load(this.noiseTexture).toTexture();
		}
		tpo.terrainPathShader.noiseScale__ = this.noiseScale;
		tpo.terrainPathShader.scale__ = this.scale;
		if(this.wireframe) {
			tpo.material.passes.set_wireframe(true);
			tpo.material.passes.setPassName("overlay");
			var _this = tpo.terrainPathShader;
			_this.constModified = true;
			_this.COLOR_ONLY__ = true;
		} else {
			tpo.material.passes.set_wireframe(false);
			tpo.material.passes.setPassName("terrainDecal");
			var _this = tpo.terrainPathShader;
			_this.constModified = true;
			_this.COLOR_ONLY__ = false;
		}
	}
	,generatePrimitive: function(tpo,ctx) {
		var _gthis = this;
		tpo.points = [];
		var t = ctx.shared.find(this,hrt.prefab.l3d.HeightMap,null,true);
		var prim = new h3d.prim.BigPrimitive(6,true);
		var i = 0;
		var tmp = new h3d.Matrix();
		var absPos = ctx.local3d.getAbsPos();
		var inv = ctx.local3d.getAbsPos().clone();
		inv.initInverse(inv);
		prim.begin(0,0);
		var getLocalHeightOffset = function(localPos) {
			if(t == null) {
				return 0.0;
			}
			var x = localPos.x;
			var y = localPos.y;
			var z = localPos.z;
			var w = localPos.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var worldPos_x = x;
			var worldPos_y = y;
			var worldPos_z = z;
			var worldPos_w = w;
			var m = ctx.local3d.getAbsPos();
			var px = worldPos_x * m._11 + worldPos_y * m._21 + worldPos_z * m._31 + worldPos_w * m._41;
			var py = worldPos_x * m._12 + worldPos_y * m._22 + worldPos_z * m._32 + worldPos_w * m._42;
			var pz = worldPos_x * m._13 + worldPos_y * m._23 + worldPos_z * m._33 + worldPos_w * m._43;
			var pw = worldPos_x * m._14 + worldPos_y * m._24 + worldPos_z * m._34 + worldPos_w * m._44;
			worldPos_x = px;
			worldPos_y = py;
			worldPos_z = pz;
			worldPos_w = pw;
			var bias = 0.2;
			var getLocalHeightOffset = t.getZ(worldPos_x,worldPos_y) + bias;
			var _this = ctx.local3d.getAbsPos();
			var v = null;
			if(v == null) {
				v = new h3d.Vector();
			}
			var x = _this._41;
			var y = _this._42;
			var z = _this._43;
			var w = _this._44;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			v.x = x;
			v.y = y;
			v.z = z;
			v.w = w;
			return getLocalHeightOffset - v.z;
		};
		var verticeCount = 0;
		var lengthAcc = 0.0;
		var prevLocPos = null;
		var _g = 0;
		var _g1 = this.data.samples;
		while(_g < _g1.length) {
			var spd = _g1[_g];
			++_g;
			var splinePos = this.data.samples.indexOf(spd) / (this.data.samples.length - 1);
			var _this = spd.pos;
			var localPos = new h3d.Vector(_this.x,_this.y,_this.z);
			var px = localPos.x * inv._11 + localPos.y * inv._21 + localPos.z * inv._31 + localPos.w * inv._41;
			var py = localPos.x * inv._12 + localPos.y * inv._22 + localPos.z * inv._32 + localPos.w * inv._42;
			var pz = localPos.x * inv._13 + localPos.y * inv._23 + localPos.z * inv._33 + localPos.w * inv._43;
			var pw = localPos.x * inv._14 + localPos.y * inv._24 + localPos.z * inv._34 + localPos.w * inv._44;
			localPos.x = px;
			localPos.y = py;
			localPos.z = pz;
			localPos.w = pw;
			if(prevLocPos == null) {
				prevLocPos = localPos;
			}
			var _this1 = spd.tangent;
			var x = _this1.x;
			var y = _this1.y;
			var z = _this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var _this_w = 1.;
			var x1 = 0;
			var y1 = 0;
			var z1 = 1;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var v_x = x1;
			var v_y = y1;
			var v_z = z1;
			var v_w = 1.;
			var x2 = _this_y * v_z - _this_z * v_y;
			var y2 = _this_z * v_x - _this_x * v_z;
			var z2 = _this_x * v_y - _this_y * v_x;
			var w = 1;
			if(w == null) {
				w = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var right_x = x2;
			var right_y = y2;
			var right_z = z2;
			var right_w = w;
			var x3 = right_x;
			var y3 = right_y;
			var z3 = right_z;
			var w1 = right_w;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var left_x = x3;
			var left_y = y3;
			var left_z = z3;
			var left_w = w1;
			left_x *= -1;
			left_y *= -1;
			left_z *= -1;
			var step = this.precision + 1;
			var from = new h3d.Vector(localPos.x,localPos.y,localPos.z,localPos.w);
			var to = new h3d.Vector(localPos.x,localPos.y,localPos.z,localPos.w);
			var _g2 = 0;
			var _g3 = step;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var f = i1 / step;
				var p = new h3d.Vector(localPos.x + left_x * this.width * f,localPos.y + left_y * this.width * f,0.0);
				var x4 = p.x;
				var y4 = p.y;
				var z4 = p.z;
				var w2 = p.w;
				if(w2 == null) {
					w2 = 1.;
				}
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var worldPos_x = x4;
				var worldPos_y = y4;
				var worldPos_z = z4;
				var worldPos_w = w2;
				var px1 = worldPos_x * absPos._11 + worldPos_y * absPos._21 + worldPos_z * absPos._31 + worldPos_w * absPos._41;
				var py1 = worldPos_x * absPos._12 + worldPos_y * absPos._22 + worldPos_z * absPos._32 + worldPos_w * absPos._42;
				var pz1 = worldPos_x * absPos._13 + worldPos_y * absPos._23 + worldPos_z * absPos._33 + worldPos_w * absPos._43;
				var pw1 = worldPos_x * absPos._14 + worldPos_y * absPos._24 + worldPos_z * absPos._34 + worldPos_w * absPos._44;
				worldPos_x = px1;
				worldPos_y = py1;
				worldPos_z = pz1;
				worldPos_w = pw1;
				from = p;
			}
			var _g4 = 0;
			var _g5 = step;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var f1 = i2 / step;
				var p1 = new h3d.Vector(localPos.x + right_x * this.width * f1,localPos.y + right_y * this.width * f1,0.0);
				var x5 = p1.x;
				var y5 = p1.y;
				var z5 = p1.z;
				var w3 = p1.w;
				if(w3 == null) {
					w3 = 1.;
				}
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				var worldPos_x1 = x5;
				var worldPos_y1 = y5;
				var worldPos_z1 = z5;
				var worldPos_w1 = w3;
				var px2 = worldPos_x1 * absPos._11 + worldPos_y1 * absPos._21 + worldPos_z1 * absPos._31 + worldPos_w1 * absPos._41;
				var py2 = worldPos_x1 * absPos._12 + worldPos_y1 * absPos._22 + worldPos_z1 * absPos._32 + worldPos_w1 * absPos._42;
				var pz2 = worldPos_x1 * absPos._13 + worldPos_y1 * absPos._23 + worldPos_z1 * absPos._33 + worldPos_w1 * absPos._43;
				var pw2 = worldPos_x1 * absPos._14 + worldPos_y1 * absPos._24 + worldPos_z1 * absPos._34 + worldPos_w1 * absPos._44;
				worldPos_x1 = px2;
				worldPos_y1 = py2;
				worldPos_z1 = pz2;
				worldPos_w1 = pw2;
				to = p1;
			}
			var x6 = to.x - from.x;
			var y6 = to.y - from.y;
			var z6 = to.z - from.z;
			var w4 = to.w - from.w;
			if(w4 == null) {
				w4 = 1.;
			}
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var length_x = x6;
			var length_y = y6;
			var length_z = z6;
			var length_w = w4;
			var x7 = localPos.x - prevLocPos.x;
			var y7 = localPos.y - prevLocPos.y;
			var z7 = localPos.z - prevLocPos.z;
			var w5 = localPos.w - prevLocPos.w;
			if(w5 == null) {
				w5 = 1.;
			}
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var _this_x1 = x7;
			var _this_y1 = y7;
			var _this_z1 = z7;
			var _this_w1 = w5;
			var dist = Math.sqrt(_this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1);
			var _g6 = 0;
			var _g7 = this.precision + 1;
			while(_g6 < _g7) {
				var i3 = _g6++;
				var f2 = i3 / this.precision;
				var p2 = new h3d.Vector(from.x + length_x * f2,from.y + length_y * f2,from.z + length_z * f2);
				var hOffset = getLocalHeightOffset(p2);
				if(this.SPLINE_UV) {
					var x8 = p2.x;
					var y8 = p2.y;
					var u = lengthAcc * this.uScale;
					if(i % (_gthis.precision + 1) == 0) {
						tpo.points.push(new h2d.col.Point(x8,y8));
					}
					if(i % (_gthis.precision + 1) == _gthis.precision) {
						tpo.points.unshift(new h2d.col.Point(x8,y8));
					}
					prim.tmpBuf.array[prim.bufPos++] = x8;
					prim.tmpBuf.array[prim.bufPos++] = y8;
					prim.tmpBuf.array[prim.bufPos++] = hOffset;
					var _this2 = prim.bounds;
					if(x8 < _this2.xMin) {
						_this2.xMin = x8;
					}
					if(x8 > _this2.xMax) {
						_this2.xMax = x8;
					}
					if(y8 < _this2.yMin) {
						_this2.yMin = y8;
					}
					if(y8 > _this2.yMax) {
						_this2.yMax = y8;
					}
					if(hOffset < _this2.zMin) {
						_this2.zMin = hOffset;
					}
					if(hOffset > _this2.zMax) {
						_this2.zMax = hOffset;
					}
					prim.tmpBuf.array[prim.bufPos++] = u;
					prim.tmpBuf.array[prim.bufPos++] = f2;
					prim.tmpBuf.array[prim.bufPos++] = 0.0;
					++i;
				} else {
					var x9 = p2.x;
					var y9 = p2.y;
					if(i % (_gthis.precision + 1) == 0) {
						tpo.points.push(new h2d.col.Point(x9,y9));
					}
					if(i % (_gthis.precision + 1) == _gthis.precision) {
						tpo.points.unshift(new h2d.col.Point(x9,y9));
					}
					prim.tmpBuf.array[prim.bufPos++] = x9;
					prim.tmpBuf.array[prim.bufPos++] = y9;
					prim.tmpBuf.array[prim.bufPos++] = hOffset;
					var _this3 = prim.bounds;
					if(x9 < _this3.xMin) {
						_this3.xMin = x9;
					}
					if(x9 > _this3.xMax) {
						_this3.xMax = x9;
					}
					if(y9 < _this3.yMin) {
						_this3.yMin = y9;
					}
					if(y9 > _this3.yMax) {
						_this3.yMax = y9;
					}
					if(hOffset < _this3.zMin) {
						_this3.zMin = hOffset;
					}
					if(hOffset > _this3.zMax) {
						_this3.zMax = hOffset;
					}
					prim.tmpBuf.array[prim.bufPos++] = splinePos;
					prim.tmpBuf.array[prim.bufPos++] = f2;
					prim.tmpBuf.array[prim.bufPos++] = 0.0;
					++i;
				}
				++verticeCount;
			}
			lengthAcc += dist;
			prevLocPos = localPos;
		}
		var i = 0;
		while(i < verticeCount - (this.precision + 1)) {
			var vi = i;
			var lengthOffset = this.precision + 1;
			var _g = 0;
			var _g1 = this.precision;
			while(_g < _g1) {
				var p = _g++;
				prim.tmpIdx[prim.idxPos++] = vi + p + prim.startIndex;
				prim.tmpIdx[prim.idxPos++] = vi + 1 + p + prim.startIndex;
				prim.tmpIdx[prim.idxPos++] = vi + lengthOffset + p + prim.startIndex;
				prim.tmpIdx[prim.idxPos++] = vi + 1 + p + prim.startIndex;
				prim.tmpIdx[prim.idxPos++] = vi + lengthOffset + 1 + p + prim.startIndex;
				prim.tmpIdx[prim.idxPos++] = vi + lengthOffset + p + prim.startIndex;
			}
			i += this.precision + 1;
		}
		prim.flush();
		return prim;
	}
	,getHideProps: function() {
		return { icon : "square", name : "TerrainPath", allowChildren : function(s) {
			return hrt.prefab.Library.isOfType(s,hrt.prefab.l3d.SplinePoint);
		}};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.l3d.Spline.prototype.edit.call(this,ctx);
		ctx.properties.add($("\n\t\t\t<div class=\"group\" name=\"Geometry\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Width</dt><dd><input type=\"range\" min=\"0\" max=\"20\" field=\"width\"/></dd>\n\t\t\t\t\t<dt>Precision</dt><dd><input type=\"range\" min=\"0\" max=\"50\"  step=\"1\" field=\"precision\"/></dd>\n\t\t\t\t<dl>\n\t\t\t</div>\n\t\t\t<div class=\"group\" name=\"Textures\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Albedo</dt><dd><input type=\"texturepath\" field=\"albedoTexture\"/></dd>\n\t\t\t\t\t<dt>Normal</dt><dd><input type=\"texturepath\" field=\"normalTexture\"/></dd>\n\t\t\t\t\t<dt>PBR</dt><dd><input type=\"texturepath\" field=\"pbrTexture\"/></dd>\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"3\" field=\"scale\"/></dd>\n\t\t\t\t\t<dt>Noise</dt><dd><input type=\"texturepath\" field=\"noiseTexture\"/></dd>\n\t\t\t\t\t<dt>Noise Scale</dt><dd><input type=\"range\" min=\"0\" max=\"3\" field=\"noiseScale\"/></dd>\n\t\t\t\t\t<dt>U Scale</dt><dd><input type=\"range\" min=\"0\" max=\"3\" field=\"uScale\"/></dd>\n\t\t\t\t\t<dt>Use Spline UV</dt><dd><input type=\"checkbox\" field=\"SPLINE_UV\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t\t<div class=\"group\" name=\"Debug\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Wireframe</dt><dd><input type=\"checkbox\" field=\"wireframe\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.l3d.Spline.prototype.saveSerializedFields.call(this,obj);
		if(this.width != 1.0) {
			obj.width = this.width;
		}
		if(this.precision != 5) {
			obj.precision = this.precision;
		}
		if(this.albedoTexture != null) {
			obj.albedoTexture = this.albedoTexture;
		}
		if(this.normalTexture != null) {
			obj.normalTexture = this.normalTexture;
		}
		if(this.pbrTexture != null) {
			obj.pbrTexture = this.pbrTexture;
		}
		if(this.scale != 1.0) {
			obj.scale = this.scale;
		}
		if(this.noiseTexture != null) {
			obj.noiseTexture = this.noiseTexture;
		}
		if(this.noiseScale != 0.) {
			obj.noiseScale = this.noiseScale;
		}
		if(this.uScale != 1.) {
			obj.uScale = this.uScale;
		}
		if(this.SPLINE_UV != false) {
			obj.SPLINE_UV = this.SPLINE_UV;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.l3d.Spline.prototype.loadSerializedFields.call(this,obj);
		this.width = obj.width == null ? 1.0 : obj.width;
		this.precision = obj.precision == null ? 5 : obj.precision;
		this.albedoTexture = obj.albedoTexture == null ? null : obj.albedoTexture;
		this.normalTexture = obj.normalTexture == null ? null : obj.normalTexture;
		this.pbrTexture = obj.pbrTexture == null ? null : obj.pbrTexture;
		this.scale = obj.scale == null ? 1.0 : obj.scale;
		this.noiseTexture = obj.noiseTexture == null ? null : obj.noiseTexture;
		this.noiseScale = obj.noiseScale == null ? 0. : obj.noiseScale;
		this.uScale = obj.uScale == null ? 1. : obj.uScale;
		this.SPLINE_UV = obj.SPLINE_UV == null ? false : obj.SPLINE_UV;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.l3d.Spline.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.width = p1.width;
		this.precision = p1.precision;
		this.albedoTexture = p1.albedoTexture;
		this.normalTexture = p1.normalTexture;
		this.pbrTexture = p1.pbrTexture;
		this.scale = p1.scale;
		this.noiseTexture = p1.noiseTexture;
		this.noiseScale = p1.noiseScale;
		this.uScale = p1.uScale;
		this.SPLINE_UV = p1.SPLINE_UV;
	}
	,__class__: prefab.TerrainPath
});
prefab.FootprintPath = $hxClasses["prefab.FootprintPath"] = function(parent) {
	this.emissivePower = 1.0;
	this.worldNoiseScale = 1.0;
	this.endFade = 30.0;
	this.startFade = 15.0;
	prefab.TerrainPath.call(this,parent);
};
prefab.FootprintPath.__name__ = "prefab.FootprintPath";
prefab.FootprintPath.__super__ = prefab.TerrainPath;
prefab.FootprintPath.prototype = $extend(prefab.TerrainPath.prototype,{
	startFade: null
	,endFade: null
	,worldNoiseTexture: null
	,worldNoiseScale: null
	,emissiveTexture: null
	,emissivePower: null
	,fpo: null
	,makeInstance: function(ctx) {
		ctx = ctx.clone(this);
		var fpo = new prefab.FootprintPathObject(null,null,ctx.local3d);
		ctx.local3d = fpo;
		ctx.local3d.name = this.name;
		fpo.terrainPathShader = new prefab.TerrainPathShader();
		fpo.footprintPathShader = new prefab.FootprintPathShader();
		fpo.material.passes.addShader(fpo.footprintPathShader);
		fpo.material.set_castShadows(false);
		fpo.material.passes.setBlendMode(h2d.BlendMode.Alpha);
		fpo.material.passes.set_depthWrite(false);
		fpo.material.passes.setPassName("emissiveDecal");
		this.points = [];
		var _g = 0;
		var _g1 = this.pointsData;
		while(_g < _g1.length) {
			var pd = _g1[_g];
			++_g;
			var sp = new hrt.prefab.l3d.SplinePoint(this);
			sp.setTransform(pd);
			sp.getAbsPos();
		}
		if(this.get_points().length == 0) {
			new hrt.prefab.l3d.SplinePoint(this);
		}
		this.updateInstance(ctx);
		var tshader = fpo.material.passes.getShader(h3d.shader.pbr.PropsTexture);
		if(tshader != null) {
			fpo.material.passes.removeShader(tshader);
		}
		return ctx;
	}
	,computeSpline: function(ctx) {
		prefab.TerrainPath.prototype.computeSpline.call(this,ctx);
		this.t = prefab.WaterUtils.findTerrain(this,ctx);
		var fpo = ctx.local3d;
		fpo.footprintPathShader.startFade__ = this.startFade;
		fpo.footprintPathShader.endFade__ = this.endFade;
		fpo.footprintPathShader.emissivePower__ = this.emissivePower;
		fpo.footprintPathShader.worldNoise__ = this.worldNoiseTexture != null ? ctx.loadTexture(this.worldNoiseTexture) : h3d.mat.Texture.fromColor(1);
		fpo.footprintPathShader.worldNoiseScale__ = this.worldNoiseScale;
		fpo.footprintPathShader.footprintTexture__ = this.emissiveTexture != null ? ctx.loadTexture(this.emissiveTexture) : h3d.mat.Texture.fromColor(0);
		fpo.footprintPathShader.albedoTexture__ = fpo.terrainPathShader.albedoTexture__;
		fpo.footprintPathShader.normalTexture__ = fpo.terrainPathShader.normalTexture__;
		fpo.footprintPathShader.noise__ = fpo.terrainPathShader.noise__;
		fpo.footprintPathShader.noiseScale__ = fpo.terrainPathShader.noiseScale__;
		fpo.footprintPathShader.scale__ = fpo.terrainPathShader.scale__;
		fpo.material.passes.setPassName("emissiveDecal");
	}
	,getHideProps: function() {
		return { icon : "square", name : "FootprintPath", allowChildren : function(s) {
			return hrt.prefab.Library.isOfType(s,hrt.prefab.l3d.SplinePoint);
		}};
	}
	,edit: function(ctx) {
		var _gthis = this;
		prefab.TerrainPath.prototype.edit.call(this,ctx);
		ctx.properties.add($("\n\t\t\t<div class=\"group\" name=\"Footprint\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Footprint</dt><dd><input type=\"texturepath\" field=\"emissiveTexture\"/></dd>\n\t\t\t\t\t<dt>Start fade</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"startFade\"/></dd>\n\t\t\t\t\t<dt>End fade</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"endFade\"/></dd>\n\t\t\t\t\t<dt>World noise</dt><dd><input type=\"texturepath\" field=\"worldNoiseTexture\"/></dd>\n\t\t\t\t\t<dt>World noise scale</dt><dd><input type=\"range\" min=\"0\" max =\"10\" field=\"worldNoiseScale\"/></dd>\n\t\t\t\t\t<dt>Emissive</dt><dd><input type=\"range\" min=\"0\" max =\"10\" field=\"emissivePower\"/></dd>\n\t\t\t\t<dl>\n\t\t\t</div>\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		prefab.TerrainPath.prototype.saveSerializedFields.call(this,obj);
		if(this.startFade != 15.0) {
			obj.startFade = this.startFade;
		}
		if(this.endFade != 30.0) {
			obj.endFade = this.endFade;
		}
		if(this.worldNoiseTexture != null) {
			obj.worldNoiseTexture = this.worldNoiseTexture;
		}
		if(this.worldNoiseScale != 1.0) {
			obj.worldNoiseScale = this.worldNoiseScale;
		}
		if(this.emissiveTexture != null) {
			obj.emissiveTexture = this.emissiveTexture;
		}
		if(this.emissivePower != 1.0) {
			obj.emissivePower = this.emissivePower;
		}
	}
	,loadSerializedFields: function(obj) {
		prefab.TerrainPath.prototype.loadSerializedFields.call(this,obj);
		this.startFade = obj.startFade == null ? 15.0 : obj.startFade;
		this.endFade = obj.endFade == null ? 30.0 : obj.endFade;
		this.worldNoiseTexture = obj.worldNoiseTexture == null ? null : obj.worldNoiseTexture;
		this.worldNoiseScale = obj.worldNoiseScale == null ? 1.0 : obj.worldNoiseScale;
		this.emissiveTexture = obj.emissiveTexture == null ? null : obj.emissiveTexture;
		this.emissivePower = obj.emissivePower == null ? 1.0 : obj.emissivePower;
	}
	,copySerializedFields: function(p) {
		prefab.TerrainPath.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.startFade = p1.startFade;
		this.endFade = p1.endFade;
		this.worldNoiseTexture = p1.worldNoiseTexture;
		this.worldNoiseScale = p1.worldNoiseScale;
		this.emissiveTexture = p1.emissiveTexture;
		this.emissivePower = p1.emissivePower;
	}
	,__class__: prefab.FootprintPath
});
prefab.FurShader = $hxClasses["prefab.FurShader"] = function() {
	this.colorOver__ = new h3d.Vector();
	this.colorUnder__ = new h3d.Vector();
	this.cameraDistScaling__ = 1;
	this.direction__ = 0;
	this.fadeFactor__ = 0;
	this.noiseScale__ = 0;
	this.gravity__ = 0;
	this.furLength__ = 0;
	this.furSteps__ = 5;
	hxsl.Shader.call(this);
};
prefab.FurShader.__name__ = "prefab.FurShader";
prefab.FurShader._SHADER = null;
prefab.FurShader.__super__ = hxsl.Shader;
prefab.FurShader.prototype = $extend(hxsl.Shader.prototype,{
	furSteps__: null
	,get_furSteps: function() {
		return this.furSteps__;
	}
	,set_furSteps: function(_v) {
		this.constModified = true;
		return this.furSteps__ = _v;
	}
	,furLength__: null
	,get_furLength: function() {
		return this.furLength__;
	}
	,set_furLength: function(_v) {
		return this.furLength__ = _v;
	}
	,gravity__: null
	,get_gravity: function() {
		return this.gravity__;
	}
	,set_gravity: function(_v) {
		return this.gravity__ = _v;
	}
	,noise__: null
	,get_noise: function() {
		return this.noise__;
	}
	,set_noise: function(_v) {
		return this.noise__ = _v;
	}
	,furParams__: null
	,get_furParams: function() {
		return this.furParams__;
	}
	,set_furParams: function(_v) {
		return this.furParams__ = _v;
	}
	,furParamsVertex__: null
	,get_furParamsVertex: function() {
		return this.furParamsVertex__;
	}
	,set_furParamsVertex: function(_v) {
		return this.furParamsVertex__ = _v;
	}
	,noiseScale__: null
	,get_noiseScale: function() {
		return this.noiseScale__;
	}
	,set_noiseScale: function(_v) {
		return this.noiseScale__ = _v;
	}
	,fadeFactor__: null
	,get_fadeFactor: function() {
		return this.fadeFactor__;
	}
	,set_fadeFactor: function(_v) {
		return this.fadeFactor__ = _v;
	}
	,direction__: null
	,get_direction: function() {
		return this.direction__;
	}
	,set_direction: function(_v) {
		return this.direction__ = _v;
	}
	,cameraDistScaling__: null
	,get_cameraDistScaling: function() {
		return this.cameraDistScaling__;
	}
	,set_cameraDistScaling: function(_v) {
		return this.cameraDistScaling__ = _v;
	}
	,colorUnder__: null
	,get_colorUnder: function() {
		return this.colorUnder__;
	}
	,set_colorUnder: function(_v) {
		return this.colorUnder__ = _v;
	}
	,colorOver__: null
	,get_colorOver: function() {
		return this.colorOver__;
	}
	,set_colorOver: function(_v) {
		return this.colorOver__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.furSteps__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("furSteps" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.furSteps__;
		case 1:
			return this.furLength__;
		case 2:
			return this.gravity__;
		case 3:
			return this.noise__;
		case 4:
			return this.furParams__;
		case 5:
			return this.furParamsVertex__;
		case 6:
			return this.noiseScale__;
		case 7:
			return this.fadeFactor__;
		case 8:
			return this.direction__;
		case 9:
			return this.cameraDistScaling__;
		case 10:
			return this.colorUnder__;
		case 11:
			return this.colorOver__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.furLength__;
		case 2:
			return this.gravity__;
		case 6:
			return this.noiseScale__;
		case 7:
			return this.fadeFactor__;
		case 8:
			return this.direction__;
		case 9:
			return this.cameraDistScaling__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.FurShader.prototype);
		s.shader = this.shader;
		s.furSteps__ = this.furSteps__;
		s.furLength__ = this.furLength__;
		s.gravity__ = this.gravity__;
		s.noise__ = this.noise__;
		s.furParams__ = this.furParams__;
		s.furParamsVertex__ = this.furParamsVertex__;
		s.noiseScale__ = this.noiseScale__;
		s.fadeFactor__ = this.fadeFactor__;
		s.direction__ = this.direction__;
		s.cameraDistScaling__ = this.cameraDistScaling__;
		s.colorUnder__ = this.colorUnder__;
		s.colorOver__ = this.colorOver__;
		return s;
	}
	,__class__: prefab.FurShader
	,__properties__: {set_colorOver:"set_colorOver",get_colorOver:"get_colorOver",set_colorUnder:"set_colorUnder",get_colorUnder:"get_colorUnder",set_cameraDistScaling:"set_cameraDistScaling",get_cameraDistScaling:"get_cameraDistScaling",set_direction:"set_direction",get_direction:"get_direction",set_fadeFactor:"set_fadeFactor",get_fadeFactor:"get_fadeFactor",set_noiseScale:"set_noiseScale",get_noiseScale:"get_noiseScale",set_furParamsVertex:"set_furParamsVertex",get_furParamsVertex:"get_furParamsVertex",set_furParams:"set_furParams",get_furParams:"get_furParams",set_noise:"set_noise",get_noise:"get_noise",set_gravity:"set_gravity",get_gravity:"get_gravity",set_furLength:"set_furLength",get_furLength:"get_furLength",set_furSteps:"set_furSteps",get_furSteps:"get_furSteps"}
});
prefab.FurStep = $hxClasses["prefab.FurStep"] = function() {
	this.step__ = 0;
	hxsl.Shader.call(this);
};
prefab.FurStep.__name__ = "prefab.FurStep";
prefab.FurStep._SHADER = null;
prefab.FurStep.__super__ = hxsl.Shader;
prefab.FurStep.prototype = $extend(hxsl.Shader.prototype,{
	step__: null
	,get_step: function() {
		return this.step__;
	}
	,set_step: function(_v) {
		return this.step__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.step__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.step__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.FurStep.prototype);
		s.shader = this.shader;
		s.step__ = this.step__;
		return s;
	}
	,__class__: prefab.FurStep
	,__properties__: {set_step:"set_step",get_step:"get_step"}
});
prefab.Fur = $hxClasses["prefab.Fur"] = function(parent) {
	hrt.prefab.Shader.call(this,parent);
};
prefab.Fur.__name__ = "prefab.Fur";
prefab.Fur.__super__ = hrt.prefab.Shader;
prefab.Fur.prototype = $extend(hrt.prefab.Shader.prototype,{
	makeShader: function(ctx) {
		return new prefab.FurShader();
	}
	,applyShader: function(obj,material,shader) {
		var _g = 0;
		var _g1 = material.getPasses();
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == "alpha" && m != material.passes) {
				material.removePass(m);
			}
		}
		var shader1 = js.Boot.__cast(shader , prefab.FurShader);
		hrt.prefab.Shader.prototype.applyShader.call(this,obj,material,shader1);
		material.passes.addShader(new prefab.FurStep());
		var _g = 0;
		var _g1 = shader1.furSteps__;
		while(_g < _g1) {
			var i = _g++;
			var p = material.allocPass("new");
			p.setPassName("alpha");
			p.setBlendMode(h2d.BlendMode.Alpha);
			var f = new prefab.FurStep();
			f.step__ = i / (shader1.furSteps__ - 1);
			p.addShader(f);
		}
	}
	,syncShaderVars: function(shader,shaderDef) {
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,shader,shaderDef);
		var shader1 = js.Boot.__cast(shader , prefab.FurShader);
		if(shader1.noise__ != null) {
			shader1.noise__.set_wrap(h3d.mat.Wrap.Repeat);
		}
		shader1.furParamsVertex__ = shader1.furParams__;
	}
	,__class__: prefab.Fur
});
prefab.GrassTerrainColor = $hxClasses["prefab.GrassTerrainColor"] = function(parent) {
	this.range = 0;
	hrt.prefab.Object3D.call(this,parent);
};
prefab.GrassTerrainColor.__name__ = "prefab.GrassTerrainColor";
prefab.GrassTerrainColor.__super__ = hrt.prefab.Object3D;
prefab.GrassTerrainColor.prototype = $extend(hrt.prefab.Object3D.prototype,{
	range: null
	,getHideProps: function() {
		return { icon : "sun-o", name : "GrassTerrainColor"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Terrain Color\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Range</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"range\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.range != 0) {
			obj.range = this.range;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.range = obj.range == null ? 0 : obj.range;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.range = p1.range;
	}
	,__class__: prefab.GrassTerrainColor
});
prefab.GrassWindShader = $hxClasses["prefab.GrassWindShader"] = function() {
	this.direction__ = new h3d.Vector();
	this.scale__ = 0;
	this.speed__ = 0;
	this.intensity__ = 0;
	hxsl.Shader.call(this);
};
prefab.GrassWindShader.__name__ = "prefab.GrassWindShader";
prefab.GrassWindShader._SHADER = null;
prefab.GrassWindShader.__super__ = hxsl.Shader;
prefab.GrassWindShader.prototype = $extend(hxsl.Shader.prototype,{
	noise__: null
	,get_noise: function() {
		return this.noise__;
	}
	,set_noise: function(_v) {
		return this.noise__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,speed__: null
	,get_speed: function() {
		return this.speed__;
	}
	,set_speed: function(_v) {
		return this.speed__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,direction__: null
	,get_direction: function() {
		return this.direction__;
	}
	,set_direction: function(_v) {
		return this.direction__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.noise__;
		case 1:
			return this.intensity__;
		case 2:
			return this.speed__;
		case 3:
			return this.scale__;
		case 4:
			return this.direction__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.intensity__;
		case 2:
			return this.speed__;
		case 3:
			return this.scale__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.GrassWindShader.prototype);
		s.shader = this.shader;
		s.noise__ = this.noise__;
		s.intensity__ = this.intensity__;
		s.speed__ = this.speed__;
		s.scale__ = this.scale__;
		s.direction__ = this.direction__;
		return s;
	}
	,__class__: prefab.GrassWindShader
	,__properties__: {set_direction:"set_direction",get_direction:"get_direction",set_scale:"set_scale",get_scale:"get_scale",set_speed:"set_speed",get_speed:"get_speed",set_intensity:"set_intensity",get_intensity:"get_intensity",set_noise:"set_noise",get_noise:"get_noise"}
});
prefab.GrassWind = $hxClasses["prefab.GrassWind"] = function(parent) {
	this.direction = 0.0;
	this.speed = 0.5;
	this.scale = 0.5;
	this.intensity = 0.8;
	this.noise = "prefabs/fx/wind/perlin2.jpg";
	hrt.prefab.Shader.call(this,parent);
};
prefab.GrassWind.__name__ = "prefab.GrassWind";
prefab.GrassWind.__super__ = hrt.prefab.Shader;
prefab.GrassWind.prototype = $extend(hrt.prefab.Shader.prototype,{
	noise: null
	,intensity: null
	,scale: null
	,speed: null
	,direction: null
	,makeShader: function(ctx) {
		return new prefab.GrassWindShader();
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.Shader.prototype.updateInstance.call(this,ctx,propName);
	}
	,syncShaderVars: function(shader,shaderDef) {
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,shader,shaderDef);
		var s = shader;
		if(this.noise != null) {
			s.noise__ = hxd.res.Loader.currentInstance.load(this.noise).toTexture();
		}
		s.intensity__ = this.intensity;
		s.scale__ = this.scale;
		s.speed__ = this.speed;
		var a = this.direction * 3.14159265358979323 / 180.0;
		var _this = s.direction__;
		var x = Math.cos(a);
		var y = Math.sin(a);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Wind\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Noise</dt><dd><input type=\"texturepath\" field=\"noise\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"2\" field=\"scale\"/></dd>\r\n\t\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"0\" max=\"2\" field=\"speed\"/></dd>\r\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"2\" field=\"intensity\"/></dd>\r\n\t\t\t\t\t<dt>Direction</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"direction\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,getHideProps: function() {
		return { icon : "cog", name : "GrassWind", allowParent : function(p) {
			if(!(p.to(hrt.prefab.Object2D) != null || p.to(hrt.prefab.Object3D) != null)) {
				return p.to(hrt.prefab.Material) != null;
			} else {
				return true;
			}
		}};
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.noise != "prefabs/fx/wind/perlin2.jpg") {
			obj.noise = this.noise;
		}
		if(this.intensity != 0.8) {
			obj.intensity = this.intensity;
		}
		if(this.scale != 0.5) {
			obj.scale = this.scale;
		}
		if(this.speed != 0.5) {
			obj.speed = this.speed;
		}
		if(this.direction != 0.0) {
			obj.direction = this.direction;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.noise = obj.noise == null ? "prefabs/fx/wind/perlin2.jpg" : obj.noise;
		this.intensity = obj.intensity == null ? 0.8 : obj.intensity;
		this.scale = obj.scale == null ? 0.5 : obj.scale;
		this.speed = obj.speed == null ? 0.5 : obj.speed;
		this.direction = obj.direction == null ? 0.0 : obj.direction;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.noise = p1.noise;
		this.intensity = p1.intensity;
		this.scale = p1.scale;
		this.speed = p1.speed;
		this.direction = p1.direction;
	}
	,__class__: prefab.GrassWind
});
prefab.HairDitheringShader = $hxClasses["prefab.HairDitheringShader"] = function() {
	this.threshold__ = 0;
	hxsl.Shader.call(this);
};
prefab.HairDitheringShader.__name__ = "prefab.HairDitheringShader";
prefab.HairDitheringShader._SHADER = null;
prefab.HairDitheringShader.__super__ = hxsl.Shader;
prefab.HairDitheringShader.prototype = $extend(hxsl.Shader.prototype,{
	threshold__: null
	,get_threshold: function() {
		return this.threshold__;
	}
	,set_threshold: function(_v) {
		return this.threshold__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.threshold__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.threshold__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.HairDitheringShader.prototype);
		s.shader = this.shader;
		s.threshold__ = this.threshold__;
		return s;
	}
	,__class__: prefab.HairDitheringShader
	,__properties__: {set_threshold:"set_threshold",get_threshold:"get_threshold"}
});
prefab.HairDithering = $hxClasses["prefab.HairDithering"] = function(parent) {
	this.threshold = 0.0;
	hrt.prefab.Shader.call(this,parent);
};
prefab.HairDithering.__name__ = "prefab.HairDithering";
prefab.HairDithering.__super__ = hrt.prefab.Shader;
prefab.HairDithering.prototype = $extend(hrt.prefab.Shader.prototype,{
	threshold: null
	,makeShader: function(ctx) {
		return new prefab.HairDitheringShader();
	}
	,updateInstance: function(ctx,propName) {
		var shaderDef = this.getShaderDefinition(ctx);
		if(ctx.custom == null || shaderDef == null) {
			return;
		}
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,ctx.custom,shaderDef);
		var shader = js.Boot.__cast(ctx.custom , prefab.HairDitheringShader);
		shader.threshold__ = this.threshold;
	}
	,applyShader: function(obj,material,shader) {
		material.passes.addShader(shader);
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Dithering\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Threshold</dt><dd><input type=\"range\" min=\"0\" max=\"1.0\" field=\"threshold\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.threshold != 0.0) {
			obj.threshold = this.threshold;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.threshold = obj.threshold == null ? 0.0 : obj.threshold;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.threshold = p1.threshold;
	}
	,__class__: prefab.HairDithering
});
prefab.LakeShader = $hxClasses["prefab.LakeShader"] = function() {
	this.secondWaveSpeed__ = 0;
	this.secondWaveRotate__ = new h3d.Vector();
	this.secondWaveScale__ = 0;
	this.waveSpeed__ = 0;
	this.waveScale__ = 0;
	this.waveIntensity__ = 0;
	this.colorNoiseStrength__ = 0;
	this.colorNoiseScale__ = 0;
	this.maxDepth__ = 0;
	this.opacityPower__ = 0;
	this.roughness__ = 0;
	this.deepWaterColor__ = new h3d.Vector();
	this.middleWaterColor__ = new h3d.Vector();
	this.nearWaterColor__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
prefab.LakeShader.__name__ = "prefab.LakeShader";
prefab.LakeShader._SHADER = null;
prefab.LakeShader.__super__ = hxsl.Shader;
prefab.LakeShader.prototype = $extend(hxsl.Shader.prototype,{
	nearWaterColor__: null
	,get_nearWaterColor: function() {
		return this.nearWaterColor__;
	}
	,set_nearWaterColor: function(_v) {
		return this.nearWaterColor__ = _v;
	}
	,middleWaterColor__: null
	,get_middleWaterColor: function() {
		return this.middleWaterColor__;
	}
	,set_middleWaterColor: function(_v) {
		return this.middleWaterColor__ = _v;
	}
	,deepWaterColor__: null
	,get_deepWaterColor: function() {
		return this.deepWaterColor__;
	}
	,set_deepWaterColor: function(_v) {
		return this.deepWaterColor__ = _v;
	}
	,roughness__: null
	,get_roughness: function() {
		return this.roughness__;
	}
	,set_roughness: function(_v) {
		return this.roughness__ = _v;
	}
	,opacityPower__: null
	,get_opacityPower: function() {
		return this.opacityPower__;
	}
	,set_opacityPower: function(_v) {
		return this.opacityPower__ = _v;
	}
	,maxDepth__: null
	,get_maxDepth: function() {
		return this.maxDepth__;
	}
	,set_maxDepth: function(_v) {
		return this.maxDepth__ = _v;
	}
	,colorNoiseTexture__: null
	,get_colorNoiseTexture: function() {
		return this.colorNoiseTexture__;
	}
	,set_colorNoiseTexture: function(_v) {
		return this.colorNoiseTexture__ = _v;
	}
	,colorNoiseScale__: null
	,get_colorNoiseScale: function() {
		return this.colorNoiseScale__;
	}
	,set_colorNoiseScale: function(_v) {
		return this.colorNoiseScale__ = _v;
	}
	,colorNoiseStrength__: null
	,get_colorNoiseStrength: function() {
		return this.colorNoiseStrength__;
	}
	,set_colorNoiseStrength: function(_v) {
		return this.colorNoiseStrength__ = _v;
	}
	,normalMap__: null
	,get_normalMap: function() {
		return this.normalMap__;
	}
	,set_normalMap: function(_v) {
		return this.normalMap__ = _v;
	}
	,waveIntensity__: null
	,get_waveIntensity: function() {
		return this.waveIntensity__;
	}
	,set_waveIntensity: function(_v) {
		return this.waveIntensity__ = _v;
	}
	,waveScale__: null
	,get_waveScale: function() {
		return this.waveScale__;
	}
	,set_waveScale: function(_v) {
		return this.waveScale__ = _v;
	}
	,waveSpeed__: null
	,get_waveSpeed: function() {
		return this.waveSpeed__;
	}
	,set_waveSpeed: function(_v) {
		return this.waveSpeed__ = _v;
	}
	,secondWaveScale__: null
	,get_secondWaveScale: function() {
		return this.secondWaveScale__;
	}
	,set_secondWaveScale: function(_v) {
		return this.secondWaveScale__ = _v;
	}
	,secondWaveRotate__: null
	,get_secondWaveRotate: function() {
		return this.secondWaveRotate__;
	}
	,set_secondWaveRotate: function(_v) {
		return this.secondWaveRotate__ = _v;
	}
	,secondWaveSpeed__: null
	,get_secondWaveSpeed: function() {
		return this.secondWaveSpeed__;
	}
	,set_secondWaveSpeed: function(_v) {
		return this.secondWaveSpeed__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.nearWaterColor__;
		case 1:
			return this.middleWaterColor__;
		case 2:
			return this.deepWaterColor__;
		case 3:
			return this.roughness__;
		case 4:
			return this.opacityPower__;
		case 5:
			return this.maxDepth__;
		case 6:
			return this.colorNoiseTexture__;
		case 7:
			return this.colorNoiseScale__;
		case 8:
			return this.colorNoiseStrength__;
		case 9:
			return this.normalMap__;
		case 10:
			return this.waveIntensity__;
		case 11:
			return this.waveScale__;
		case 12:
			return this.waveSpeed__;
		case 13:
			return this.secondWaveScale__;
		case 14:
			return this.secondWaveRotate__;
		case 15:
			return this.secondWaveSpeed__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 3:
			return this.roughness__;
		case 4:
			return this.opacityPower__;
		case 5:
			return this.maxDepth__;
		case 7:
			return this.colorNoiseScale__;
		case 8:
			return this.colorNoiseStrength__;
		case 10:
			return this.waveIntensity__;
		case 11:
			return this.waveScale__;
		case 12:
			return this.waveSpeed__;
		case 13:
			return this.secondWaveScale__;
		case 15:
			return this.secondWaveSpeed__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.LakeShader.prototype);
		s.shader = this.shader;
		s.nearWaterColor__ = this.nearWaterColor__;
		s.middleWaterColor__ = this.middleWaterColor__;
		s.deepWaterColor__ = this.deepWaterColor__;
		s.roughness__ = this.roughness__;
		s.opacityPower__ = this.opacityPower__;
		s.maxDepth__ = this.maxDepth__;
		s.colorNoiseTexture__ = this.colorNoiseTexture__;
		s.colorNoiseScale__ = this.colorNoiseScale__;
		s.colorNoiseStrength__ = this.colorNoiseStrength__;
		s.normalMap__ = this.normalMap__;
		s.waveIntensity__ = this.waveIntensity__;
		s.waveScale__ = this.waveScale__;
		s.waveSpeed__ = this.waveSpeed__;
		s.secondWaveScale__ = this.secondWaveScale__;
		s.secondWaveRotate__ = this.secondWaveRotate__;
		s.secondWaveSpeed__ = this.secondWaveSpeed__;
		return s;
	}
	,__class__: prefab.LakeShader
	,__properties__: {set_secondWaveSpeed:"set_secondWaveSpeed",get_secondWaveSpeed:"get_secondWaveSpeed",set_secondWaveRotate:"set_secondWaveRotate",get_secondWaveRotate:"get_secondWaveRotate",set_secondWaveScale:"set_secondWaveScale",get_secondWaveScale:"get_secondWaveScale",set_waveSpeed:"set_waveSpeed",get_waveSpeed:"get_waveSpeed",set_waveScale:"set_waveScale",get_waveScale:"get_waveScale",set_waveIntensity:"set_waveIntensity",get_waveIntensity:"get_waveIntensity",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",set_colorNoiseStrength:"set_colorNoiseStrength",get_colorNoiseStrength:"get_colorNoiseStrength",set_colorNoiseScale:"set_colorNoiseScale",get_colorNoiseScale:"get_colorNoiseScale",set_colorNoiseTexture:"set_colorNoiseTexture",get_colorNoiseTexture:"get_colorNoiseTexture",set_maxDepth:"set_maxDepth",get_maxDepth:"get_maxDepth",set_opacityPower:"set_opacityPower",get_opacityPower:"get_opacityPower",set_roughness:"set_roughness",get_roughness:"get_roughness",set_deepWaterColor:"set_deepWaterColor",get_deepWaterColor:"get_deepWaterColor",set_middleWaterColor:"set_middleWaterColor",get_middleWaterColor:"get_middleWaterColor",set_nearWaterColor:"set_nearWaterColor",get_nearWaterColor:"get_nearWaterColor"}
});
prefab.Lake = $hxClasses["prefab.Lake"] = function(parent) {
	this.collide = true;
	this.reflections = true;
	this.secondWaveSpeed = 0;
	this.secondWaveRotate = 0;
	this.secondWaveScale = 0;
	this.waveSpeed = 1.0;
	this.waveScale = 1.0;
	this.waveIntensity = 1.0;
	this.normalMap = null;
	this.colorNoiseStrength = 1.0;
	this.colorNoiseScale = 1.0;
	this.colorNoiseTexture = null;
	this.maxDepth = 5.0;
	this.opacityPower = 5.0;
	this.roughness = 0.0;
	this.deepWaterColor = 16777215;
	this.middleWaterColor = 16777215;
	this.nearWaterColor = 16777215;
	hrt.prefab.l3d.Polygon.call(this,parent);
};
prefab.Lake.__name__ = "prefab.Lake";
prefab.Lake.__super__ = hrt.prefab.l3d.Polygon;
prefab.Lake.prototype = $extend(hrt.prefab.l3d.Polygon.prototype,{
	lakeShader: null
	,nearWaterColor: null
	,middleWaterColor: null
	,deepWaterColor: null
	,roughness: null
	,opacityPower: null
	,maxDepth: null
	,colorNoiseTexture: null
	,colorNoiseScale: null
	,colorNoiseStrength: null
	,normalMap: null
	,waveIntensity: null
	,waveScale: null
	,waveSpeed: null
	,secondWaveScale: null
	,secondWaveRotate: null
	,secondWaveSpeed: null
	,reflections: null
	,collide: null
	,makeInstance: function(ctx) {
		this.hasDebugColor = false;
		ctx = ctx.clone(this);
		var lo = new h3d.scene.Mesh(null,null,ctx.local3d);
		lo.material.passes.setPassName("decal");
		lo.material.passes.setBlendMode(h2d.BlendMode.Alpha);
		lo.material.passes.set_depthWrite(false);
		lo.material.set_castShadows(false);
		lo.material.set_receiveShadows(true);
		var depthPass = lo.material.allocPass("depthWrite",false);
		depthPass.set_depthWrite(true);
		depthPass.set_depthTest(h3d.mat.Compare.Less);
		var _this = lo.material.passes;
		var _g_l = _this.shaders;
		var _g_last = _this.parentShaders;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			depthPass.addShader(s1);
		}
		this.lakeShader = new prefab.LakeShader();
		lo.material.passes.addShader(this.lakeShader);
		ctx.local3d = lo;
		ctx.local3d.name = this.name;
		this.updateInstance(ctx);
		return ctx;
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.l3d.Polygon.prototype.updateInstance.call(this,ctx,propName);
		var lo = ctx.local3d;
		if(this.reflections) {
			var ssr = lo.material.allocPass("ssr",true);
			ssr.setBlendMode(h2d.BlendMode.Alpha);
			ssr.set_depthWrite(false);
			ssr.set_depthTest(h3d.mat.Compare.LessEqual);
		}
		var c = this.nearWaterColor;
		var s = 0.00392156862745098;
		this.lakeShader.nearWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		var c = this.middleWaterColor;
		var s = 0.00392156862745098;
		this.lakeShader.middleWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		var c = this.deepWaterColor;
		var s = 0.00392156862745098;
		this.lakeShader.deepWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		this.lakeShader.roughness__ = this.roughness;
		this.lakeShader.opacityPower__ = this.opacityPower;
		this.lakeShader.maxDepth__ = this.maxDepth;
		this.lakeShader.colorNoiseTexture__ = this.colorNoiseTexture != null ? ctx.loadTexture(this.colorNoiseTexture) : h3d.mat.Texture.fromColor(0);
		this.lakeShader.colorNoiseTexture__.set_wrap(h3d.mat.Wrap.Repeat);
		this.lakeShader.colorNoiseScale__ = this.colorNoiseScale;
		this.lakeShader.colorNoiseStrength__ = this.colorNoiseStrength;
		this.lakeShader.normalMap__ = this.normalMap != null ? ctx.loadTexture(this.normalMap) : h3d.mat.Texture.fromColor(255);
		this.lakeShader.normalMap__.set_wrap(h3d.mat.Wrap.Repeat);
		this.lakeShader.waveIntensity__ = this.waveIntensity;
		this.lakeShader.waveScale__ = this.waveScale;
		this.lakeShader.waveSpeed__ = this.waveSpeed;
		this.lakeShader.secondWaveScale__ = this.secondWaveScale;
		var _this = this.lakeShader.secondWaveRotate__;
		var x = Math.cos(this.secondWaveRotate * Math.PI / 180);
		var y = Math.sin(this.secondWaveRotate * Math.PI / 180);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		this.lakeShader.secondWaveSpeed__ = this.secondWaveSpeed;
	}
	,getHideProps: function() {
		return { icon : "square", name : "Lake"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.l3d.Polygon.prototype.edit.call(this,ctx);
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Color\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Near Water Color </dt><dd><input type=\"color\" field=\"nearWaterColor\"/></dd>\r\n\t\t\t\t\t<dt>Middle Water Color</dt><dd><input type=\"color\" field=\"middleWaterColor\"/></dd>\r\n\t\t\t\t\t<dt>Deep Water Color</dt><dd><input type=\"color\" field=\"deepWaterColor\"/></dd>\r\n\t\t\t\t\t<dt>Roughness</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"roughness\"/></dd>\r\n\t\t\t\t\t<dt>Opacity Power</dt><dd><input type=\"range\" min=\"0\" max=\"5\" field=\"opacityPower\"/></dd>\r\n\t\t\t\t\t<dt>Lake max depth</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"maxDepth\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Color Noise\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"colorNoiseTexture\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"colorNoiseScale\"/></dd>\r\n\t\t\t\t\t<dt>Strength</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"colorNoiseStrength\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Wave\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>NormalMap</dt><dd><input type=\"texturepath\" field=\"normalMap\"/></dd>\r\n\t\t\t\t\t<dt>Wave Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"waveIntensity\"/></dd>\r\n\t\t\t\t\t<dt>Wave Scale</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"waveScale\"/></dd>\r\n\t\t\t\t\t<dt>Wave Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"waveSpeed\"/></dd>\r\n\t\t\t\t\t<dt>2d Wave Scale</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"secondWaveScale\"/></dd>\r\n\t\t\t\t\t<dt>2d Wave Rotate</dt><dd><input type=\"range\" min=\"-180\" max=\"180\" field=\"secondWaveRotate\"/></dd>\r\n\t\t\t\t\t<dt>2d Wave Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"secondWaveSpeed\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Reflections\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Reflections</dt><dd><input type=\"checkbox\" field=\"reflections\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Collisions\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Collide WorldMap</dt><dd><input type=\"checkbox\" field=\"collide\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.l3d.Polygon.prototype.saveSerializedFields.call(this,obj);
		if(this.nearWaterColor != 16777215) {
			obj.nearWaterColor = this.nearWaterColor;
		}
		if(this.middleWaterColor != 16777215) {
			obj.middleWaterColor = this.middleWaterColor;
		}
		if(this.deepWaterColor != 16777215) {
			obj.deepWaterColor = this.deepWaterColor;
		}
		if(this.roughness != 0.0) {
			obj.roughness = this.roughness;
		}
		if(this.opacityPower != 5.0) {
			obj.opacityPower = this.opacityPower;
		}
		if(this.maxDepth != 5.0) {
			obj.maxDepth = this.maxDepth;
		}
		if(this.colorNoiseTexture != null) {
			obj.colorNoiseTexture = this.colorNoiseTexture;
		}
		if(this.colorNoiseScale != 1.0) {
			obj.colorNoiseScale = this.colorNoiseScale;
		}
		if(this.colorNoiseStrength != 1.0) {
			obj.colorNoiseStrength = this.colorNoiseStrength;
		}
		if(this.normalMap != null) {
			obj.normalMap = this.normalMap;
		}
		if(this.waveIntensity != 1.0) {
			obj.waveIntensity = this.waveIntensity;
		}
		if(this.waveScale != 1.0) {
			obj.waveScale = this.waveScale;
		}
		if(this.waveSpeed != 1.0) {
			obj.waveSpeed = this.waveSpeed;
		}
		if(this.secondWaveScale != 0) {
			obj.secondWaveScale = this.secondWaveScale;
		}
		if(this.secondWaveRotate != 0) {
			obj.secondWaveRotate = this.secondWaveRotate;
		}
		if(this.secondWaveSpeed != 0) {
			obj.secondWaveSpeed = this.secondWaveSpeed;
		}
		if(this.reflections != true) {
			obj.reflections = this.reflections;
		}
		if(this.collide != true) {
			obj.collide = this.collide;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.l3d.Polygon.prototype.loadSerializedFields.call(this,obj);
		this.nearWaterColor = obj.nearWaterColor == null ? 16777215 : obj.nearWaterColor;
		this.middleWaterColor = obj.middleWaterColor == null ? 16777215 : obj.middleWaterColor;
		this.deepWaterColor = obj.deepWaterColor == null ? 16777215 : obj.deepWaterColor;
		this.roughness = obj.roughness == null ? 0.0 : obj.roughness;
		this.opacityPower = obj.opacityPower == null ? 5.0 : obj.opacityPower;
		this.maxDepth = obj.maxDepth == null ? 5.0 : obj.maxDepth;
		this.colorNoiseTexture = obj.colorNoiseTexture == null ? null : obj.colorNoiseTexture;
		this.colorNoiseScale = obj.colorNoiseScale == null ? 1.0 : obj.colorNoiseScale;
		this.colorNoiseStrength = obj.colorNoiseStrength == null ? 1.0 : obj.colorNoiseStrength;
		this.normalMap = obj.normalMap == null ? null : obj.normalMap;
		this.waveIntensity = obj.waveIntensity == null ? 1.0 : obj.waveIntensity;
		this.waveScale = obj.waveScale == null ? 1.0 : obj.waveScale;
		this.waveSpeed = obj.waveSpeed == null ? 1.0 : obj.waveSpeed;
		this.secondWaveScale = obj.secondWaveScale == null ? 0 : obj.secondWaveScale;
		this.secondWaveRotate = obj.secondWaveRotate == null ? 0 : obj.secondWaveRotate;
		this.secondWaveSpeed = obj.secondWaveSpeed == null ? 0 : obj.secondWaveSpeed;
		this.reflections = obj.reflections == null ? true : obj.reflections;
		this.collide = obj.collide == null ? true : obj.collide;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.l3d.Polygon.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.nearWaterColor = p1.nearWaterColor;
		this.middleWaterColor = p1.middleWaterColor;
		this.deepWaterColor = p1.deepWaterColor;
		this.roughness = p1.roughness;
		this.opacityPower = p1.opacityPower;
		this.maxDepth = p1.maxDepth;
		this.colorNoiseTexture = p1.colorNoiseTexture;
		this.colorNoiseScale = p1.colorNoiseScale;
		this.colorNoiseStrength = p1.colorNoiseStrength;
		this.normalMap = p1.normalMap;
		this.waveIntensity = p1.waveIntensity;
		this.waveScale = p1.waveScale;
		this.waveSpeed = p1.waveSpeed;
		this.secondWaveScale = p1.secondWaveScale;
		this.secondWaveRotate = p1.secondWaveRotate;
		this.secondWaveSpeed = p1.secondWaveSpeed;
		this.reflections = p1.reflections;
		this.collide = p1.collide;
	}
	,__class__: prefab.Lake
});
prefab.Light = $hxClasses["prefab.Light"] = function(parent) {
	hrt.prefab.Light.call(this,parent);
};
prefab.Light.__name__ = "prefab.Light";
prefab.Light.__super__ = hrt.prefab.Light;
prefab.Light.prototype = $extend(hrt.prefab.Light.prototype,{
	makeInstance: function(ctx) {
		var ctx1 = hrt.prefab.Light.prototype.makeInstance.call(this,ctx);
		return ctx1;
	}
	,__class__: prefab.Light
});
prefab.MeteoParticle = $hxClasses["prefab.MeteoParticle"] = function() {
	this.minColorGradient__ = 0;
	this.distanceColorGradient__ = 0;
	this.clampedDistorsion__ = 0;
	this.depthOffset__ = 0;
	this.emitterDimension__ = 0;
	this.emitterPos__ = new h3d.Vector();
	this.cameraEffect__ = 0;
	this.timeDistorsion__ = 0;
	this.viewProj__ = new h3d.Matrix();
	this.prevViewProj__ = new h3d.Matrix();
	this.frameDivision__ = new h3d.Vector();
	this.frameSize__ = new h3d.Vector();
	this.totalFrames__ = 0;
	this.animationFixedFrame__ = 0;
	this.animationRepeat__ = 0;
	this.loopCounter__ = 0;
	this.maxTime__ = 0;
	this.time__ = 0;
	this.gravity__ = 0;
	this.speedIncr__ = 0;
	this.fadePower__ = 0;
	this.fadeOut__ = 0;
	this.fadeIn__ = 0;
	hxsl.Shader.call(this);
};
prefab.MeteoParticle.__name__ = "prefab.MeteoParticle";
prefab.MeteoParticle._SHADER = null;
prefab.MeteoParticle.__super__ = hxsl.Shader;
prefab.MeteoParticle.prototype = $extend(hxsl.Shader.prototype,{
	fadeIn__: null
	,get_fadeIn: function() {
		return this.fadeIn__;
	}
	,set_fadeIn: function(_v) {
		return this.fadeIn__ = _v;
	}
	,fadeOut__: null
	,get_fadeOut: function() {
		return this.fadeOut__;
	}
	,set_fadeOut: function(_v) {
		return this.fadeOut__ = _v;
	}
	,fadePower__: null
	,get_fadePower: function() {
		return this.fadePower__;
	}
	,set_fadePower: function(_v) {
		return this.fadePower__ = _v;
	}
	,speedIncr__: null
	,get_speedIncr: function() {
		return this.speedIncr__;
	}
	,set_speedIncr: function(_v) {
		return this.speedIncr__ = _v;
	}
	,gravity__: null
	,get_gravity: function() {
		return this.gravity__;
	}
	,set_gravity: function(_v) {
		return this.gravity__ = _v;
	}
	,color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,texture__: null
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,time__: null
	,get_time: function() {
		return this.time__;
	}
	,set_time: function(_v) {
		return this.time__ = _v;
	}
	,maxTime__: null
	,get_maxTime: function() {
		return this.maxTime__;
	}
	,set_maxTime: function(_v) {
		return this.maxTime__ = _v;
	}
	,loopCounter__: null
	,get_loopCounter: function() {
		return this.loopCounter__;
	}
	,set_loopCounter: function(_v) {
		return this.loopCounter__ = _v;
	}
	,animationRepeat__: null
	,get_animationRepeat: function() {
		return this.animationRepeat__;
	}
	,set_animationRepeat: function(_v) {
		return this.animationRepeat__ = _v;
	}
	,animationFixedFrame__: null
	,get_animationFixedFrame: function() {
		return this.animationFixedFrame__;
	}
	,set_animationFixedFrame: function(_v) {
		return this.animationFixedFrame__ = _v;
	}
	,totalFrames__: null
	,get_totalFrames: function() {
		return this.totalFrames__;
	}
	,set_totalFrames: function(_v) {
		return this.totalFrames__ = _v;
	}
	,frameSize__: null
	,get_frameSize: function() {
		return this.frameSize__;
	}
	,set_frameSize: function(_v) {
		return this.frameSize__ = _v;
	}
	,frameDivision__: null
	,get_frameDivision: function() {
		return this.frameDivision__;
	}
	,set_frameDivision: function(_v) {
		return this.frameDivision__ = _v;
	}
	,prevViewProj__: null
	,get_prevViewProj: function() {
		return this.prevViewProj__;
	}
	,set_prevViewProj: function(_v) {
		return this.prevViewProj__ = _v;
	}
	,viewProj__: null
	,get_viewProj: function() {
		return this.viewProj__;
	}
	,set_viewProj: function(_v) {
		return this.viewProj__ = _v;
	}
	,timeDistorsion__: null
	,get_timeDistorsion: function() {
		return this.timeDistorsion__;
	}
	,set_timeDistorsion: function(_v) {
		return this.timeDistorsion__ = _v;
	}
	,cameraEffect__: null
	,get_cameraEffect: function() {
		return this.cameraEffect__;
	}
	,set_cameraEffect: function(_v) {
		return this.cameraEffect__ = _v;
	}
	,emitterPos__: null
	,get_emitterPos: function() {
		return this.emitterPos__;
	}
	,set_emitterPos: function(_v) {
		return this.emitterPos__ = _v;
	}
	,emitterDimension__: null
	,get_emitterDimension: function() {
		return this.emitterDimension__;
	}
	,set_emitterDimension: function(_v) {
		return this.emitterDimension__ = _v;
	}
	,depthOffset__: null
	,get_depthOffset: function() {
		return this.depthOffset__;
	}
	,set_depthOffset: function(_v) {
		return this.depthOffset__ = _v;
	}
	,clampedDistorsion__: null
	,get_clampedDistorsion: function() {
		return this.clampedDistorsion__;
	}
	,set_clampedDistorsion: function(_v) {
		return this.clampedDistorsion__ = _v;
	}
	,distanceColorGradient__: null
	,get_distanceColorGradient: function() {
		return this.distanceColorGradient__;
	}
	,set_distanceColorGradient: function(_v) {
		return this.distanceColorGradient__ = _v;
	}
	,minColorGradient__: null
	,get_minColorGradient: function() {
		return this.minColorGradient__;
	}
	,set_minColorGradient: function(_v) {
		return this.minColorGradient__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.fadeIn__;
		case 1:
			return this.fadeOut__;
		case 2:
			return this.fadePower__;
		case 3:
			return this.speedIncr__;
		case 4:
			return this.gravity__;
		case 5:
			return this.color__;
		case 6:
			return this.texture__;
		case 7:
			return this.time__;
		case 8:
			return this.maxTime__;
		case 9:
			return this.loopCounter__;
		case 10:
			return this.animationRepeat__;
		case 11:
			return this.animationFixedFrame__;
		case 12:
			return this.totalFrames__;
		case 13:
			return this.frameSize__;
		case 14:
			return this.frameDivision__;
		case 15:
			return this.prevViewProj__;
		case 16:
			return this.viewProj__;
		case 17:
			return this.timeDistorsion__;
		case 18:
			return this.cameraEffect__;
		case 19:
			return this.emitterPos__;
		case 20:
			return this.emitterDimension__;
		case 21:
			return this.depthOffset__;
		case 22:
			return this.clampedDistorsion__;
		case 23:
			return this.distanceColorGradient__;
		case 24:
			return this.minColorGradient__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.fadeIn__;
		case 1:
			return this.fadeOut__;
		case 2:
			return this.fadePower__;
		case 3:
			return this.speedIncr__;
		case 4:
			return this.gravity__;
		case 7:
			return this.time__;
		case 8:
			return this.maxTime__;
		case 9:
			return this.loopCounter__;
		case 10:
			return this.animationRepeat__;
		case 11:
			return this.animationFixedFrame__;
		case 12:
			return this.totalFrames__;
		case 17:
			return this.timeDistorsion__;
		case 18:
			return this.cameraEffect__;
		case 20:
			return this.emitterDimension__;
		case 21:
			return this.depthOffset__;
		case 22:
			return this.clampedDistorsion__;
		case 23:
			return this.distanceColorGradient__;
		case 24:
			return this.minColorGradient__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.MeteoParticle.prototype);
		s.shader = this.shader;
		s.fadeIn__ = this.fadeIn__;
		s.fadeOut__ = this.fadeOut__;
		s.fadePower__ = this.fadePower__;
		s.speedIncr__ = this.speedIncr__;
		s.gravity__ = this.gravity__;
		s.color__ = this.color__;
		s.texture__ = this.texture__;
		s.time__ = this.time__;
		s.maxTime__ = this.maxTime__;
		s.loopCounter__ = this.loopCounter__;
		s.animationRepeat__ = this.animationRepeat__;
		s.animationFixedFrame__ = this.animationFixedFrame__;
		s.totalFrames__ = this.totalFrames__;
		s.frameSize__ = this.frameSize__;
		s.frameDivision__ = this.frameDivision__;
		s.prevViewProj__ = this.prevViewProj__;
		s.viewProj__ = this.viewProj__;
		s.timeDistorsion__ = this.timeDistorsion__;
		s.cameraEffect__ = this.cameraEffect__;
		s.emitterPos__ = this.emitterPos__;
		s.emitterDimension__ = this.emitterDimension__;
		s.depthOffset__ = this.depthOffset__;
		s.clampedDistorsion__ = this.clampedDistorsion__;
		s.distanceColorGradient__ = this.distanceColorGradient__;
		s.minColorGradient__ = this.minColorGradient__;
		return s;
	}
	,__class__: prefab.MeteoParticle
	,__properties__: {set_minColorGradient:"set_minColorGradient",get_minColorGradient:"get_minColorGradient",set_distanceColorGradient:"set_distanceColorGradient",get_distanceColorGradient:"get_distanceColorGradient",set_clampedDistorsion:"set_clampedDistorsion",get_clampedDistorsion:"get_clampedDistorsion",set_depthOffset:"set_depthOffset",get_depthOffset:"get_depthOffset",set_emitterDimension:"set_emitterDimension",get_emitterDimension:"get_emitterDimension",set_emitterPos:"set_emitterPos",get_emitterPos:"get_emitterPos",set_cameraEffect:"set_cameraEffect",get_cameraEffect:"get_cameraEffect",set_timeDistorsion:"set_timeDistorsion",get_timeDistorsion:"get_timeDistorsion",set_viewProj:"set_viewProj",get_viewProj:"get_viewProj",set_prevViewProj:"set_prevViewProj",get_prevViewProj:"get_prevViewProj",set_frameDivision:"set_frameDivision",get_frameDivision:"get_frameDivision",set_frameSize:"set_frameSize",get_frameSize:"get_frameSize",set_totalFrames:"set_totalFrames",get_totalFrames:"get_totalFrames",set_animationFixedFrame:"set_animationFixedFrame",get_animationFixedFrame:"get_animationFixedFrame",set_animationRepeat:"set_animationRepeat",get_animationRepeat:"get_animationRepeat",set_loopCounter:"set_loopCounter",get_loopCounter:"get_loopCounter",set_maxTime:"set_maxTime",get_maxTime:"get_maxTime",set_time:"set_time",get_time:"get_time",set_texture:"set_texture",get_texture:"get_texture",set_color:"set_color",get_color:"get_color",set_gravity:"set_gravity",get_gravity:"get_gravity",set_speedIncr:"set_speedIncr",get_speedIncr:"get_speedIncr",set_fadePower:"set_fadePower",get_fadePower:"get_fadePower",set_fadeOut:"set_fadeOut",get_fadeOut:"get_fadeOut",set_fadeIn:"set_fadeIn",get_fadeIn:"get_fadeIn"}
});
prefab.MeteoPartGroup = $hxClasses["prefab.MeteoPartGroup"] = function(parent) {
	this.camInertia = 0;
	this.attachToCam = false;
	this.isRelative = false;
	this.colorGradient = null;
	this.texture = null;
	this.animationRepeat = 1;
	this.frameDivisionY = 1;
	this.frameDivisionX = 1;
	this.frameCount = 0;
	this.fadePower = 1;
	this.fadeOut = 0.8;
	this.fadeIn = 0.2;
	this.minColorGradient = 0.5;
	this.distanceColorGradient = 1000;
	this.cameraEffect = 0;
	this.timeDistorsion = 0;
	this.gravity = 0;
	this.speedIncr = 0;
	this.speedDirRand = 0;
	this.speedRand = 0;
	this.speedZ = -1;
	this.speedXY = 0;
	this.speed = 1;
	this.lifeRand = 0;
	this.life = 1;
	this.sizeRand = 0;
	this.sizeIncr = 0;
	this.size = 1;
	this.transform3D = false;
	this.clipBounds = false;
	this.emitOnBorder = false;
	this.emitDelay = 0;
	this.emitSync = 0;
	this.emitAngle = 1.5;
	this.depthOffset = 0.;
	this.boxSize = 35.;
	this.emitDist = 1.;
	this.emitStartDist = 0.;
	this.emitLoop = true;
	this.nparts = 100;
	this.sortMode = h3d.parts.GpuSortMode.None;
	this.material = { };
	this.enable = true;
	this.amount = 1.0;
	this.maxTime = -1.;
	this.currentParts = 0;
	this.partIndex = 0;
	this.pshader = new prefab.MeteoParticle();
	this.needRebuild = true;
	this.parent = parent;
};
prefab.MeteoPartGroup.__name__ = "prefab.MeteoPartGroup";
prefab.MeteoPartGroup.getFields = function(inst) {
	if(prefab.MeteoPartGroup.FIELDS != null) {
		return prefab.MeteoPartGroup.FIELDS;
	}
	prefab.MeteoPartGroup.FIELDS = Type.getInstanceFields(prefab.MeteoPartGroup);
	var f = "parent";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "sortMode";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "needRebuild";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "pshader";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "partIndex";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "particles";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "texture";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "colorGradient";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "amount";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "currentParts";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "ebounds";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var f = "maxTime";
	HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
	var _g = 0;
	var _g1 = prefab.MeteoPartGroup.FIELDS.slice();
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		if(Reflect.isFunction(Reflect.field(inst,f))) {
			HxOverrides.remove(prefab.MeteoPartGroup.FIELDS,f);
		}
	}
	prefab.MeteoPartGroup.FIELDS.sort(Reflect.compare);
	return prefab.MeteoPartGroup.FIELDS;
};
prefab.MeteoPartGroup.prototype = {
	parent: null
	,needRebuild: null
	,pshader: null
	,partIndex: null
	,currentParts: null
	,particles: null
	,ebounds: null
	,maxTime: null
	,amount: null
	,name: null
	,enable: null
	,material: null
	,sortMode: null
	,nparts: null
	,emitLoop: null
	,emitStartDist: null
	,emitDist: null
	,boxSize: null
	,depthOffset: null
	,emitAngle: null
	,emitSync: null
	,emitDelay: null
	,emitOnBorder: null
	,clipBounds: null
	,transform3D: null
	,size: null
	,sizeIncr: null
	,sizeRand: null
	,life: null
	,lifeRand: null
	,speed: null
	,speedXY: null
	,speedZ: null
	,speedRand: null
	,speedDirRand: null
	,speedIncr: null
	,gravity: null
	,timeDistorsion: null
	,cameraEffect: null
	,distanceColorGradient: null
	,minColorGradient: null
	,fadeIn: null
	,fadeOut: null
	,fadePower: null
	,frameCount: null
	,frameDivisionX: null
	,frameDivisionY: null
	,animationRepeat: null
	,texture: null
	,colorGradient: null
	,isRelative: null
	,attachToCam: null
	,camInertia: null
	,set_sortMode: function(v) {
		this.needRebuild = true;
		return this.sortMode = v;
	}
	,set_size: function(v) {
		this.needRebuild = true;
		return this.size = v;
	}
	,set_sizeRand: function(v) {
		this.needRebuild = true;
		return this.sizeRand = v;
	}
	,set_sizeIncr: function(v) {
		this.needRebuild = true;
		return this.sizeIncr = v;
	}
	,set_speed: function(v) {
		this.needRebuild = true;
		return this.speed = v;
	}
	,set_speedXY: function(v) {
		this.needRebuild = true;
		return this.speedXY = v;
	}
	,set_speedZ: function(v) {
		this.needRebuild = true;
		return this.speedZ = v;
	}
	,set_speedIncr: function(v) {
		this.needRebuild = true;
		return this.speedIncr = v;
	}
	,set_gravity: function(v) {
		this.needRebuild = true;
		return this.gravity = v;
	}
	,set_speedRand: function(v) {
		this.needRebuild = true;
		return this.speedRand = v;
	}
	,set_speedDirRand: function(v) {
		this.needRebuild = true;
		return this.speedDirRand = v;
	}
	,set_life: function(v) {
		this.needRebuild = true;
		return this.life = v;
	}
	,set_lifeRand: function(v) {
		this.needRebuild = true;
		return this.lifeRand = v;
	}
	,set_nparts: function(n) {
		if(n > this.nparts) {
			this.needRebuild = true;
		}
		return this.nparts = n;
	}
	,set_emitLoop: function(v) {
		this.needRebuild = true;
		return this.emitLoop = v;
	}
	,set_emitStartDist: function(v) {
		this.needRebuild = true;
		return this.emitStartDist = v;
	}
	,set_emitDist: function(v) {
		this.needRebuild = true;
		return this.emitDist = v;
	}
	,set_depthOffset: function(v) {
		this.needRebuild = true;
		return this.depthOffset = v;
	}
	,set_emitAngle: function(v) {
		this.needRebuild = true;
		return this.emitAngle = v;
	}
	,set_emitSync: function(v) {
		this.needRebuild = true;
		return this.emitSync = v;
	}
	,set_emitDelay: function(v) {
		this.needRebuild = true;
		return this.emitDelay = v;
	}
	,set_emitOnBorder: function(v) {
		this.needRebuild = true;
		return this.emitOnBorder = v;
	}
	,set_isRelative: function(v) {
		this.needRebuild = true;
		return this.isRelative = v;
	}
	,set_attachToCam: function(v) {
		this.needRebuild = true;
		return this.attachToCam = v;
	}
	,set_timeDistorsion: function(v) {
		this.needRebuild = true;
		return this.timeDistorsion = v;
	}
	,set_cameraEffect: function(v) {
		this.needRebuild = true;
		return this.cameraEffect = v;
	}
	,set_camInertia: function(v) {
		this.needRebuild = true;
		return this.camInertia = v;
	}
	,set_distanceColorGradient: function(v) {
		this.needRebuild = true;
		return this.distanceColorGradient = v;
	}
	,set_minColorGradient: function(v) {
		this.needRebuild = true;
		return this.minColorGradient = v;
	}
	,set_boxSize: function(v) {
		this.needRebuild = true;
		return this.boxSize = v;
	}
	,syncParams: function() {
		this.pshader.speedIncr__ = this.speedIncr;
		this.pshader.fadeIn__ = this.fadeIn;
		this.pshader.fadeOut__ = this.fadeOut;
		this.pshader.fadePower__ = this.fadePower;
		this.pshader.gravity__ = this.gravity;
		this.pshader.loopCounter__ = this.emitLoop ? 1 : 10000000;
		this.pshader.color__ = this.colorGradient == null ? h3d.mat.Texture.fromColor(16777215) : this.colorGradient;
		this.pshader.texture__ = this.texture == null ? h3d.mat.Texture.fromColor(16777215) : this.texture;
		var frameCount = this.frameCount == 0 ? this.frameDivisionX * this.frameDivisionY : this.frameCount;
		this.pshader.animationRepeat__ = this.animationRepeat == 0 ? 0 : this.animationRepeat * frameCount - 1;
		this.pshader.animationFixedFrame__ = this.animationRepeat == 0 ? frameCount : 0;
		this.pshader.totalFrames__ = frameCount;
		var _this = this.pshader.frameDivision__;
		var x = this.frameDivisionX;
		var y = 1 / this.frameDivisionX;
		var z = 1 / this.frameDivisionY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.pshader.maxTime__ = this.maxTime < 0 ? 1e10 : this.maxTime;
		this.pshader.timeDistorsion__ = this.timeDistorsion;
		this.pshader.cameraEffect__ = this.cameraEffect;
		this.pshader.distanceColorGradient__ = this.distanceColorGradient;
		this.pshader.minColorGradient__ = this.minColorGradient;
		this.pshader.emitterDimension__ = this.boxSize;
	}
	,getMaterialProps: function() {
		var name = h3d.mat.MaterialSetup.current.name;
		var p = Reflect.field(this.material,name);
		if(p == null) {
			p = h3d.mat.MaterialSetup.current.getDefaults("MeteoParticlesObject");
			this.material[name] = p;
		}
		return p;
	}
	,save: function() {
		var o = { sortMode : this.sortMode._hx_index, texture : this.texture == null ? null : this.texture.name, colorGradient : this.colorGradient == null ? null : this.colorGradient.name, nparts : this.nparts, size : this.size, sizeRand : this.sizeRand, life : this.life, lifeRand : this.lifeRand, speed : this.speed, speedXY : this.speedXY, speedZ : this.speedZ, speedRand : this.speedRand, speedDirRand : this.speedDirRand, timeDistorsion : this.timeDistorsion, cameraEffect : this.cameraEffect, fadeIn : this.fadeIn, fadeOut : this.fadeOut, fadePower : this.fadePower, attachToCam : this.attachToCam, emitDist : this.emitDist, depthOffset : this.depthOffset, camInertia : this.camInertia, distanceColorGradient : this.distanceColorGradient, minColorGradient : this.minColorGradient, boxSize : this.boxSize};
		var _g = 0;
		var _g1 = prefab.MeteoPartGroup.getFields(this);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			o[f] = Reflect.field(this,f);
		}
		return o;
	}
	,loadTexture: function(path) {
		if(path == null) {
			return null;
		}
		return this.parent.loadTexture(path);
	}
	,load: function(version,o) {
		var _g = 0;
		var _g1 = prefab.MeteoPartGroup.getFields(this);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(o,f)) {
				this[f] = Reflect.field(o,f);
			}
		}
		var v = Type.createEnumIndex(h3d.parts.GpuSortMode,o.sortMode,null);
		this.needRebuild = true;
		this.sortMode = v;
		this.texture = this.loadTexture(o.texture);
		this.colorGradient = this.loadTexture(o.colorGradient);
		var n = o.nparts;
		if(n > this.nparts) {
			this.needRebuild = true;
		}
		this.nparts = n;
		this.needRebuild = true;
		this.emitDist = o.emitDist;
		this.needRebuild = true;
		this.depthOffset = o.depthOffset;
		this.needRebuild = true;
		this.size = o.size;
		this.needRebuild = true;
		this.sizeRand = o.sizeRand;
		this.needRebuild = true;
		this.life = o.life;
		this.needRebuild = true;
		this.lifeRand = o.lifeRand;
		this.needRebuild = true;
		this.speed = o.speed;
		this.needRebuild = true;
		this.speedXY = o.speedXY;
		this.needRebuild = true;
		this.speedZ = o.speedZ;
		this.needRebuild = true;
		this.speedRand = o.speedRand;
		this.needRebuild = true;
		this.speedDirRand = o.speedDirRand;
		this.needRebuild = true;
		this.timeDistorsion = o.timeDistorsion;
		this.needRebuild = true;
		this.cameraEffect = o.cameraEffect;
		this.fadeIn = o.fadeIn;
		this.fadeOut = o.fadeOut;
		this.fadePower = o.fadePower;
		this.needRebuild = true;
		this.attachToCam = o.attachToCam;
		this.needRebuild = true;
		this.camInertia = o.camInertia;
		this.needRebuild = true;
		this.distanceColorGradient = o.distanceColorGradient;
		this.needRebuild = true;
		this.boxSize = o.boxSize;
		var v = this.emitStartDist;
		if(isNaN(v)) {
			this.needRebuild = true;
			this.emitStartDist = 0;
		}
		if(version == 1) {
			this.fadeOut = 1 - this.fadeOut;
			this.material = { };
		}
		if(this.parent != null) {
			var index = this.parent.groups.indexOf(this);
			if(index >= 0) {
				var mat = this.parent.materials[index];
				mat.name = this.name;
			}
		}
	}
	,updateBounds: function(bounds) {
		var life = this.life * (1 + this.lifeRand);
		var a = 1 - this.speedRand;
		var speedMin = this.speed * (a < 0. ? 0. : a);
		var speed = this.speed * (1 + this.speedRand);
		var start = this.emitStartDist + this.boxSize;
		var maxDist = speedMin * (1 + this.speedIncr * life) * life - this.gravity * life * life;
		var phi = this.emitAngle + 1.5707963267948966;
		var zMinMax = maxDist * Math.sin(phi);
		var f = maxDist * Math.cos(phi);
		var xyMinMax = (f < 0 ? -f : f) + start;
		if(0 < bounds.xMin) {
			bounds.xMin = 0;
		}
		if(0 > bounds.xMax) {
			bounds.xMax = 0;
		}
		if(0 < bounds.yMin) {
			bounds.yMin = 0;
		}
		if(0 > bounds.yMax) {
			bounds.yMax = 0;
		}
		if(zMinMax < bounds.zMin) {
			bounds.zMin = zMinMax;
		}
		if(zMinMax > bounds.zMax) {
			bounds.zMax = zMinMax;
		}
		if(xyMinMax < bounds.xMin) {
			bounds.xMin = xyMinMax;
		}
		if(xyMinMax > bounds.xMax) {
			bounds.xMax = xyMinMax;
		}
		if(xyMinMax < bounds.yMin) {
			bounds.yMin = xyMinMax;
		}
		if(xyMinMax > bounds.yMax) {
			bounds.yMax = xyMinMax;
		}
		if(0 < bounds.zMin) {
			bounds.zMin = 0;
		}
		if(0 > bounds.zMax) {
			bounds.zMax = 0;
		}
		var x = -xyMinMax;
		var y = -xyMinMax;
		if(x < bounds.xMin) {
			bounds.xMin = x;
		}
		if(x > bounds.xMax) {
			bounds.xMax = x;
		}
		if(y < bounds.yMin) {
			bounds.yMin = y;
		}
		if(y > bounds.yMax) {
			bounds.yMax = y;
		}
		if(0 < bounds.zMin) {
			bounds.zMin = 0;
		}
		if(0 > bounds.zMax) {
			bounds.zMax = 0;
		}
	}
	,emitPart: function(rnd,pt,absPos) {
		var g = this;
		rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
		rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
		var size = g.size * (1 + ((rnd.seed << 16) + rnd.seed2 | 0) % 10007 / 10007.0 * g.sizeRand);
		var vsize = g.sizeIncr;
		rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
		rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
		var life = g.life * (1 + ((rnd.seed << 16) + rnd.seed2 | 0) % 10007 / 10007.0 * g.lifeRand);
		rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
		rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
		var time = -((((rnd.seed << 16) + rnd.seed2 | 0) & 1073741823) % 10007 / 10007.0) * life * (1 - g.emitSync) - g.emitDelay;
		var p_x = 0.;
		var p_y = 0.;
		var p_z = 0.;
		var v_x = 0.;
		var v_y = 0.;
		var v_z = 0.;
		rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
		rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
		var theta = (((rnd.seed << 16) + rnd.seed2 | 0) & 1073741823) % 10007 / 10007.0 * 3.14159265358979323 * 2;
		var r;
		if(this.emitOnBorder) {
			r = 1;
		} else {
			rnd.seed = 36969 * (rnd.seed & 65535) + (rnd.seed >> 16);
			rnd.seed2 = 18000 * (rnd.seed2 & 65535) + (rnd.seed2 >> 16);
			r = Math.sqrt((((rnd.seed << 16) + rnd.seed2 | 0) & 1073741823) % 10007 / 10007.0);
		}
		var r1 = g.emitStartDist + g.boxSize * r;
		p_x = Math.cos(theta) * r1;
		p_y = Math.sin(theta) * r1;
		p_z = 0;
		var x = -1.41 * this.speedXY;
		var y = 0.0;
		var z = this.speedZ;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var speedDir_x = x;
		var speedDir_y = y;
		var speedDir_z = z;
		var speedDir_w = 1.;
		var k = speedDir_x * speedDir_x + speedDir_y * speedDir_y + speedDir_z * speedDir_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		speedDir_x *= k;
		speedDir_y *= k;
		speedDir_z *= k;
		var random = hxd.Rand.create();
		random.seed = 36969 * (random.seed & 65535) + (random.seed >> 16);
		random.seed2 = 18000 * (random.seed2 & 65535) + (random.seed2 >> 16);
		var x = (((random.seed << 16) + random.seed2 | 0) & 1073741823) % 10007 / 10007.0;
		random.seed = 36969 * (random.seed & 65535) + (random.seed >> 16);
		random.seed2 = 18000 * (random.seed2 & 65535) + (random.seed2 >> 16);
		var y = (((random.seed << 16) + random.seed2 | 0) & 1073741823) % 10007 / 10007.0;
		random.seed = 36969 * (random.seed & 65535) + (random.seed >> 16);
		random.seed2 = 18000 * (random.seed2 & 65535) + (random.seed2 >> 16);
		var z = (((random.seed << 16) + random.seed2 | 0) & 1073741823) % 10007 / 10007.0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var rnd_x = x;
		var rnd_y = y;
		var rnd_z = z;
		var rnd_w = 1.;
		random.seed = 36969 * (random.seed & 65535) + (random.seed >> 16);
		random.seed2 = 18000 * (random.seed2 & 65535) + (random.seed2 >> 16);
		var speedRandomized = this.speed * (1.0 + ((((random.seed << 16) + random.seed2 | 0) & 1073741823) % 10007 / 10007.0 * 2.0 - 1.0) * this.speedRand);
		v_x = (rnd_x * 2.0 - 1.0) * speedRandomized * this.speedDirRand + speedDir_x * speedRandomized;
		v_y = (rnd_y * 2.0 - 1.0) * speedRandomized * this.speedDirRand + speedDir_y * speedRandomized;
		v_z = (rnd_z * 2.0 - 1.0) * speedRandomized * this.speedDirRand + speedDir_z * speedRandomized;
		if(absPos != null && !this.isRelative) {
			var px = p_x * absPos._11 + p_y * absPos._21 + p_z * absPos._31 + absPos._41;
			var py = p_x * absPos._12 + p_y * absPos._22 + p_z * absPos._32 + absPos._42;
			var pz = p_x * absPos._13 + p_y * absPos._23 + p_z * absPos._33 + absPos._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			var px = v_x * absPos._11 + v_y * absPos._21 + v_z * absPos._31;
			var py = v_x * absPos._12 + v_y * absPos._22 + v_z * absPos._32;
			var pz = v_x * absPos._13 + v_y * absPos._23 + v_z * absPos._33;
			v_x = px;
			v_y = py;
			v_z = pz;
		}
		pt.sx = p_x;
		pt.sy = p_y;
		pt.sz = p_z;
		pt.vx = v_x;
		pt.vy = v_y;
		pt.vz = v_z;
		pt.time = time;
		pt.life = life;
		pt.initY = size;
		pt.deltaY = vsize;
	}
	,__class__: prefab.MeteoPartGroup
	,__properties__: {set_camInertia:"set_camInertia",set_attachToCam:"set_attachToCam",set_isRelative:"set_isRelative",set_minColorGradient:"set_minColorGradient",set_distanceColorGradient:"set_distanceColorGradient",set_cameraEffect:"set_cameraEffect",set_timeDistorsion:"set_timeDistorsion",set_gravity:"set_gravity",set_speedIncr:"set_speedIncr",set_speedDirRand:"set_speedDirRand",set_speedRand:"set_speedRand",set_speedZ:"set_speedZ",set_speedXY:"set_speedXY",set_speed:"set_speed",set_lifeRand:"set_lifeRand",set_life:"set_life",set_sizeRand:"set_sizeRand",set_sizeIncr:"set_sizeIncr",set_size:"set_size",set_emitOnBorder:"set_emitOnBorder",set_emitDelay:"set_emitDelay",set_emitSync:"set_emitSync",set_emitAngle:"set_emitAngle",set_depthOffset:"set_depthOffset",set_boxSize:"set_boxSize",set_emitDist:"set_emitDist",set_emitStartDist:"set_emitStartDist",set_emitLoop:"set_emitLoop",set_nparts:"set_nparts",set_sortMode:"set_sortMode"}
};
prefab.MeteoParticles = $hxClasses["prefab.MeteoParticles"] = function(parent) {
	this.amount = 1.0;
	this.duration = 0.;
	this.currentTime = 0.;
	this.seed = Std.random(16777216);
	this.prevZ = 0;
	this.prevY = 0;
	this.prevX = 0;
	this.rnd = new hxd.Rand(0);
	h3d.scene.MultiMaterial.call(this,null,[],parent);
	this.bounds = new h3d.col.Bounds();
	var _this = this.bounds;
	if(0 < _this.xMin) {
		_this.xMin = 0;
	}
	if(0 > _this.xMax) {
		_this.xMax = 0;
	}
	if(0 < _this.yMin) {
		_this.yMin = 0;
	}
	if(0 > _this.yMax) {
		_this.yMax = 0;
	}
	if(0 < _this.zMin) {
		_this.zMin = 0;
	}
	if(0 > _this.zMax) {
		_this.zMax = 0;
	}
	this.groups = [];
	this.primitiveBuffers = [];
	this.primitives = [];
};
prefab.MeteoParticles.__name__ = "prefab.MeteoParticles";
prefab.MeteoParticles.__super__ = h3d.scene.MultiMaterial;
prefab.MeteoParticles.prototype = $extend(h3d.scene.MultiMaterial.prototype,{
	groups: null
	,primitiveBuffers: null
	,primitives: null
	,resourcePath: null
	,partAlloc: null
	,rnd: null
	,prevX: null
	,prevY: null
	,prevZ: null
	,hideProps: null
	,prevViewProj: null
	,prevCamPos: null
	,seed: null
	,volumeBounds: null
	,currentTime: null
	,duration: null
	,bounds: null
	,amount: null
	,uploadedCount: null
	,onRemove: function() {
		h3d.scene.MultiMaterial.prototype.onRemove.call(this);
		var _g = 0;
		var _g1 = this.primitives;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p != null) {
				p.dispose();
			}
		}
	}
	,getBoundsRec: function(b) {
		if((this.flags & 512) != 0) {
			return h3d.scene.MultiMaterial.prototype.getBoundsRec.call(this,b);
		}
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.needRebuild) {
				var s = this.getScene();
				if(s != null) {
					if((this.flags & 1) != 0) {
						this.calcAbsPos();
						var f = 1;
						var b1 = this.follow != null;
						if(b1) {
							this.flags |= f;
						} else {
							this.flags &= ~f;
						}
					}
					this.sync(s.renderer.ctx);
				}
				break;
			}
		}
		return h3d.scene.MultiMaterial.prototype.getBoundsRec.call(this,b);
	}
	,onEnd: function() {
		if(this.duration > 0) {
			this.currentTime = -1;
		}
	}
	,save: function() {
		var bounds = null;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.groups;
		while(_g1 < _g2.length) {
			var g = _g2[_g1];
			++_g1;
			_g.push(g.save());
		}
		var save = { type : "MeteoParticlesObject", version : 2, groups : _g, bounds : bounds};
		if(this.hideProps != null) {
			save.hide = this.hideProps;
		}
		return save;
	}
	,load: function(_o,resourcePath) {
		this.resourcePath = resourcePath;
		var o = _o;
		if(o.version == 0 || o.version > 2) {
			throw haxe.Exception.thrown("Unsupported version " + Std.string(_o.version));
		}
		var _g = 0;
		var _g1 = o.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.addGroup().load(o.version,g);
		}
		if(o.bounds != null) {
			var x = o.bounds[0] - o.bounds[3] * 0.5;
			var y = o.bounds[1] - o.bounds[4] * 0.5;
			var z = o.bounds[2] - o.bounds[5] * 0.5;
			var dx = o.bounds[3];
			var dy = o.bounds[4];
			var dz = o.bounds[5];
			var b = new h3d.col.Bounds();
			b.xMin = x;
			b.yMin = y;
			b.zMin = z;
			b.xMax = x + dx;
			b.yMax = y + dy;
			b.zMax = z + dz;
			this.set_volumeBounds(b);
		}
		this.hideProps = o.hide;
	}
	,addGroup: function(g,material,index) {
		if(g == null) {
			g = new prefab.MeteoPartGroup(this);
		}
		if(g.name == null) {
			g.name = "Group#" + (this.groups.length + 1);
		}
		if(material == null) {
			material = h3d.mat.MaterialSetup.current.createMaterial();
			material.passes.set_culling(h3d.mat.Face.None);
			material.passes.set_depthWrite(false);
			material.set_blendMode(h2d.BlendMode.Alpha);
			material.passes.setPassName("overlay");
			if(g.material != null) {
				material.name = g.name;
			}
		}
		material.passes.addShader(g.pshader);
		if(index == null) {
			index = this.groups.length;
		}
		this.materials.splice(index,0,material);
		this.groups.splice(index,0,g);
		g.needRebuild = true;
		return g;
	}
	,set_seed: function(s) {
		if(this.groups != null) {
			var _g = 0;
			var _g1 = this.groups;
			while(_g < _g1.length) {
				var g = _g1[_g];
				++_g;
				g.needRebuild = true;
			}
		}
		return this.seed = s;
	}
	,set_volumeBounds: function(v) {
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			g.needRebuild = true;
		}
		return this.volumeBounds = v;
	}
	,rebuild: function() {
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			g.needRebuild = true;
		}
	}
	,removeGroup: function(g) {
		var idx = this.groups.indexOf(g);
		if(idx < 0) {
			return;
		}
		this.groups.splice(idx,1);
		this.materials.splice(idx,1);
		if(this.materials.length == 0) {
			this.material = null;
		}
	}
	,getGroup: function(name) {
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.name == name) {
				return g;
			}
		}
		return null;
	}
	,getGroups: function() {
		return new haxe.iterators.ArrayIterator(this.groups);
	}
	,calcAbsPos: function() {
		h3d.scene.MultiMaterial.prototype.calcAbsPos.call(this);
	}
	,rebuildAll: function(cam) {
		var ebounds = null;
		var calcEmit = null;
		var partCount = 0;
		var partAlloc = this.partAlloc;
		var _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		this.duration = 0.;
		var hasLoop = false;
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var gid = _g++;
			var g = this.groups[gid];
			g.partIndex = partCount;
			partCount += g.nparts;
			var p = g.particles;
			while(p != null) {
				var n = p.next;
				p.next = partAlloc;
				partAlloc = p;
				p = n;
			}
			g.particles = null;
			g.currentParts = 0;
			g.maxTime = g.emitLoop ? -1 : 0;
			g.ebounds = null;
			var maxLife = g.life * (1 + g.lifeRand + 1 - g.emitSync) + g.emitDelay;
			if(maxLife > this.duration) {
				this.duration = maxLife;
			}
			if(g.emitLoop) {
				hasLoop = true;
			}
			g.updateBounds(this.bounds);
		}
		this.partAlloc = partAlloc;
		var _g = 0;
		var _g1 = this.primitives;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p != null) {
				p.dispose();
			}
		}
		if(this.primitives.length != this.groups.length) {
			this.primitives.length = this.groups.length;
		}
		if(this.primitiveBuffers.length != this.groups.length) {
			this.primitiveBuffers.length = this.groups.length;
		}
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var gid = _g++;
			if(this.primitiveBuffers[gid] == null || this.primitiveBuffers[gid].pos > 14 * partCount * 4) {
				var tmp = this.primitiveBuffers;
				var this1 = hxd._FloatBuffer.Float32Expand._new(0);
				tmp[gid] = this1;
			}
			var this2 = this.primitiveBuffers[gid];
			var _g2 = this2.pos;
			var _g3 = 14 * this.groups[gid].nparts * 4;
			while(_g2 < _g3) {
				var i = _g2++;
				if(this2.pos == this2.array.length) {
					var newSize = this2.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this2.array);
					this2.array = newArray;
				}
				this2.array[this2.pos++] = 0.;
			}
			this.primitives[gid] = new h3d.prim.RawPrimitive({ vbuf : this.primitiveBuffers[gid], stride : 14, quads : true, bounds : this.bounds},true);
			this.primitives[gid].buffer.flags |= 1 << h3d.BufferFlag.RawFormat._hx_index;
		}
		if(hasLoop) {
			if(this.currentTime < this.duration) {
				this.currentTime = this.duration;
			}
			this.duration = 0;
		} else if(this.currentTime > this.duration) {
			this.currentTime = this.duration;
		}
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			g.needRebuild = false;
		}
		this.rnd.init(this.seed);
	}
	,cleanParts: function(g,pneeded,checkMove) {
		if(checkMove == null) {
			checkMove = false;
		}
		if(g.maxTime < 0) {
			return;
		}
		var p = g.particles;
		var prev = null;
		var ftime = g.maxTime;
		while(p != null && g.currentParts > pneeded) {
			var t = p.time + this.currentTime;
			var st = t - t % p.life;
			if(st > p.time + ftime && (!checkMove || -p.time < ftime)) {
				var n = p.next;
				p.next = this.partAlloc;
				this.partAlloc = p;
				if(prev == null) {
					g.particles = n;
				} else {
					prev.next = n;
				}
				g.currentParts--;
				p = n;
				continue;
			}
			prev = p;
			p = p.next;
		}
		g.maxTime = -1;
	}
	,syncGroup: function(g,camera,prevTime,visible) {
		var needSync = false;
		var f = g.amount * this.amount;
		var pneeded = Math.ceil((f < 0. ? 0. : f > 1. ? 1. : f) * g.nparts);
		if(g.currentParts != pneeded) {
			if(g.currentParts < pneeded) {
				this.cleanParts(g,pneeded);
				var partAlloc = this.partAlloc;
				while(g.currentParts < pneeded) {
					var pt = partAlloc;
					if(pt == null) {
						pt = new h3d.parts.GpuPart();
					} else {
						partAlloc = pt.next;
					}
					g.emitPart(this.rnd,pt,this.absPos);
					pt.time -= prevTime;
					pt.index = -1;
					pt.next = g.particles;
					g.particles = pt;
					g.currentParts++;
				}
				this.partAlloc = partAlloc;
				needSync = true;
			}
			if(g.currentParts > pneeded) {
				var ftime = g.maxTime;
				if(ftime < 0) {
					ftime = this.currentTime;
					g.maxTime = ftime;
				}
				var p = g.particles;
				var count = 0;
				while(p != null) {
					if(this.currentTime - (p.time + this.currentTime) % p.life > ftime) {
						++count;
					}
					p = p.next;
				}
				if(g.currentParts - count <= pneeded || count > 1000) {
					this.cleanParts(g,pneeded);
					if(g.currentParts > pneeded) {
						g.maxTime = ftime;
					}
					needSync = true;
				}
			}
		}
		var needSort = g.sortMode != h3d.parts.GpuSortMode.None && visible;
		if(needSort) {
			var p = g.particles;
			var m = camera.m;
			while(p != null) {
				var t = p.time + this.currentTime;
				if(g.emitLoop) {
					t %= p.life;
				}
				var acc = (1 + g.speedIncr * t) * t;
				p.x = p.sx + p.vx * acc;
				p.y = p.sy + p.vy * acc;
				p.z = p.sz + p.vz * acc - g.gravity * t * t;
				var cz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
				var cw = p.x * m._14 + p.y * m._24 + p.z * m._34 + m._44;
				p.w = cz / cw;
				p = p.next;
			}
			var list = g.particles;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.w < q.w ? 1 : -1) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			g.particles = tmp;
			needSync = true;
		}
		if(!needSync) {
			return;
		}
		var startIndex = 0;
		var index = startIndex;
		var vbuf = this.primitiveBuffers[this.groups.indexOf(g)];
		var p = g.particles;
		var uvs = prefab.MeteoParticles.PUVS;
		var pidx = 0;
		var firstPart = g.nparts;
		var lastPart = -1;
		while(p != null) {
			if(p.index == pidx) {
				++pidx;
				index += 56;
				p = p.next;
				continue;
			}
			var _g = 0;
			while(_g < uvs.length) {
				var u = uvs[_g];
				++_g;
				vbuf.array[index++] = p.sx;
				vbuf.array[index++] = p.sy;
				vbuf.array[index++] = p.sz;
				vbuf.array[index++] = p.vx;
				vbuf.array[index++] = p.vy;
				vbuf.array[index++] = p.vz;
				vbuf.array[index++] = u.u;
				vbuf.array[index++] = u.v;
				vbuf.array[index++] = p.time;
				vbuf.array[index++] = p.life;
				vbuf.array[index++] = p.initX;
				vbuf.array[index++] = p.initY;
				vbuf.array[index++] = p.deltaX;
				vbuf.array[index++] = p.deltaY;
			}
			if(pidx < firstPart) {
				firstPart = pidx;
			}
			if(pidx > lastPart) {
				lastPart = pidx;
			}
			p.index = pidx++;
			p = p.next;
		}
		if(firstPart <= lastPart) {
			this.uploadedCount += lastPart - firstPart + 1;
			var primitive = this.primitives[this.groups.indexOf(g)];
			primitive.buffer.uploadVector(vbuf,firstPart * 4 * 14,(lastPart - firstPart + 1) * 4,firstPart * 4);
		}
	}
	,emit: function(ctx) {
		var _g = 0;
		var _g1 = this.materials.length;
		while(_g < _g1) {
			var i = _g++;
			var m = this.materials[i];
			var g = this.groups[i];
			if(m != null && g.enable && g.currentParts > 0) {
				var index = i;
				if(index == null) {
					index = 0;
				}
				var p = m.passes;
				while(p != null) {
					ctx.emitPass(p,this).index = index;
					p = p.nextPass;
				}
			}
		}
	}
	,sync: function(ctx) {
		h3d.scene.MultiMaterial.prototype.sync.call(this,ctx);
		if(this.partAlloc != null) {
			this.partAlloc = this.partAlloc.next;
		}
		var prev = this.currentTime;
		this.currentTime += ctx.elapsedTime;
		if(prev < this.duration && this.currentTime >= this.duration) {
			this.onEnd();
			if((this.flags & 32) == 0) {
				return;
			}
		}
		if(!ctx.visibleFlag && (this.flags & 64) == 0) {
			return;
		}
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var gid = this.groups.indexOf(g);
			if(this.primitives[gid] != null) {
				if(g.needRebuild) {
					prev = 0;
					this.currentTime = 0;
					this.primitives[gid].dispose();
					this.primitives[gid] = null;
					break;
				}
			}
		}
		var camera = ctx.camera;
		if(camera == null) {
			camera = new h3d.Camera();
		}
		if(this.prevViewProj == null) {
			this.prevViewProj = camera.m.clone();
		}
		if(this.prevCamPos == null) {
			var _this = camera.pos;
			this.prevCamPos = new h3d.Vector(_this.x,_this.y,_this.z,_this.w);
		}
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var gid = _g++;
			var primitive = gid < this.primitives.length ? this.primitives[gid] : null;
			var tmp;
			if(!(primitive == null || primitive.buffer == null)) {
				var _this = primitive.buffer;
				tmp = _this.buffer == null || _this.buffer.vbuf == null;
			} else {
				tmp = true;
			}
			if(tmp) {
				this.rebuildAll(camera);
				break;
			}
		}
		this.uploadedCount = 0;
		var hasPart = false;
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.attachToCam) {
				if(true != ((this.flags & 2048) != 0)) {
					var f = 1;
					var b = true;
					if(b) {
						this.flags |= f;
					} else {
						this.flags &= ~f;
					}
				}
				var f1 = 2048;
				this.flags |= f1;
				var camPos = ctx.camera.pos;
				var _this = ctx.camera.target;
				var x = _this.x - camPos.x;
				var y = _this.y - camPos.y;
				var z = _this.z - camPos.z;
				var w = _this.w - camPos.w;
				if(w == null) {
					w = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var offset_x = x;
				var offset_y = y;
				var offset_z = z;
				var offset_w = w;
				offset_x *= 0.5;
				offset_y *= 0.5;
				offset_z *= 0.5;
				var x1 = camPos.x + offset_x;
				var y1 = camPos.y + offset_y;
				var z1 = camPos.z + offset_z;
				var w1 = camPos.w + offset_w;
				if(w1 == null) {
					w1 = 1.;
				}
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var emitterPos_x = x1;
				var emitterPos_y = y1;
				var emitterPos_z = z1;
				var emitterPos_w = w1;
				var _this1 = this.absPos;
				_this1._41 = emitterPos_x;
				_this1._42 = emitterPos_y;
				_this1._43 = emitterPos_z;
				_this1._44 = emitterPos_w;
				var _this2 = g.pshader.emitterPos__;
				var _this3 = this.getAbsPos();
				var v = null;
				if(v == null) {
					v = new h3d.Vector();
				}
				var x2 = _this3._41;
				var y2 = _this3._42;
				var z2 = _this3._43;
				var w2 = _this3._44;
				if(w2 == null) {
					w2 = 1.;
				}
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				v.x = x2;
				v.y = y2;
				v.z = z2;
				v.w = w2;
				var x3 = v.x;
				var _this4 = this.getAbsPos();
				var v1 = null;
				if(v1 == null) {
					v1 = new h3d.Vector();
				}
				var x4 = _this4._41;
				var y3 = _this4._42;
				var z3 = _this4._43;
				var w3 = _this4._44;
				if(w3 == null) {
					w3 = 1.;
				}
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				v1.x = x4;
				v1.y = y3;
				v1.z = z3;
				v1.w = w3;
				var y4 = v1.y;
				var _this5 = this.getAbsPos();
				var v2 = null;
				if(v2 == null) {
					v2 = new h3d.Vector();
				}
				var x5 = _this5._41;
				var y5 = _this5._42;
				var z4 = _this5._43;
				var w4 = _this5._44;
				if(w4 == null) {
					w4 = 1.;
				}
				if(z4 == null) {
					z4 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				v2.x = x5;
				v2.y = y5;
				v2.z = z4;
				v2.w = w4;
				var z5 = v2.z;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				_this2.x = x3;
				_this2.y = y4;
				_this2.z = z5;
				_this2.w = 1.;
				g.pshader.emitterDimension__ = g.boxSize;
				g.pshader.depthOffset__ = g.depthOffset;
				g.pshader.clampedDistorsion__ = g.emitDist;
			}
			this.syncGroup(g,camera,prev,ctx.visibleFlag);
			if(g.currentParts == 0) {
				continue;
			}
			hasPart = true;
			g.syncParams();
			g.pshader.time__ = this.currentTime;
			g.pshader.prevViewProj__.load(this.prevViewProj);
			g.pshader.viewProj__.load(camera.m);
		}
		if(this.duration == 0 && !hasPart) {
			this.onEnd();
		}
		this.prevViewProj.load(camera.m);
		var _this = this.prevCamPos;
		var v = camera.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
	}
	,get_count: function() {
		var n = 0;
		var _g = 0;
		var _g1 = this.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			n += g.currentParts;
		}
		return n;
	}
	,draw: function(ctx) {
		var primitive = this.primitives[ctx.drawPass.index];
		var tmp;
		if(primitive != null) {
			var _this = primitive.buffer;
			tmp = _this.buffer == null || _this.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return;
		}
		var g = this.groups[ctx.drawPass.index];
		var tmp;
		if(primitive.buffer != null) {
			var _this = primitive.buffer;
			tmp = _this.buffer == null || _this.buffer.vbuf == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			primitive.alloc(ctx.engine);
		}
		var _this = ctx.engine;
		var start = 0;
		var max = g.currentParts * 2;
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		_this.renderBuffer(primitive.buffer,_this.mem.quadIndexes,2,start,max);
	}
	,loadTexture: function(path) {
		try {
			return hxd.res.Loader.currentInstance.load(path).toTexture();
		} catch( _g ) {
			haxe.NativeStackTrace.lastError = _g;
			if(((haxe.Exception.caught(_g).unwrap()) instanceof hxd.fs.NotFound)) {
				return h3d.mat.Texture.fromColor(16711935);
			} else {
				throw _g;
			}
		}
	}
	,__class__: prefab.MeteoParticles
	,__properties__: $extend(h3d.scene.MultiMaterial.prototype.__properties__,{get_count:"get_count",set_volumeBounds:"set_volumeBounds",set_seed:"set_seed"})
});
prefab.MeteoParticlesObject = $hxClasses["prefab.MeteoParticlesObject"] = function(parent) {
	hrt.prefab.Object3D.call(this,parent);
	this.type = "MeteoParticlesObject";
};
prefab.MeteoParticlesObject.__name__ = "prefab.MeteoParticlesObject";
prefab.MeteoParticlesObject.__super__ = hrt.prefab.Object3D;
prefab.MeteoParticlesObject.prototype = $extend(hrt.prefab.Object3D.prototype,{
	data: null
	,createObject: function(ctx) {
		this.visible = false;
		var parts = new prefab.MeteoParticles(ctx.local3d);
		if(this.data != null) {
			parts.load(this.data);
		} else {
			var _this_current = 0;
			var _this_array = parts.groups;
			if(_this_current >= _this_array.length) {
				var _this = parts.addGroup();
				_this.needRebuild = true;
				_this.isRelative = true;
			}
		}
		return parts;
	}
	,setSelected: function(ctx,b) {
		return true;
	}
	,edit: function(ectx) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.edit.call(this,ectx);
		var ctx = ectx.getContext(this);
		if(ctx == null) {
			return;
		}
		var parts = js.Boot.__cast(ctx.local3d , prefab.MeteoParticles);
		var undo = function(f) {
			var undo = hide.ui.HistoryElement.Custom(function(redo) {
				f(redo);
				_gthis.data = parts.save();
			});
			ectx.properties.undo.change(undo);
			_gthis.data = parts.save();
		};
		var addGroup = function(g) {
			var e = $("\r\n\t\t\t\t<div class=\"section\">\r\n\t\t\t\t\t<h1><span>" + g.name + "</span> &nbsp;<input type=\"checkbox\" field=\"enable\"/></h1>\r\n\t\t\t\t\t<div class=\"content\">\r\n\r\n\t\t\t\t\t\t<div class=\"group\" name=\"Display\">\r\n\t\t\t\t\t\t\t<dl>\r\n\t\t\t\t\t\t\t\t<dt>Name</dt><dd><input field=\"name\" onchange=\"$(this).closest('.section').find('>h1 span').text($(this).val())\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texture\" field=\"texture\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Color Gradient</dt><dd><input type=\"texture\" field=\"colorGradient\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Sort</dt><dd><select field=\"sortMode\"></select></dd>\r\n\t\t\t\t\t\t\t\t<dt>Attach to cam</dt><dd><input type=\"checkbox\" field=\"attachToCam\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Cam inertia</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"camInertia\"/></dd>\r\n\t\t\t\t\t\t\t</dl>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"group\" name=\"Emit\">\r\n\t\t\t\t\t\t\t<dl>\r\n\t\t\t\t\t\t\t\t<dt>Count</dt><dd><input type=\"range\" field=\"nparts\" min=\"0\" max=\"1000\" step=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Clamped Distorsion</dt><dd><input type=\"range\" field=\"emitDist\" min=\"0\" max=\"10\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Depth offset</dt><dd><input type=\"range\" field=\"depthOffset\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Sync</dt><dd><input type=\"range\" field=\"emitSync\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Delay</dt><dd><input type=\"range\" field=\"emitDelay\" min=\"0\" max=\"10\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Loop</dt><dd><input type=\"checkbox\" field=\"emitLoop\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Border</dt><dd><input type=\"checkbox\" field=\"emitOnBorder\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>DistanceColorGradient</dt><dd><input type=\"range\" field=\"distanceColorGradient\" min=\"0\" max=\"1000\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Min Color Gradient</dt><dd><input type=\"range\" field=\"minColorGradient\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Box size</dt><dd><input type=\"range\" field=\"boxSize\" min=\"0\" max=\"100\"/></dd>\r\n\t\t\t\t\t\t\t</dl>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"group\" name=\"Life\">\r\n\t\t\t\t\t\t\t<dl>\r\n\t\t\t\t\t\t\t\t<dt>Initial</dt><dd><input type=\"range\" field=\"life\" min=\"0\" max=\"10\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Randomness</dt><dd><input type=\"range\" field=\"lifeRand\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Fade In</dt><dd><input type=\"range\" field=\"fadeIn\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Fade Out</dt><dd><input type=\"range\" field=\"fadeOut\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Fade Power</dt><dd><input type=\"range\" field=\"fadePower\" min=\"0\" max=\"3\"/></dd>\r\n\t\t\t\t\t\t\t</dl>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"group\" name=\"Speed\">\r\n\t\t\t\t\t\t\t<dl>\r\n\t\t\t\t\t\t\t\t<dt>Initial</dt><dd><input type=\"range\" field=\"speed\" min=\"0\" max=\"10\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Randomness</dt><dd><input type=\"range\" field=\"speedRand\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>XY</dt><dd><input type=\"range\" field=\"speedXY\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Z</dt><dd><input type=\"range\" field=\"speedZ\" min=\"-1\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Dir Randomness</dt><dd><input type=\"range\" field=\"speedDirRand\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Time Distorsion</dt><dd><input type=\"range\" field=\"timeDistorsion\" min=\"-5\" max=\"5\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Camera Effect</dt><dd><input type=\"range\" field=\"cameraEffect\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Acceleration</dt><dd><input type=\"range\" field=\"speedIncr\" min=\"-1\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Gravity</dt><dd><input type=\"range\" field=\"gravity\" min=\"-5\" max=\"5\"/></dd>\r\n\t\t\t\t\t\t\t</dl>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"group\" name=\"Size\">\r\n\t\t\t\t\t\t\t<dl>\r\n\t\t\t\t\t\t\t\t<dt>Initial</dt><dd><input type=\"range\" field=\"size\" min=\"0.01\" max=\"2\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Randomness</dt><dd><input type=\"range\" field=\"sizeRand\" min=\"0\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Growth</dt><dd><input type=\"range\" field=\"sizeIncr\" min=\"-1\" max=\"1\"/></dd>\r\n\t\t\t\t\t\t\t</dl>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"group\" name=\"Animation\">\r\n\t\t\t\t\t\t\t<dl>\r\n\t\t\t\t\t\t\t\t<dt>Animation Repeat</dt><dd><input type=\"range\" field=\"animationRepeat\" min=\"0\" max=\"10\"/></dd>\r\n\t\t\t\t\t\t\t\t<dt>Frame Division</dt><dd>\r\n\t\t\t\t\t\t\t\t\tX <input type=\"number\" style=\"width:30px\" field=\"frameDivisionX\" min=\"1\" max=\"16\"/>\r\n\t\t\t\t\t\t\t\t\tY <input type=\"number\" style=\"width:30px\" field=\"frameDivisionY\" min=\"1\" max=\"16\"/>\r\n\t\t\t\t\t\t\t\t\t# <input type=\"number\" style=\"width:30px\" field=\"frameCount\" min=\"0\" max=\"32\"/>\r\n\t\t\t\t\t\t\t\t</dd>\r\n\t\t\t\t\t\t\t</dl>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t");
			e.find("h1").contextmenu(function(ev) {
				var groups = parts.groups;
				var index = groups.indexOf(g);
				var moveIndex = null;
				moveIndex = function(d,history) {
					if(history == null) {
						history = true;
					}
					var index = groups.indexOf(g);
					parts.removeGroup(g);
					parts.addGroup(g,null,index + d);
					if(history) {
						undo(function(undo) {
							moveIndex(undo ? -d : d,false);
						});
					}
					ectx.rebuildProperties();
				};
				var addGroup = { label : "Enable", checked : g.enable, click : function() {
					g.enable = !g.enable;
					e.find("[field=enable]").prop("checked",g.enable);
				}};
				var addGroup1 = ectx.get_ide().getClipboard();
				new hide.comp.ContextMenu([addGroup,{ label : "Copy", click : function() {
					ectx.get_ide().setClipboard(g.save());
				}},{ label : "Paste", enabled : addGroup1 != null, click : function() {
					var prev = g.save();
					var next = ectx.get_ide().getClipboard();
					g.load(2,next);
					undo(function(undo) {
						g.load(2,undo ? prev : next);
						ectx.rebuildProperties();
					});
					ectx.rebuildProperties();
				}},{ label : "MoveUp", enabled : index > 0, click : function() {
					moveIndex(-1);
				}},{ label : "MoveDown", enabled : index < groups.length - 1, click : function() {
					moveIndex(1);
				}},{ label : "Delete", click : function() {
					parts.removeGroup(g);
					e.remove();
					undo(function(undo) {
						if(undo) {
							parts.addGroup(g,null,index);
						} else {
							parts.removeGroup(g);
						}
						ectx.rebuildProperties();
					});
				}}]);
				ev.preventDefault();
			});
			e.find("[field=emitLoop]").change(function(_) {
				parts.currentTime = 0;
			});
			e = ectx.properties.add(e,g,function(_) {
				_gthis.data = parts.save();
			});
			return e;
		};
		var _g_current = 0;
		var _g_array = parts.groups;
		while(_g_current < _g_array.length) {
			var g = _g_array[_g_current++];
			addGroup(g);
		}
		var extra = $("\r\n\t\t\t<div class=\"section\">\r\n\t\t\t\t<h1>Manage</h1>\r\n\t\t\t\t<div class=\"content\">\r\n\t\t\t\t\t<dl>\r\n\t\t\t\t\t<dt></dt><dd><input type=\"button\" class=\"new\" value=\"New Group\"/></dd>\r\n\t\t\t\t\t</dl>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t");
		extra.find(".new").click(function(_) {
			var g = parts.addGroup();
			var tmp = Lambda.count({ iterator : $bind(parts,parts.getGroups)});
			g.name = "Group#" + tmp;
			g.needRebuild = true;
			g.isRelative = true;
			addGroup(g);
			ectx.rebuildProperties();
			undo(function(undo) {
				if(undo) {
					parts.removeGroup(g);
				} else {
					parts.addGroup(g);
				}
				ectx.rebuildProperties();
			});
		},null);
		ectx.properties.add(extra);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.data != null) {
			obj.data = this.data;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.data = obj.data == null ? null : obj.data;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.data = p1.data;
	}
	,__class__: prefab.MeteoParticlesObject
});
prefab.NightEmissivePlaneObject = $hxClasses["prefab.NightEmissivePlaneObject"] = function(parent) {
	this.debugHour = 12.0;
	h3d.scene.Object.call(this,parent);
};
prefab.NightEmissivePlaneObject.__name__ = "prefab.NightEmissivePlaneObject";
prefab.NightEmissivePlaneObject.__super__ = h3d.scene.Object;
prefab.NightEmissivePlaneObject.prototype = $extend(h3d.scene.Object.prototype,{
	debugHour: null
	,updateOpacity: function(obj) {
		var a = prefab.NightEmissivePlaneObject.materials;
		while(a.length > 0) a.pop();
		var _g = 0;
		var _g1 = obj.getMaterials(prefab.NightEmissivePlaneObject.materials);
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var pbrMat = m;
			if(pbrMat != null) {
				var alphaMult = pbrMat.passes.getShader(shaders.AlphaMult);
				if(alphaMult == null) {
					alphaMult = new shaders.AlphaMult();
					pbrMat.passes.addShader(alphaMult);
				}
				pbrMat.set_blendMode(h2d.BlendMode.Alpha);
				pbrMat.set_castShadows(false);
				pbrMat.set_receiveShadows(false);
				var hour = this.debugHour % 24;
				var isNight = 0.0;
				if(hour > 20) {
					var f = hour - 20;
					var min = 0.0;
					var max = 1.0;
					if(max == null) {
						max = 1.;
					}
					if(min == null) {
						min = 0.;
					}
					isNight = f < min ? min : f > max ? max : f;
				} else if(hour < 5) {
					var f1 = 5 - hour;
					var min1 = 0.0;
					var max1 = 1.0;
					if(max1 == null) {
						max1 = 1.;
					}
					if(min1 == null) {
						min1 = 0.;
					}
					isNight = f1 < min1 ? min1 : f1 > max1 ? max1 : f1;
				}
				alphaMult.alpha__ = isNight;
			}
		}
		var _g = 0;
		var _g1 = obj.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(((c) instanceof h3d.scene.Object)) {
				this.updateOpacity(c);
			}
		}
	}
	,sync: function(ctx) {
		h3d.scene.Object.prototype.sync.call(this,ctx);
		this.updateOpacity(this);
	}
	,__class__: prefab.NightEmissivePlaneObject
});
prefab.NightEmissiveModel = $hxClasses["prefab.NightEmissiveModel"] = function(parent) {
	this.debugHour = 12;
	hrt.prefab.Model.call(this,parent);
};
prefab.NightEmissiveModel.__name__ = "prefab.NightEmissiveModel";
prefab.NightEmissiveModel.__super__ = hrt.prefab.Model;
prefab.NightEmissiveModel.prototype = $extend(hrt.prefab.Model.prototype,{
	debugHour: null
	,makeInstance: function(ctx) {
		if(this.source == null) {
			return hrt.prefab.Model.prototype.makeInstance.call(this,ctx);
		}
		ctx = ctx.clone(this);
		try {
			var obj = ctx.loadModel(this.source);
			if(obj.defaultTransform != null) {
				obj.name = "root";
				var root = new prefab.NightEmissivePlaneObject();
				root.addChild(obj);
				obj = root;
			}
			var _g = 0;
			var _g1 = obj.getMeshes();
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(!((m) instanceof h3d.scene.Skin)) {
					var _this = m.primitive.getBounds();
					var dx = _this.xMax - _this.xMin;
					var dy = _this.yMax - _this.yMin;
					var dz = _this.zMax - _this.zMin;
					m.set_cullingCollider(new h3d.col.ObjectCollider(m,new h3d.col.Sphere((_this.xMin + _this.xMax) * 0.5,(_this.yMin + _this.yMax) * 0.5,(_this.zMin + _this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5)));
				}
			}
			if(this.retargetAnim) {
				this.applyRetarget(obj);
			}
			obj.name = this.name;
			ctx.local3d.addChild(obj);
			ctx.local3d = obj;
			this.updateInstance(ctx);
			if(this.animation != null) {
				obj.playAnimation(ctx.loadAnimation(this.animation));
			}
			return ctx;
		} catch( _g ) {
			haxe.NativeStackTrace.lastError = _g;
			var e = haxe.Exception.caught(_g).unwrap();
			e.message = "Could not load model " + this.source + ": " + Std.string(e.message);
			ctx.shared.onError(e);
		}
		ctx.local3d = new prefab.NightEmissivePlaneObject(ctx.local3d);
		ctx.local3d.name = this.name;
		this.updateInstance(ctx);
		return ctx;
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.Model.prototype.updateInstance.call(this,ctx,propName);
		var obj = ctx.local3d;
		obj.debugHour = this.debugHour;
	}
	,getHideProps: function() {
		return { icon : "square", name : "NightEmissiveModel"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.Model.prototype.edit.call(this,ctx);
		ctx.properties.add($("\n\t\t\t<div class=\"group\" name=\"Debug Only\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Hour</dt><dd><input type=\"range\" min=\"0\" max=\"24\" step=\"1\" field=\"debugHour\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,__class__: prefab.NightEmissiveModel
});
prefab.Npc = $hxClasses["prefab.Npc"] = function(parent) {
	hrt.prefab.Object3D.call(this,parent);
	this.skin = { };
	if(Std.random(2) == 0) {
		this.skin.woman = true;
	}
};
prefab.Npc.__name__ = "prefab.Npc";
prefab.Npc.fileExists = function(path) {
	return hxd.res.Loader.currentInstance.exists(path);
};
prefab.Npc.countModels = function(path,suffix) {
	if(suffix == null) {
		suffix = "";
	}
	var i = 0;
	while(true) {
		try {
			hxd.res.Loader.currentInstance.load(path + (i + 1) + suffix + ".fbx");
		} catch( _g ) {
			haxe.NativeStackTrace.lastError = _g;
			if(((haxe.Exception.caught(_g).unwrap()) instanceof hxd.fs.NotFound)) {
				break;
			} else {
				throw _g;
			}
		}
		++i;
	}
	return i;
};
prefab.Npc.countTextures = function(path,suffix) {
	if(suffix == null) {
		suffix = "";
	}
	var i = 0;
	while(true) {
		try {
			hxd.res.Loader.currentInstance.load(path + (i + 1) + suffix + ".png");
		} catch( _g ) {
			haxe.NativeStackTrace.lastError = _g;
			if(((haxe.Exception.caught(_g).unwrap()) instanceof hxd.fs.NotFound)) {
				break;
			} else {
				throw _g;
			}
		}
		++i;
	}
	return i;
};
prefab.Npc.getHairColor = function(skin,hair) {
	return prefab.Npc.getData().skinHair.getPixel(skin,1 + hair);
};
prefab.Npc.getSkinColor = function(skin) {
	return prefab.Npc.getData().skinHair.getPixel(skin,0);
};
prefab.Npc.getClothColor = function(cloth) {
	var cl = prefab.Npc.getData().cloth;
	return cl.getPixel(cloth % cl.width,0);
};
prefab.Npc.colorDist = function(c1,c2) {
	var f = (c1 >> 16 & 255) - (c2 >> 16 & 255);
	var dr = (f < 0 ? -f : f) / 255;
	var f = (c1 >> 8 & 255) - (c2 >> 8 & 255);
	var dg = (f < 0 ? -f : f) / 255;
	var f = (c1 & 255) - (c2 & 255);
	var db = (f < 0 ? -f : f) / 255;
	return dr * 0.5 + dg + db * 0.3;
};
prefab.Npc.getData = function() {
	if(prefab.Npc.CACHE != null) {
		return prefab.Npc.CACHE;
	}
	prefab.Npc.CACHE = { skinHair : hxd.res.Loader.currentInstance.load("chars/unitSkinColors.png").toImage().getPixels(), cloth : hxd.res.Loader.currentInstance.load("chars/unitClothColors.png").toImage().getPixels(), tattooColors : hxd.res.Loader.currentInstance.load("chars/unitTattooColors.png").toImage().getPixels(), specColors : new haxe.ds.IntMap(), beardCount : prefab.Npc.countModels("chars/Hair/Beard"), hairCount : prefab.Npc.countModels("chars/Hair/Hair"), faceCountM : prefab.Npc.countModels("chars/Basemesh/ModelFace"), faceCountF : prefab.Npc.countModels("chars/Basemesh/ModelFace","W"), hairLikeness : new haxe.ds.IntMap(), skinCompLimit : 0., hairCompLimit : 0., clothTypes : [], poses : [], tattooCount : prefab.Npc.countTextures("chars/Face/Tattoo/Tattoo","_M1")};
	var specs = hxd.res.Loader.currentInstance.load("chars/unitHairSpec.png").toImage().getPixels();
	var _g = 0;
	var _g1 = specs.height;
	while(_g < _g1) {
		var i = _g++;
		var this1 = prefab.Npc.CACHE.specColors;
		var key = specs.getPixel(0,i);
		var value = specs.getPixel(1,i);
		this1.h[key] = value;
	}
	var config = JSON.parse(hxd.res.Loader.currentInstance.load("chars/config.json").entry.getText());
	var _g = hxd.res.Loader.currentInstance.load("chars/Clothes").entry.iterator();
	while(_g.i < _g.l) {
		var f = _g.a[_g.i++];
		var name = f.name;
		if(StringTools.endsWith(name,"_W")) {
			name = HxOverrides.substr(name,0,-2);
		}
		if(prefab.Npc.CACHE.clothTypes.indexOf(name) < 0) {
			prefab.Npc.CACHE.clothTypes.push(name);
		}
	}
	var r = new EReg("_[A-Z]+$","");
	var _g = hxd.res.Loader.currentInstance.load("chars/Anims").entry.iterator();
	while(_g.i < _g.l) {
		var f = _g.a[_g.i++];
		var name = f.name;
		if(!StringTools.endsWith(name,".fbx") || !StringTools.startsWith(name,"Anim_")) {
			continue;
		}
		name = HxOverrides.substr(name,0,-4);
		name = HxOverrides.substr(name,5,null);
		if(r.match(name)) {
			name = r.matchedLeft();
		} else if(StringTools.endsWith(name,"W")) {
			continue;
		}
		if(new EReg("Talk([0-9]+?)$","").match(name)) {
			continue;
		}
		if(prefab.Npc.CACHE.poses.indexOf(name) < 0) {
			prefab.Npc.CACHE.poses.push(name);
		}
	}
	prefab.Npc.CACHE.clothTypes.sort(Reflect.compare);
	var makeId = function(p) {
		if(!StringTools.startsWith(p,"Pose")) {
			return "_" + p;
		}
		return p;
	};
	prefab.Npc.CACHE.poses.sort(function(p1,p2) {
		return Reflect.compare(makeId(p1),makeId(p2));
	});
	var _g = 0;
	var _g1 = config.manHair;
	while(_g < _g1.length) {
		var h = _g1[_g];
		++_g;
		prefab.Npc.CACHE.hairLikeness.h[h] = false;
	}
	var _g = 0;
	var _g1 = config.womanHair;
	while(_g < _g1.length) {
		var h = _g1[_g];
		++_g;
		prefab.Npc.CACHE.hairLikeness.h[h] = true;
	}
	var getCompare = function(pix,start,count,k) {
		var all = [];
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = pix.width;
			while(_g2 < _g3) {
				var i = _g2++;
				var _g4 = i + 1;
				var _g5 = pix.width;
				while(_g4 < _g5) {
					var j = _g4++;
					all.push(prefab.Npc.colorDist(pix.getPixel(i,start + y),pix.getPixel(j,start + y)));
				}
			}
		}
		all.sort(Reflect.compare);
		return all[all.length * k | 0];
	};
	prefab.Npc.CACHE.skinCompLimit = getCompare(prefab.Npc.CACHE.skinHair,0,1,0.2);
	prefab.Npc.CACHE.hairCompLimit = getCompare(prefab.Npc.CACHE.skinHair,1,prefab.Npc.CACHE.skinHair.height - 1,0.3);
	return prefab.Npc.CACHE;
};
prefab.Npc.__super__ = hrt.prefab.Object3D;
prefab.Npc.prototype = $extend(hrt.prefab.Object3D.prototype,{
	skin: null
	,resolveAnimation: function() {
		var anim = this.skin.pose == null ? "IdlePose" : this.skin.pose;
		if(prefab.Npc.fileExists("chars/Anims/Anim_" + anim + ".fbx")) {
			return anim;
		}
		anim += "_S";
		if(prefab.Npc.fileExists("chars/Anims/Anim_" + anim + ".fbx")) {
			return anim;
		}
		return null;
	}
	,updateInstance: function(ctx,propName) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.updateInstance.call(this,ctx,propName);
		var view = ctx.local3d.getObjectByName("NPC_VIEW");
		if(view != null) {
			if(view != null && view.parent != null) {
				view.parent.removeChild(view);
			}
			view = null;
		}
		var data = prefab.Npc.getData();
		var ide = hide.Ide.inst;
		var clothPath = "chars/Clothes/" + (this.skin.cloth == null ? "Naked" : this.skin.cloth);
		var modelPath = clothPath + "/Model";
		var prefabSetup = ctx.shared.loadPrefab("chars/Prefabs/Prefab_SS.prefab");
		if(this.skin.woman && prefab.Npc.fileExists(modelPath + "Woman.fbx")) {
			modelPath += "Woman";
			prefabSetup = ctx.shared.loadPrefab("chars/Prefabs/Prefab_WSS.prefab");
		}
		var pmodel = prefabSetup.get(hrt.prefab.Model,"Model");
		var view = ctx.loadModel(modelPath + ".fbx");
		view.name = "NPC_VIEW";
		var v = Math.random() * 1e-8;
		view.x = v;
		var f = 1;
		var b = true;
		if(b) {
			view.flags |= f;
		} else {
			view.flags &= ~f;
		}
		ctx.local3d.addChild(view);
		var baseMesh = null;
		if(this.skin.face != null) {
			var face = this.skin.face % (this.skin.woman ? data.faceCountF : data.faceCountM) + 1;
			baseMesh = ctx.loadModel("chars/Basemesh/ModelFace" + face + (this.skin.woman ? "W" : "") + ".fbx");
			var _g = 0;
			var _g1 = view.getMaterials();
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m.name.indexOf("Face") >= 0) {
					m.passes.set_culling(h3d.mat.Face.Both);
				}
			}
			var _g = 0;
			var _g1 = baseMesh.getMaterials();
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m.name.indexOf("Body") >= 0) {
					m.passes.set_culling(h3d.mat.Face.Both);
				}
			}
			view.addChild(baseMesh);
		}
		var skinId = 0;
		if(this.skin.skinColor != null) {
			skinId = this.skin.skinColor;
		}
		var _g = 0;
		var _g1 = view.getMaterials();
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name.indexOf("Body") >= 0 || m.name.indexOf("Face") >= 0) {
				m.passes.addShader(new gfx.shader.ColorizeShader(data.skinHair.getPixel(skinId,0),m.get_specularTexture()));
				if(m.name.indexOf("Face") >= 0 && this.skin.tattoo >= 0 && this.skin.face >= 0) {
					var tattooShader = new prefab.TattooShader();
					var c = data.tattooColors.getPixel(this.skin.tattooColor,0);
					var s = 0.00392156862745098;
					tattooShader.color__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
					tattooShader.texture__ = hxd.res.Loader.currentInstance.load("chars/Face/Tattoo/Tattoo" + (this.skin.tattoo + 1) + (this.skin.woman ? "_W" : "_M") + (this.skin.face + 1) + ".png").toTexture();
					m.passes.addShader(tattooShader);
				}
			}
			if(this.skin.clothColor != null && m.name.indexOf("Clothes") >= 0) {
				m.passes.addShader(new gfx.shader.ColorizeShader(data.cloth.getPixel(this.skin.clothColor,0),m.get_specularTexture()));
			}
		}
		var addModel = function(name,idx,joint) {
			var path = name == "Backpack" ? "chars/Backpacks/Backpack" + (idx + 1) + "/Model.fbx" : "chars/Hair/" + name + (idx + 1) + ".fbx";
			if(!prefab.Npc.fileExists(path)) {
				return;
			}
			var model = ctx.loadModel(path);
			model.setTransform(prefabSetup.get(hrt.prefab.Object3D,name).getTransform());
			model.set_follow(view.getObjectByName(joint));
			view.addChild(model);
			var _g = 0;
			var _g1 = model.getMaterials();
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				var hairDithering = new prefab.HairDitheringShader();
				hairDithering.threshold__ = 0.5;
				m.passes.addShader(hairDithering);
				m.passes.addShader(new gfx.shader.ColorizeShader(prefab.Npc.getHairColor(skinId,_gthis.skin.hairColor),m.get_specularTexture()));
			}
		};
		if(this.skin.hair >= 0) {
			addModel("Hair",this.skin.hair,"JNT_HeadJ");
		}
		if(this.skin.beard >= 0) {
			addModel("Beard",this.skin.beard,"JNT_JawJ");
		}
		if(this.skin.backpack >= 0) {
			addModel("Backpack",this.skin.backpack,"JNT_SpineTopJ");
		}
		var path = this.resolveAnimation();
		var doRetarget = true;
		if(path != null) {
			if(this.skin.woman && prefab.Npc.fileExists("chars/Anims/Anim_" + path + "W.fbx")) {
				path += "W";
				var _g = 0;
				var _g1 = view.getMeshes();
				while(_g < _g1.length) {
					var m = _g1[_g];
					++_g;
					var s = ((m) instanceof h3d.scene.Skin) ? m : null;
					if(s != null) {
						s.enableRetargeting = false;
					}
				}
			}
			if(baseMesh != null) {
				if(baseMesh != null && baseMesh.parent != null) {
					baseMesh.parent.removeChild(baseMesh);
				}
			}
			var anim = ctx.loadAnimation("chars/Anims/Anim_" + path + ".fbx");
			view.playAnimation(anim).loop = true;
			if(baseMesh != null) {
				baseMesh.playAnimation(anim).loop = true;
				view.addChild(baseMesh);
			}
		}
		pmodel.applyRetarget(view);
		var shared = ctx.shared;
		while(true) {
			if(shared.currentPath == "worldmap/worldmap.l3d") {
				var v = view.scaleX * 8;
				view.scaleX = v;
				var f = 1;
				var b = true;
				if(b) {
					view.flags |= f;
				} else {
					view.flags &= ~f;
				}
				var v1 = view.scaleY * 8;
				view.scaleY = v1;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					view.flags |= f1;
				} else {
					view.flags &= ~f1;
				}
				var v2 = view.scaleZ * 8;
				view.scaleZ = v2;
				var f2 = 1;
				var b2 = true;
				if(b2) {
					view.flags |= f2;
				} else {
					view.flags &= ~f2;
				}
				var f3 = 1;
				var b3 = true;
				if(b3) {
					view.flags |= f3;
				} else {
					view.flags &= ~f3;
				}
				break;
			}
			if(shared.parent == null) {
				break;
			}
			shared = shared.parent.shared;
		}
	}
	,getHideProps: function() {
		return { icon : "user", name : "NPC"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.edit.call(this,ctx);
		var make = function(idx) {
			if(idx == null) {
				return 0;
			}
			if(idx < 0) {
				return idx;
			}
			return idx + 1;
		};
		var unmake = function(idx) {
			if(idx == 0) {
				return undefined;
			}
			if(idx < 0) {
				return idx;
			}
			return idx - 1;
		};
		var skinValues = { woman : this.skin.woman, face : make(this.skin.face), hair : make(this.skin.hair), beard : make(this.skin.beard), backpack : make(this.skin.backpack), hairColor : make(this.skin.hairColor), skinColor : make(this.skin.skinColor), clothColor : make(this.skin.clothColor), cloth : Std.string(this.skin.cloth), pose : Std.string(this.skin.pose), tattoo : make(this.skin.tattoo), tattooColor : make(this.skin.tattooColor)};
		var data = prefab.Npc.getData();
		var lctx = ctx.getContext(this);
		var shortPose = function(c) {
			if(StringTools.startsWith(c,"Pose")) {
				return HxOverrides.substr(c,4,null);
			}
			return "+" + c;
		};
		var ctx1 = ctx.properties;
		var _g = [];
		var _g1 = 0;
		var _g2 = data.clothTypes;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push("<option value=\"" + c + "\">" + c + "</option>");
		}
		var p = "\r\n\t\t\t<div class=\"group\" name=\"Skin\">\r\n\t\t\t<dl>\r\n\t\t\t\t<dt>Woman </dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<label><input type=\"checkbox\" field=\"woman\"> Woman</label>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Cloth</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<select field=\"cloth\">\r\n\t\t\t\t\t\t<option value=\"null\">Random</option>\r\n\t\t\t\t\t\t" + _g.join("") + "\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Face</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"";
		var a = data.faceCountM;
		var b = data.faceCountF;
		var p1 = p + (a < b ? b : a) + "\" field=\"face\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Hair</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"-1\" max=\"" + data.hairCount + "\" field=\"hair\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Beard</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"-1\" max=\"" + data.beardCount + "\" field=\"beard\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Tattoo</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"" + data.tattooCount + "\" field=\"tattoo\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>&nbsp;</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"button\" style=\"width:90px\" value=\"Random\" id=\"randSkin\"/>\r\n\t\t\t\t\t<input type=\"button\" style=\"width:90px\" value=\"Reset\" id=\"resetSkin\"/>\r\n\t\t\t\t</dd>\r\n\r\n\t\t\t\t<dt>&nbsp;</dt>\r\n\t\t\t\t<dt>Pose</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<select field=\"pose\">\r\n\t\t\t\t\t\t<option value=\"null\">None</option>\r\n\t\t\t\t\t\t";
		var _g = [];
		var _g1 = 0;
		var _g2 = data.poses;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push("<option value=\"" + c + "\">" + shortPose(c) + "</option>");
		}
		var p = ctx1.add($(p1 + _g.join("") + "\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>&nbsp;</dt><dd><input type=\"button\" value=\"Random\" id=\"randPose\"/></dd>\r\n\r\n\t\t\t</dl>\r\n\t\t\t<div class=\"group\" name=\"Colors\">\r\n\t\t\t\t<dt>Hair Color</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"" + (data.skinHair.height - 1) + "\" field=\"hairColor\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Skin Color</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"" + data.skinHair.width + "\" field=\"skinColor\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Cloth Color</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"" + data.cloth.width + "\" field=\"clothColor\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Backpack</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"" + 1 + "\" field=\"backpack\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>Tattoo Color</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"" + data.cloth.width + "\" field=\"tattooColor\"/>\r\n\t\t\t\t</dd>\r\n\t\t\t\t<dt>&nbsp;</dt>\r\n\t\t\t\t<dd>\r\n\t\t\t\t\t<input type=\"button\" style=\"width:90px\" value=\"Random\" id=\"randColors\"/>\r\n\t\t\t\t\t<input type=\"button\" style=\"width:90px\" value=\"Reset\" id=\"resetColors\"/>\r\n\t\t\t\t</dd>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t"),skinValues,function(name) {
			var p = skinValues.woman ? true : undefined;
			_gthis.skin.woman = p;
			_gthis.skin.cloth = skinValues.cloth;
			if(_gthis.skin.cloth == "null") {
				_gthis.skin.cloth = undefined;
			}
			_gthis.skin.face = unmake(skinValues.face);
			_gthis.skin.hair = unmake(skinValues.hair);
			_gthis.skin.beard = unmake(skinValues.beard);
			_gthis.skin.backpack = unmake(skinValues.backpack);
			if(_gthis.skin.woman) {
				_gthis.skin.beard = undefined;
			}
			_gthis.skin.hairColor = unmake(skinValues.hairColor);
			_gthis.skin.skinColor = unmake(skinValues.skinColor);
			_gthis.skin.clothColor = unmake(skinValues.clothColor);
			_gthis.skin.pose = skinValues.pose;
			if(_gthis.skin.pose == "null") {
				_gthis.skin.pose = undefined;
			}
			_gthis.skin.tattoo = unmake(skinValues.tattoo);
			_gthis.skin.tattooColor = unmake(skinValues.tattooColor);
			_gthis.updateInstance(lctx,name);
		});
		p.find("#randSkin").click(function(_) {
			ctx.makeChanges(_gthis,function() {
				_gthis.skin.hair = Std.random(data.hairCount);
				var tmp = _gthis.skin.woman ? undefined : Std.random(4) == 0 ? -1 : Std.random(data.beardCount);
				_gthis.skin.beard = tmp;
				var data1 = data.clothTypes;
				var tmp = Std.random(data.clothTypes.length);
				_gthis.skin.cloth = data1[tmp];
				_gthis.skin.tattoo = Std.random(data.tattooCount);
			});
		});
		p.find("#resetSkin").click(function(_) {
			ctx.makeChanges(_gthis,function() {
				_gthis.skin.hair = undefined;
				_gthis.skin.beard = undefined;
				_gthis.skin.cloth = undefined;
				_gthis.skin.tattoo = undefined;
			});
		});
		p.find("#resetColors").click(function(_) {
			ctx.makeChanges(_gthis,function() {
				_gthis.skin.clothColor = undefined;
				_gthis.skin.skinColor = undefined;
				_gthis.skin.hairColor = undefined;
				_gthis.skin.tattooColor = undefined;
			});
		});
		p.find("#randColors").click(function(_) {
			ctx.makeChanges(_gthis,function() {
				_gthis.skin.clothColor = Std.random(data.cloth.width);
				_gthis.skin.skinColor = Std.random(data.skinHair.width);
				_gthis.skin.hairColor = Std.random(data.skinHair.height - 1);
				_gthis.skin.tattooColor = Std.random(data.tattooColors.width);
			});
		});
		p.find("#randPose").click(function(_) {
			ctx.makeChanges(_gthis,function() {
				var data1 = data.poses;
				var tmp = Std.random(data.poses.length);
				_gthis.skin.pose = data1[tmp];
			});
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.skin != null) {
			obj.skin = this.skin;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.skin = obj.skin == null ? null : obj.skin;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.skin = p1.skin;
	}
	,__class__: prefab.Npc
});
prefab.OceanShader = $hxClasses["prefab.OceanShader"] = function() {
	this.foamNoiseIntensity__ = 0;
	this.foamNoiseScale__ = 0;
	this.foamNoiseTextureSize__ = new h3d.Vector();
	this.foamThickness__ = 0;
	this.foamSpeed__ = 0;
	this.foamRange__ = 0;
	this.foamScale__ = 0;
	this.foamColor__ = new h3d.Vector();
	this.minOpacity__ = 0;
	this.opacityRange__ = 0;
	this.opacityPower__ = 0;
	this.waveIntensity__ = 0;
	this.fadeDist__ = 0;
	this.secondWaveScale__ = 0;
	this.scale__ = 0;
	this.speed__ = 0;
	this.colorNoiseScale__ = 0;
	this.depthFactor__ = 0;
	this.deepWaterColor__ = new h3d.Vector();
	this.midWaterColor__ = new h3d.Vector();
	this.shoreWaterColor__ = new h3d.Vector();
	this.waterRoughness__ = 0;
	this.depthTextureSize__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
prefab.OceanShader.__name__ = "prefab.OceanShader";
prefab.OceanShader._SHADER = null;
prefab.OceanShader.__super__ = hxsl.Shader;
prefab.OceanShader.prototype = $extend(hxsl.Shader.prototype,{
	depthTexture__: null
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,depthTextureSize__: null
	,get_depthTextureSize: function() {
		return this.depthTextureSize__;
	}
	,set_depthTextureSize: function(_v) {
		return this.depthTextureSize__ = _v;
	}
	,waterRoughness__: null
	,get_waterRoughness: function() {
		return this.waterRoughness__;
	}
	,set_waterRoughness: function(_v) {
		return this.waterRoughness__ = _v;
	}
	,shoreWaterColor__: null
	,get_shoreWaterColor: function() {
		return this.shoreWaterColor__;
	}
	,set_shoreWaterColor: function(_v) {
		return this.shoreWaterColor__ = _v;
	}
	,midWaterColor__: null
	,get_midWaterColor: function() {
		return this.midWaterColor__;
	}
	,set_midWaterColor: function(_v) {
		return this.midWaterColor__ = _v;
	}
	,deepWaterColor__: null
	,get_deepWaterColor: function() {
		return this.deepWaterColor__;
	}
	,set_deepWaterColor: function(_v) {
		return this.deepWaterColor__ = _v;
	}
	,depthFactor__: null
	,get_depthFactor: function() {
		return this.depthFactor__;
	}
	,set_depthFactor: function(_v) {
		return this.depthFactor__ = _v;
	}
	,colorNoiseTexture__: null
	,get_colorNoiseTexture: function() {
		return this.colorNoiseTexture__;
	}
	,set_colorNoiseTexture: function(_v) {
		return this.colorNoiseTexture__ = _v;
	}
	,colorNoiseScale__: null
	,get_colorNoiseScale: function() {
		return this.colorNoiseScale__;
	}
	,set_colorNoiseScale: function(_v) {
		return this.colorNoiseScale__ = _v;
	}
	,normalMap__: null
	,get_normalMap: function() {
		return this.normalMap__;
	}
	,set_normalMap: function(_v) {
		return this.normalMap__ = _v;
	}
	,speed__: null
	,get_speed: function() {
		return this.speed__;
	}
	,set_speed: function(_v) {
		return this.speed__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,secondWaveScale__: null
	,get_secondWaveScale: function() {
		return this.secondWaveScale__;
	}
	,set_secondWaveScale: function(_v) {
		return this.secondWaveScale__ = _v;
	}
	,fadeDist__: null
	,get_fadeDist: function() {
		return this.fadeDist__;
	}
	,set_fadeDist: function(_v) {
		return this.fadeDist__ = _v;
	}
	,waveIntensity__: null
	,get_waveIntensity: function() {
		return this.waveIntensity__;
	}
	,set_waveIntensity: function(_v) {
		return this.waveIntensity__ = _v;
	}
	,opacityPower__: null
	,get_opacityPower: function() {
		return this.opacityPower__;
	}
	,set_opacityPower: function(_v) {
		return this.opacityPower__ = _v;
	}
	,opacityRange__: null
	,get_opacityRange: function() {
		return this.opacityRange__;
	}
	,set_opacityRange: function(_v) {
		return this.opacityRange__ = _v;
	}
	,minOpacity__: null
	,get_minOpacity: function() {
		return this.minOpacity__;
	}
	,set_minOpacity: function(_v) {
		return this.minOpacity__ = _v;
	}
	,foamTexture__: null
	,get_foamTexture: function() {
		return this.foamTexture__;
	}
	,set_foamTexture: function(_v) {
		return this.foamTexture__ = _v;
	}
	,foamColor__: null
	,get_foamColor: function() {
		return this.foamColor__;
	}
	,set_foamColor: function(_v) {
		return this.foamColor__ = _v;
	}
	,foamScale__: null
	,get_foamScale: function() {
		return this.foamScale__;
	}
	,set_foamScale: function(_v) {
		return this.foamScale__ = _v;
	}
	,foamRange__: null
	,get_foamRange: function() {
		return this.foamRange__;
	}
	,set_foamRange: function(_v) {
		return this.foamRange__ = _v;
	}
	,foamSpeed__: null
	,get_foamSpeed: function() {
		return this.foamSpeed__;
	}
	,set_foamSpeed: function(_v) {
		return this.foamSpeed__ = _v;
	}
	,foamThickness__: null
	,get_foamThickness: function() {
		return this.foamThickness__;
	}
	,set_foamThickness: function(_v) {
		return this.foamThickness__ = _v;
	}
	,foamNoiseTexture__: null
	,get_foamNoiseTexture: function() {
		return this.foamNoiseTexture__;
	}
	,set_foamNoiseTexture: function(_v) {
		return this.foamNoiseTexture__ = _v;
	}
	,foamNoiseTextureSize__: null
	,get_foamNoiseTextureSize: function() {
		return this.foamNoiseTextureSize__;
	}
	,set_foamNoiseTextureSize: function(_v) {
		return this.foamNoiseTextureSize__ = _v;
	}
	,foamNoiseScale__: null
	,get_foamNoiseScale: function() {
		return this.foamNoiseScale__;
	}
	,set_foamNoiseScale: function(_v) {
		return this.foamNoiseScale__ = _v;
	}
	,foamNoiseIntensity__: null
	,get_foamNoiseIntensity: function() {
		return this.foamNoiseIntensity__;
	}
	,set_foamNoiseIntensity: function(_v) {
		return this.foamNoiseIntensity__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.depthTexture__;
		case 1:
			return this.depthTextureSize__;
		case 2:
			return this.waterRoughness__;
		case 3:
			return this.shoreWaterColor__;
		case 4:
			return this.midWaterColor__;
		case 5:
			return this.deepWaterColor__;
		case 6:
			return this.depthFactor__;
		case 7:
			return this.colorNoiseTexture__;
		case 8:
			return this.colorNoiseScale__;
		case 9:
			return this.normalMap__;
		case 10:
			return this.speed__;
		case 11:
			return this.scale__;
		case 12:
			return this.secondWaveScale__;
		case 13:
			return this.fadeDist__;
		case 14:
			return this.waveIntensity__;
		case 15:
			return this.opacityPower__;
		case 16:
			return this.opacityRange__;
		case 17:
			return this.minOpacity__;
		case 18:
			return this.foamTexture__;
		case 19:
			return this.foamColor__;
		case 20:
			return this.foamScale__;
		case 21:
			return this.foamRange__;
		case 22:
			return this.foamSpeed__;
		case 23:
			return this.foamThickness__;
		case 24:
			return this.foamNoiseTexture__;
		case 25:
			return this.foamNoiseTextureSize__;
		case 26:
			return this.foamNoiseScale__;
		case 27:
			return this.foamNoiseIntensity__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.waterRoughness__;
		case 6:
			return this.depthFactor__;
		case 8:
			return this.colorNoiseScale__;
		case 10:
			return this.speed__;
		case 11:
			return this.scale__;
		case 12:
			return this.secondWaveScale__;
		case 13:
			return this.fadeDist__;
		case 14:
			return this.waveIntensity__;
		case 15:
			return this.opacityPower__;
		case 16:
			return this.opacityRange__;
		case 17:
			return this.minOpacity__;
		case 20:
			return this.foamScale__;
		case 21:
			return this.foamRange__;
		case 22:
			return this.foamSpeed__;
		case 23:
			return this.foamThickness__;
		case 26:
			return this.foamNoiseScale__;
		case 27:
			return this.foamNoiseIntensity__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.OceanShader.prototype);
		s.shader = this.shader;
		s.depthTexture__ = this.depthTexture__;
		s.depthTextureSize__ = this.depthTextureSize__;
		s.waterRoughness__ = this.waterRoughness__;
		s.shoreWaterColor__ = this.shoreWaterColor__;
		s.midWaterColor__ = this.midWaterColor__;
		s.deepWaterColor__ = this.deepWaterColor__;
		s.depthFactor__ = this.depthFactor__;
		s.colorNoiseTexture__ = this.colorNoiseTexture__;
		s.colorNoiseScale__ = this.colorNoiseScale__;
		s.normalMap__ = this.normalMap__;
		s.speed__ = this.speed__;
		s.scale__ = this.scale__;
		s.secondWaveScale__ = this.secondWaveScale__;
		s.fadeDist__ = this.fadeDist__;
		s.waveIntensity__ = this.waveIntensity__;
		s.opacityPower__ = this.opacityPower__;
		s.opacityRange__ = this.opacityRange__;
		s.minOpacity__ = this.minOpacity__;
		s.foamTexture__ = this.foamTexture__;
		s.foamColor__ = this.foamColor__;
		s.foamScale__ = this.foamScale__;
		s.foamRange__ = this.foamRange__;
		s.foamSpeed__ = this.foamSpeed__;
		s.foamThickness__ = this.foamThickness__;
		s.foamNoiseTexture__ = this.foamNoiseTexture__;
		s.foamNoiseTextureSize__ = this.foamNoiseTextureSize__;
		s.foamNoiseScale__ = this.foamNoiseScale__;
		s.foamNoiseIntensity__ = this.foamNoiseIntensity__;
		return s;
	}
	,__class__: prefab.OceanShader
	,__properties__: {set_foamNoiseIntensity:"set_foamNoiseIntensity",get_foamNoiseIntensity:"get_foamNoiseIntensity",set_foamNoiseScale:"set_foamNoiseScale",get_foamNoiseScale:"get_foamNoiseScale",set_foamNoiseTextureSize:"set_foamNoiseTextureSize",get_foamNoiseTextureSize:"get_foamNoiseTextureSize",set_foamNoiseTexture:"set_foamNoiseTexture",get_foamNoiseTexture:"get_foamNoiseTexture",set_foamThickness:"set_foamThickness",get_foamThickness:"get_foamThickness",set_foamSpeed:"set_foamSpeed",get_foamSpeed:"get_foamSpeed",set_foamRange:"set_foamRange",get_foamRange:"get_foamRange",set_foamScale:"set_foamScale",get_foamScale:"get_foamScale",set_foamColor:"set_foamColor",get_foamColor:"get_foamColor",set_foamTexture:"set_foamTexture",get_foamTexture:"get_foamTexture",set_minOpacity:"set_minOpacity",get_minOpacity:"get_minOpacity",set_opacityRange:"set_opacityRange",get_opacityRange:"get_opacityRange",set_opacityPower:"set_opacityPower",get_opacityPower:"get_opacityPower",set_waveIntensity:"set_waveIntensity",get_waveIntensity:"get_waveIntensity",set_fadeDist:"set_fadeDist",get_fadeDist:"get_fadeDist",set_secondWaveScale:"set_secondWaveScale",get_secondWaveScale:"get_secondWaveScale",set_scale:"set_scale",get_scale:"get_scale",set_speed:"set_speed",get_speed:"get_speed",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",set_colorNoiseScale:"set_colorNoiseScale",get_colorNoiseScale:"get_colorNoiseScale",set_colorNoiseTexture:"set_colorNoiseTexture",get_colorNoiseTexture:"get_colorNoiseTexture",set_depthFactor:"set_depthFactor",get_depthFactor:"get_depthFactor",set_deepWaterColor:"set_deepWaterColor",get_deepWaterColor:"get_deepWaterColor",set_midWaterColor:"set_midWaterColor",get_midWaterColor:"get_midWaterColor",set_shoreWaterColor:"set_shoreWaterColor",get_shoreWaterColor:"get_shoreWaterColor",set_waterRoughness:"set_waterRoughness",get_waterRoughness:"get_waterRoughness",set_depthTextureSize:"set_depthTextureSize",get_depthTextureSize:"get_depthTextureSize",set_depthTexture:"set_depthTexture",get_depthTexture:"get_depthTexture"}
});
prefab.OceanObject = $hxClasses["prefab.OceanObject"] = function(primitive,material,parent) {
	h3d.scene.Mesh.call(this,primitive,material,parent);
};
prefab.OceanObject.__name__ = "prefab.OceanObject";
prefab.OceanObject.__super__ = h3d.scene.Mesh;
prefab.OceanObject.prototype = $extend(h3d.scene.Mesh.prototype,{
	oceanPrefab: null
	,os: null
	,sync: function(ctx) {
		h3d.scene.Mesh.prototype.sync.call(this,ctx);
	}
	,emit: function(ctx) {
		if(this.os.normalMap__ == null) {
			return;
		}
		if(this.os.colorNoiseTexture__ == null) {
			return;
		}
		if(this.os.depthTexture__ == null) {
			return;
		}
		if(this.os.foamNoiseTexture__ == null) {
			return;
		}
		if(this.os.foamTexture__ == null) {
			return;
		}
		h3d.scene.Mesh.prototype.emit.call(this,ctx);
	}
	,onRemove: function() {
		HxOverrides.remove(this.oceanPrefab.oceanInstances,this);
		if(this.os.normalMap__ != null) {
			this.os.normalMap__.dispose();
		}
		if(this.os.depthTexture__ != null) {
			this.os.depthTexture__.dispose();
		}
		this.os.normalMap__ = null;
		this.os.depthTexture__ = null;
		h3d.scene.Mesh.prototype.onRemove.call(this);
	}
	,__class__: prefab.OceanObject
});
prefab.Ocean = $hxClasses["prefab.Ocean"] = function(parent) {
	this.waveNormalHeigtMap = null;
	this.oceanInstances = [];
	this.foamNoiseIntensity = 0.0;
	this.foamNoiseScale = 1.0;
	this.foamNoise = null;
	this.foamThickness = 0.2;
	this.foamSpeed = 1.0;
	this.foamRange = 1.0;
	this.foamScale = 1.0;
	this.foamColor = 16777215;
	this.foamTexture = null;
	this.waveIntensity = 1.0;
	this.fadeDist = 0.0;
	this.speed = 0.0;
	this.secondWaveScale = 1.0;
	this.scale = 1.0;
	this.normalMap = null;
	this.colorNoiseScale = 1.0;
	this.colorNoiseTexture = null;
	this.roughness = 0;
	this.depthFactor = 0;
	this.minOpacity = 0.1;
	this.opacityRange = 1.0;
	this.opacityPower = 2.0;
	this.midWaterColor = 0;
	this.deepWaterColor = 0;
	this.shoreWaterColor = 0;
	this.cellCount = 1;
	this.depthMapSize = 64;
	this.t = null;
	hrt.prefab.Object3D.call(this,parent);
};
prefab.Ocean.__name__ = "prefab.Ocean";
prefab.Ocean.__super__ = hrt.prefab.Object3D;
prefab.Ocean.prototype = $extend(hrt.prefab.Object3D.prototype,{
	get_polygones: function() {
		var polys = [];
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var p = c.to(hrt.prefab.l3d.Polygon);
			if(p != null) {
				polys.push(p);
			}
		}
		return polys;
	}
	,t: null
	,depthMapSize: null
	,cellCount: null
	,shoreWaterColor: null
	,deepWaterColor: null
	,midWaterColor: null
	,opacityPower: null
	,opacityRange: null
	,minOpacity: null
	,depthFactor: null
	,roughness: null
	,colorNoiseTexture: null
	,colorNoiseScale: null
	,normalMap: null
	,scale: null
	,secondWaveScale: null
	,speed: null
	,fadeDist: null
	,waveIntensity: null
	,foamTexture: null
	,foamColor: null
	,foamScale: null
	,foamRange: null
	,foamSpeed: null
	,foamThickness: null
	,foamNoise: null
	,foamNoiseScale: null
	,foamNoiseIntensity: null
	,oceanInstances: null
	,waveNormalHeigtMap: null
	,makeInstance: function(ctx) {
		ctx = ctx.clone(this);
		ctx.local3d = new h3d.scene.Object(ctx.local3d);
		ctx.local3d.name = "oceanRoot";
		if(this.get_polygones().length == 0) {
			var p = new hrt.prefab.l3d.Polygon(this);
			p.name = "polygon";
			p.makeInstance(ctx);
		}
		this.updateInstance(ctx);
		return ctx;
	}
	,makeOceanInstance: function(parent) {
		var oo = new prefab.OceanObject(null,null,parent);
		oo.name = "oceanChunk";
		oo.oceanPrefab = this;
		return oo;
	}
	,updateOceanInstance: function(oo,propName) {
		if(oo.getScene() == null) {
			return;
		}
		this.updateMat(oo);
		if(propName == null || propName == "cellCount" || propName == "x" || propName == "y" || propName == "z" || propName == "scaleX" || propName == "scaleY" || propName == "scaleZ") {
			if(oo.primitive != null) {
				oo.primitive.dispose();
			}
			oo.set_primitive(this.createBigPrimitive(oo));
			if(oo.primitive == null) {
				if(oo != null && oo.parent != null) {
					oo.parent.removeChild(oo);
				}
				return;
			}
		}
		if(propName == null || propName == "heightTexture" || propName == "waveIntensity") {
			if(propName == null || propName == "depthMapSize" || propName == "x" || propName == "y" || propName == "z" || propName == "scaleX" || propName == "scaleY" || propName == "scaleZ") {
				this.createDepthMap(oo);
			}
		}
	}
	,updateInstance: function(ctx,propName) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.updateInstance.call(this,ctx,propName);
		this.t = prefab.WaterUtils.findTerrain(this,ctx);
		var heightMapMesh = ctx.local3d.getScene().find(function(f) {
			if(((f) instanceof hrt.prefab.l3d.HeightMapMesh)) {
				return f;
			} else {
				return null;
			}
		});
		if(heightMapMesh != null) {
			heightMapMesh.onTileReady = function(t) {
				_gthis.createChunk(ctx.local3d,t);
			};
		}
		var _g = 0;
		var _g1 = this.oceanInstances;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			this.updateOceanInstance(o,propName);
		}
	}
	,loadTexture: function(path) {
		if(path == null) {
			return null;
		}
		var t = hxd.res.Loader.currentInstance.load(path).toTexture();
		if(t != null) {
			t.set_wrap(h3d.mat.Wrap.Repeat);
		}
		return t;
	}
	,updateMat: function(mesh) {
		var _g = 0;
		var _g1 = mesh.getMaterials();
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.passes.setPassName("default");
			m.set_castShadows(false);
			m.passes.setBlendMode(h2d.BlendMode.Alpha);
			var os = m.passes.getShader(prefab.OceanShader);
			if(os == null) {
				os = new prefab.OceanShader();
				m.passes.addShader(os);
				m.set_castShadows(false);
			}
			var ssr = m.allocPass("ssr",true);
			ssr.setBlendMode(h2d.BlendMode.Alpha);
			ssr.set_depthWrite(false);
			ssr.set_depthTest(h3d.mat.Compare.LessEqual);
			os.scale__ = this.scale;
			os.secondWaveScale__ = this.secondWaveScale;
			os.speed__ = this.speed / 10.0;
			os.fadeDist__ = this.fadeDist;
			var path = this.normalMap;
			var _v;
			if(path == null) {
				_v = null;
			} else {
				var t = hxd.res.Loader.currentInstance.load(path).toTexture();
				if(t != null) {
					t.set_wrap(h3d.mat.Wrap.Repeat);
				}
				_v = t;
			}
			os.normalMap__ = _v;
			os.waveIntensity__ = this.waveIntensity;
			os.waterRoughness__ = this.roughness;
			var c = this.shoreWaterColor;
			var s = 0.00392156862745098;
			os.shoreWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
			var c1 = this.midWaterColor;
			var s1 = 0.00392156862745098;
			os.midWaterColor__ = new h3d.Vector((c1 >> 16 & 255) * s1,(c1 >> 8 & 255) * s1,(c1 & 255) * s1,(c1 >>> 24) * s1);
			var c2 = this.deepWaterColor;
			var s2 = 0.00392156862745098;
			os.deepWaterColor__ = new h3d.Vector((c2 >> 16 & 255) * s2,(c2 >> 8 & 255) * s2,(c2 & 255) * s2,(c2 >>> 24) * s2);
			os.opacityPower__ = this.opacityPower;
			os.opacityRange__ = this.opacityRange;
			os.minOpacity__ = this.minOpacity;
			var path1 = this.colorNoiseTexture;
			var _v1;
			if(path1 == null) {
				_v1 = null;
			} else {
				var t1 = hxd.res.Loader.currentInstance.load(path1).toTexture();
				if(t1 != null) {
					t1.set_wrap(h3d.mat.Wrap.Repeat);
				}
				_v1 = t1;
			}
			os.colorNoiseTexture__ = _v1;
			os.colorNoiseScale__ = this.colorNoiseScale;
			os.depthFactor__ = this.depthFactor;
			var c3 = this.foamColor;
			var s3 = 0.00392156862745098;
			os.foamColor__ = new h3d.Vector((c3 >> 16 & 255) * s3,(c3 >> 8 & 255) * s3,(c3 & 255) * s3,(c3 >>> 24) * s3);
			var path2 = this.foamTexture;
			var _v2;
			if(path2 == null) {
				_v2 = null;
			} else {
				var t2 = hxd.res.Loader.currentInstance.load(path2).toTexture();
				if(t2 != null) {
					t2.set_wrap(h3d.mat.Wrap.Repeat);
				}
				_v2 = t2;
			}
			os.foamTexture__ = _v2;
			os.foamScale__ = this.foamScale;
			os.foamRange__ = this.foamRange;
			os.foamSpeed__ = this.foamSpeed;
			var path3 = this.foamNoise;
			var _v3;
			if(path3 == null) {
				_v3 = null;
			} else {
				var t3 = hxd.res.Loader.currentInstance.load(path3).toTexture();
				if(t3 != null) {
					t3.set_wrap(h3d.mat.Wrap.Repeat);
				}
				_v3 = t3;
			}
			os.foamNoiseTexture__ = _v3;
			if(os.foamNoiseTexture__ != null) {
				var _this = os.foamNoiseTextureSize__;
				var x = os.foamNoiseTexture__.width;
				var y = os.foamNoiseTexture__.height;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = 0.;
				_this.w = 1.;
			}
			os.foamNoiseScale__ = this.foamNoiseScale;
			os.foamNoiseIntensity__ = this.foamNoiseIntensity / 10.0;
			os.foamThickness__ = this.foamThickness;
			mesh.os = os;
		}
	}
	,createDepthMap: function(mesh) {
		var _this = mesh.getAbsPos();
		var v = null;
		if(v == null) {
			v = new h3d.Vector();
		}
		var x = _this._41;
		var y = _this._42;
		var z = _this._43;
		var w = _this._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		v.w = w;
		var absPos = v;
		var _this = mesh.getAbsPos();
		var v = null;
		if(v == null) {
			v = new h3d.Vector();
		}
		v.x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		v.y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		v.z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		if(this.t == null) {
			return;
		}
		if(this.depthMapSize < 0) {
			return;
		}
		if(mesh.os.depthTexture__ != null) {
			mesh.os.depthTexture__.dispose();
		}
		mesh.os.depthTexture__ = new h3d.mat.Texture(this.depthMapSize,this.depthMapSize,[h3d.mat.TextureFlags.Target],hxd.PixelFormat.R32F);
		mesh.os.depthTexture__.set_wrap(h3d.mat.Wrap.Clamp);
		mesh.os.depthTexture__.preventAutoDispose();
		mesh.os.depthTexture__.realloc = null;
		var pixels = hxd.PixelsFloat.fromPixels(hxd.Pixels.alloc(this.depthMapSize,this.depthMapSize,mesh.os.depthTexture__.format));
		var tmp_x = 0.;
		var tmp_y = 0.;
		var tmp_z = 0.;
		var tmp_w = 1.;
		var _g = 0;
		var _g1 = this.depthMapSize;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = this.depthMapSize;
			while(_g2 < _g3) {
				var j = _g2++;
				var x = absPos.x + i / this.depthMapSize * scale.x + 1.0 / this.depthMapSize * 0.5;
				var y = absPos.y + j / this.depthMapSize * scale.y + 1.0 / this.depthMapSize * 0.5;
				var absPos1 = absPos.z;
				var t = this.t;
				var b;
				if(t == null) {
					b = 0.0;
				} else {
					var h = t.getZ(x,y);
					b = h == -Infinity ? 0.0 : h;
				}
				var b1 = absPos1 - b;
				var x1 = 0.0 < b1 ? b1 : 0.0;
				var y1 = 0;
				var z = 0;
				var w = 0;
				if(w == null) {
					w = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				tmp_x = x1;
				tmp_y = y1;
				tmp_z = z;
				tmp_w = w;
				var pix = (i + j * pixels.width << 2) + pixels.offset;
				pixels.bytes.setFloat(pix,tmp_x);
			}
		}
		mesh.os.depthTexture__.uploadPixels(pixels);
		var _this = mesh.os.depthTextureSize__;
		var x = mesh.os.depthTexture__.width;
		var y = mesh.os.depthTexture__.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
	}
	,createBigPrimitive: function(mesh) {
		var _gthis = this;
		var chunkSize = 1.0;
		var vertexCount = this.cellCount + 1;
		var cellSize = chunkSize / this.cellCount;
		var _this = mesh.getAbsPos();
		var v = null;
		if(v == null) {
			v = new h3d.Vector();
		}
		var x = _this._41;
		var y = _this._42;
		var z = _this._43;
		var w = _this._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		v.w = w;
		var absPos = v;
		var _this = mesh.getAbsPos();
		var v = null;
		if(v == null) {
			v = new h3d.Vector();
		}
		v.x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		v.y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		v.z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		var prim = new h3d.prim.BigPrimitive(3,true);
		prim.begin(0,0);
		var _g = 0;
		var _g1 = vertexCount;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = vertexCount;
			while(_g2 < _g3) {
				var x = _g2++;
				var x1 = x * cellSize;
				var y1 = y * cellSize;
				prim.tmpBuf.array[prim.bufPos++] = x1;
				prim.tmpBuf.array[prim.bufPos++] = y1;
				prim.tmpBuf.array[prim.bufPos++] = 0;
				var _this = prim.bounds;
				if(x1 < _this.xMin) {
					_this.xMin = x1;
				}
				if(x1 > _this.xMax) {
					_this.xMax = x1;
				}
				if(y1 < _this.yMin) {
					_this.yMin = y1;
				}
				if(y1 > _this.yMax) {
					_this.yMax = y1;
				}
				if(0 < _this.zMin) {
					_this.zMin = 0;
				}
				if(0 > _this.zMax) {
					_this.zMax = 0;
				}
			}
		}
		var _g = 0;
		var _g1 = this.cellCount;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.cellCount;
			while(_g2 < _g3) {
				var x = _g2++;
				var px = absPos.x + x * cellSize * scale.x;
				var py = absPos.y + y * cellSize * scale.y;
				var i = x + y * vertexCount;
				var tmp;
				var tmp1;
				var t = _gthis.t;
				var tmp2;
				if(t == null) {
					tmp2 = 0.0;
				} else {
					var h = t.getZ(px,py);
					tmp2 = h == -Infinity ? 0.0 : h;
				}
				if(!(tmp2 < absPos.z)) {
					var t1 = _gthis.t;
					var tmp3;
					if(t1 == null) {
						tmp3 = 0.0;
					} else {
						var h1 = t1.getZ(px + cellSize * scale.x,py);
						tmp3 = h1 == -Infinity ? 0.0 : h1;
					}
					tmp1 = tmp3 < absPos.z;
				} else {
					tmp1 = true;
				}
				if(!tmp1) {
					var t2 = _gthis.t;
					var tmp4;
					if(t2 == null) {
						tmp4 = 0.0;
					} else {
						var h2 = t2.getZ(px + cellSize * scale.x,py + cellSize * scale.y);
						tmp4 = h2 == -Infinity ? 0.0 : h2;
					}
					tmp = tmp4 < absPos.z;
				} else {
					tmp = true;
				}
				if(tmp) {
					prim.tmpIdx[prim.idxPos++] = i + prim.startIndex;
					prim.tmpIdx[prim.idxPos++] = i + 1 + prim.startIndex;
					prim.tmpIdx[prim.idxPos++] = i + vertexCount + 1 + prim.startIndex;
				}
				var tmp5;
				var tmp6;
				var t3 = _gthis.t;
				var tmp7;
				if(t3 == null) {
					tmp7 = 0.0;
				} else {
					var h3 = t3.getZ(px,py);
					tmp7 = h3 == -Infinity ? 0.0 : h3;
				}
				if(!(tmp7 < absPos.z)) {
					var t4 = _gthis.t;
					var tmp8;
					if(t4 == null) {
						tmp8 = 0.0;
					} else {
						var h4 = t4.getZ(px + cellSize * scale.x,py + cellSize * scale.y);
						tmp8 = h4 == -Infinity ? 0.0 : h4;
					}
					tmp6 = tmp8 < absPos.z;
				} else {
					tmp6 = true;
				}
				if(!tmp6) {
					var t5 = _gthis.t;
					var tmp9;
					if(t5 == null) {
						tmp9 = 0.0;
					} else {
						var h5 = t5.getZ(px,py + cellSize * scale.y);
						tmp9 = h5 == -Infinity ? 0.0 : h5;
					}
					tmp5 = tmp9 < absPos.z;
				} else {
					tmp5 = true;
				}
				if(tmp5) {
					prim.tmpIdx[prim.idxPos++] = i + prim.startIndex;
					prim.tmpIdx[prim.idxPos++] = i + vertexCount + 1 + prim.startIndex;
					prim.tmpIdx[prim.idxPos++] = i + vertexCount + prim.startIndex;
				}
			}
		}
		if(prim.triCount() == 0) {
			prim.dispose();
			return null;
		}
		prim.flush();
		return prim;
	}
	,createChunk: function(parent,t) {
		var outside = true;
		var _g = 0;
		var _g1 = this.get_polygones();
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var points = p.points;
			if(points != null) {
				var _this = p.getAbsPos();
				var v = null;
				if(v == null) {
					v = new h3d.Vector();
				}
				var x = _this._41;
				var y = _this._42;
				var z = _this._43;
				var w = _this._44;
				if(w == null) {
					w = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				v.x = x;
				v.y = y;
				v.z = z;
				v.w = w;
				var x1 = v.x;
				var _this1 = p.getAbsPos();
				var v1 = null;
				if(v1 == null) {
					v1 = new h3d.Vector();
				}
				var x2 = _this1._41;
				var y1 = _this1._42;
				var z1 = _this1._43;
				var w1 = _this1._44;
				if(w1 == null) {
					w1 = 1.;
				}
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				v1.x = x2;
				v1.y = y1;
				v1.z = z1;
				v1.w = w1;
				var y2 = v1.y;
				if(y2 == null) {
					y2 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var offset_x = x1;
				var offset_y = y2;
				var tmp;
				var tmp1;
				var tmp2;
				var x3 = t.bounds.xMin;
				var y3 = t.bounds.yMin;
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var _this_x = x3;
				var _this_y = y3;
				if(!h2d.col.Polygon.contains(points,new h2d.col.Point(_this_x - offset_x,_this_y - offset_y))) {
					var x4 = t.bounds.xMax;
					var y4 = t.bounds.yMin;
					if(y4 == null) {
						y4 = 0.;
					}
					if(x4 == null) {
						x4 = 0.;
					}
					var _this_x1 = x4;
					var _this_y1 = y4;
					tmp2 = h2d.col.Polygon.contains(points,new h2d.col.Point(_this_x1 - offset_x,_this_y1 - offset_y));
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var x5 = t.bounds.xMin;
					var y5 = t.bounds.yMax;
					if(y5 == null) {
						y5 = 0.;
					}
					if(x5 == null) {
						x5 = 0.;
					}
					var _this_x2 = x5;
					var _this_y2 = y5;
					tmp1 = h2d.col.Polygon.contains(points,new h2d.col.Point(_this_x2 - offset_x,_this_y2 - offset_y));
				} else {
					tmp1 = true;
				}
				if(!tmp1) {
					var x6 = t.bounds.xMax;
					var y6 = t.bounds.yMax;
					if(y6 == null) {
						y6 = 0.;
					}
					if(x6 == null) {
						x6 = 0.;
					}
					var _this_x3 = x6;
					var _this_y3 = y6;
					tmp = h2d.col.Polygon.contains(points,new h2d.col.Point(_this_x3 - offset_x,_this_y3 - offset_y));
				} else {
					tmp = true;
				}
				if(tmp) {
					outside = false;
					break;
				}
			}
		}
		if(outside) {
			return null;
		}
		var _this = t.bounds;
		this.depthMapSize = Math.round(_this.xMax - _this.xMin);
		var _this = t.bounds;
		this.cellCount = Math.round((_this.xMax - _this.xMin) * 0.25);
		var oi = this.makeOceanInstance(parent);
		var v = t.bounds.xMin;
		oi.x = v;
		var f = 1;
		var b = true;
		if(b) {
			oi.flags |= f;
		} else {
			oi.flags &= ~f;
		}
		var v = t.bounds.yMin;
		oi.y = v;
		var f = 1;
		var b = true;
		if(b) {
			oi.flags |= f;
		} else {
			oi.flags &= ~f;
		}
		if(parent.name != "oceanRoot") {
			var v = this.z;
			oi.z = v;
			var f = 1;
			var b = true;
			if(b) {
				oi.flags |= f;
			} else {
				oi.flags &= ~f;
			}
		}
		var _this = t.bounds;
		var v = _this.xMax - _this.xMin;
		oi.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			oi.flags |= f;
		} else {
			oi.flags &= ~f;
		}
		var _this = t.bounds;
		var v = _this.yMax - _this.yMin;
		oi.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			oi.flags |= f;
		} else {
			oi.flags &= ~f;
		}
		this.updateOceanInstance(oi,null);
		if(oi == null) {
			return null;
		}
		if(oi.primitive == null) {
			if(oi != null && oi.parent != null) {
				oi.parent.removeChild(oi);
			}
			return null;
		} else {
			this.oceanInstances.push(oi);
		}
		return oi;
	}
	,getHideProps: function() {
		return { icon : "square", name : "Ocean"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.Object3D.prototype.edit.call(this,ctx);
		ctx.properties.add($("\n\t\t\t<div class=\"group\" name=\"Color\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Shore Water Color</dt><dd><input type=\"color\" field=\"shoreWaterColor\"/></dd>\n\t\t\t\t\t<dt>Mid Water Color</dt><dd><input type=\"color\" field=\"midWaterColor\"/></dd>\n\t\t\t\t\t<dt>Deep Water Color</dt><dd><input type=\"color\" field=\"deepWaterColor\"/></dd>\n\t\t\t\t\t<dt>Color Fade Range</dt><dd><input type=\"range\" min=\"0\" max =\"100\" field=\"depthFactor\"/></dd>\n\t\t\t\t\t<dt>Roughness</dt><dd><input type=\"range\" min=\"0\" max =\"1\" field=\"roughness\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\n\t\t\t<div class=\"group\" name=\"Color Noise\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"colorNoiseTexture\"/></dd>\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"colorNoiseScale\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\n\t\t\t<div class=\"group\" name=\"Opacity\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Range</dt><dd><input type=\"range\" max=\"5\" field=\"opacityRange\"/></dd>\n\t\t\t\t\t<dt>Power</dt><dd><input type=\"range\" max=\"5\" field=\"opacityPower\"/></dd>\n\t\t\t\t\t<dt>Min</dt><dd><input type=\"range\" max=\"1\" field=\"minOpacity\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\n\t\t\t<div class=\"group\" name=\"Wave\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>NormalMap</dt><dd><input type=\"texturepath\" field=\"normalMap\"/></dd>\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"scale\"/></dd>\n\t\t\t\t\t<dt>Second Wave Scale</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"secondWaveScale\"/></dd>\n\t\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"speed\"/></dd>\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max =\"1\" field=\"waveIntensity\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\n\t\t\t<div class=\"group\" name=\"Shore\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Color</dt><dd> <input type=\"color\" field=\"foamColor\"/></dd>\n\t\t\t\t\t<dt>Texture</dt><dd> <input type=\"texturepath\" field=\"foamTexture\"/></dd>\n\t\t\t\t\t<dt>Scale</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamScale\"/></dd>\n\t\t\t\t\t<dt>Thickness</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamThickness\"/></dd>\n\t\t\t\t\t<dt>Speed</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamSpeed\"/></dd>\n\t\t\t\t\t<dt>Range</dt><dd> <input type=\"range\" min=\"0\" max =\"10\"  field=\"foamRange\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\n\t\t\t<div class=\"group\" name=\"Shore Fade Noise\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"foamNoise\"/></dd>\n\t\t\t\t\t<dt>Scale</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamNoiseScale\"/></dd>\n\t\t\t\t\t<dt>Intensity</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamNoiseIntensity\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.depthMapSize != 64) {
			obj.depthMapSize = this.depthMapSize;
		}
		if(this.cellCount != 1) {
			obj.cellCount = this.cellCount;
		}
		if(this.shoreWaterColor != 0) {
			obj.shoreWaterColor = this.shoreWaterColor;
		}
		if(this.deepWaterColor != 0) {
			obj.deepWaterColor = this.deepWaterColor;
		}
		if(this.midWaterColor != 0) {
			obj.midWaterColor = this.midWaterColor;
		}
		if(this.opacityPower != 2.0) {
			obj.opacityPower = this.opacityPower;
		}
		if(this.opacityRange != 1.0) {
			obj.opacityRange = this.opacityRange;
		}
		if(this.minOpacity != 0.1) {
			obj.minOpacity = this.minOpacity;
		}
		if(this.depthFactor != 0) {
			obj.depthFactor = this.depthFactor;
		}
		if(this.roughness != 0) {
			obj.roughness = this.roughness;
		}
		if(this.colorNoiseTexture != null) {
			obj.colorNoiseTexture = this.colorNoiseTexture;
		}
		if(this.colorNoiseScale != 1.0) {
			obj.colorNoiseScale = this.colorNoiseScale;
		}
		if(this.normalMap != null) {
			obj.normalMap = this.normalMap;
		}
		if(this.scale != 1.0) {
			obj.scale = this.scale;
		}
		if(this.secondWaveScale != 1.0) {
			obj.secondWaveScale = this.secondWaveScale;
		}
		if(this.speed != 0.0) {
			obj.speed = this.speed;
		}
		if(this.fadeDist != 0.0) {
			obj.fadeDist = this.fadeDist;
		}
		if(this.waveIntensity != 1.0) {
			obj.waveIntensity = this.waveIntensity;
		}
		if(this.foamTexture != null) {
			obj.foamTexture = this.foamTexture;
		}
		if(this.foamColor != 16777215) {
			obj.foamColor = this.foamColor;
		}
		if(this.foamScale != 1.0) {
			obj.foamScale = this.foamScale;
		}
		if(this.foamRange != 1.0) {
			obj.foamRange = this.foamRange;
		}
		if(this.foamSpeed != 1.0) {
			obj.foamSpeed = this.foamSpeed;
		}
		if(this.foamThickness != 0.2) {
			obj.foamThickness = this.foamThickness;
		}
		if(this.foamNoise != null) {
			obj.foamNoise = this.foamNoise;
		}
		if(this.foamNoiseScale != 1.0) {
			obj.foamNoiseScale = this.foamNoiseScale;
		}
		if(this.foamNoiseIntensity != 0.0) {
			obj.foamNoiseIntensity = this.foamNoiseIntensity;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.depthMapSize = obj.depthMapSize == null ? 64 : obj.depthMapSize;
		this.cellCount = obj.cellCount == null ? 1 : obj.cellCount;
		this.shoreWaterColor = obj.shoreWaterColor == null ? 0 : obj.shoreWaterColor;
		this.deepWaterColor = obj.deepWaterColor == null ? 0 : obj.deepWaterColor;
		this.midWaterColor = obj.midWaterColor == null ? 0 : obj.midWaterColor;
		this.opacityPower = obj.opacityPower == null ? 2.0 : obj.opacityPower;
		this.opacityRange = obj.opacityRange == null ? 1.0 : obj.opacityRange;
		this.minOpacity = obj.minOpacity == null ? 0.1 : obj.minOpacity;
		this.depthFactor = obj.depthFactor == null ? 0 : obj.depthFactor;
		this.roughness = obj.roughness == null ? 0 : obj.roughness;
		this.colorNoiseTexture = obj.colorNoiseTexture == null ? null : obj.colorNoiseTexture;
		this.colorNoiseScale = obj.colorNoiseScale == null ? 1.0 : obj.colorNoiseScale;
		this.normalMap = obj.normalMap == null ? null : obj.normalMap;
		this.scale = obj.scale == null ? 1.0 : obj.scale;
		this.secondWaveScale = obj.secondWaveScale == null ? 1.0 : obj.secondWaveScale;
		this.speed = obj.speed == null ? 0.0 : obj.speed;
		this.fadeDist = obj.fadeDist == null ? 0.0 : obj.fadeDist;
		this.waveIntensity = obj.waveIntensity == null ? 1.0 : obj.waveIntensity;
		this.foamTexture = obj.foamTexture == null ? null : obj.foamTexture;
		this.foamColor = obj.foamColor == null ? 16777215 : obj.foamColor;
		this.foamScale = obj.foamScale == null ? 1.0 : obj.foamScale;
		this.foamRange = obj.foamRange == null ? 1.0 : obj.foamRange;
		this.foamSpeed = obj.foamSpeed == null ? 1.0 : obj.foamSpeed;
		this.foamThickness = obj.foamThickness == null ? 0.2 : obj.foamThickness;
		this.foamNoise = obj.foamNoise == null ? null : obj.foamNoise;
		this.foamNoiseScale = obj.foamNoiseScale == null ? 1.0 : obj.foamNoiseScale;
		this.foamNoiseIntensity = obj.foamNoiseIntensity == null ? 0.0 : obj.foamNoiseIntensity;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.depthMapSize = p1.depthMapSize;
		this.cellCount = p1.cellCount;
		this.shoreWaterColor = p1.shoreWaterColor;
		this.deepWaterColor = p1.deepWaterColor;
		this.midWaterColor = p1.midWaterColor;
		this.opacityPower = p1.opacityPower;
		this.opacityRange = p1.opacityRange;
		this.minOpacity = p1.minOpacity;
		this.depthFactor = p1.depthFactor;
		this.roughness = p1.roughness;
		this.colorNoiseTexture = p1.colorNoiseTexture;
		this.colorNoiseScale = p1.colorNoiseScale;
		this.normalMap = p1.normalMap;
		this.scale = p1.scale;
		this.secondWaveScale = p1.secondWaveScale;
		this.speed = p1.speed;
		this.fadeDist = p1.fadeDist;
		this.waveIntensity = p1.waveIntensity;
		this.foamTexture = p1.foamTexture;
		this.foamColor = p1.foamColor;
		this.foamScale = p1.foamScale;
		this.foamRange = p1.foamRange;
		this.foamSpeed = p1.foamSpeed;
		this.foamThickness = p1.foamThickness;
		this.foamNoise = p1.foamNoise;
		this.foamNoiseScale = p1.foamNoiseScale;
		this.foamNoiseIntensity = p1.foamNoiseIntensity;
	}
	,__class__: prefab.Ocean
	,__properties__: $extend(hrt.prefab.Object3D.prototype.__properties__,{get_polygones:"get_polygones"})
});
prefab.RainShader = $hxClasses["prefab.RainShader"] = function() {
	this.noiseAmount__ = 0;
	this.noiseSpeed__ = 0;
	this.noiseScale__ = 0;
	this.endColor__ = new h3d.Vector();
	this.startColor__ = new h3d.Vector();
	this.endOpacity__ = 0;
	this.startOpacity__ = 0;
	this.endHeight__ = 0;
	this.startHeight__ = 0;
	hrt.shader.PbrShader.call(this);
};
prefab.RainShader.__name__ = "prefab.RainShader";
prefab.RainShader._SHADER = null;
prefab.RainShader.__super__ = hrt.shader.PbrShader;
prefab.RainShader.prototype = $extend(hrt.shader.PbrShader.prototype,{
	USE_NOISE__: null
	,get_USE_NOISE: function() {
		return this.USE_NOISE__;
	}
	,set_USE_NOISE: function(_v) {
		this.constModified = true;
		return this.USE_NOISE__ = _v;
	}
	,startHeight__: null
	,get_startHeight: function() {
		return this.startHeight__;
	}
	,set_startHeight: function(_v) {
		return this.startHeight__ = _v;
	}
	,endHeight__: null
	,get_endHeight: function() {
		return this.endHeight__;
	}
	,set_endHeight: function(_v) {
		return this.endHeight__ = _v;
	}
	,startOpacity__: null
	,get_startOpacity: function() {
		return this.startOpacity__;
	}
	,set_startOpacity: function(_v) {
		return this.startOpacity__ = _v;
	}
	,endOpacity__: null
	,get_endOpacity: function() {
		return this.endOpacity__;
	}
	,set_endOpacity: function(_v) {
		return this.endOpacity__ = _v;
	}
	,startColor__: null
	,get_startColor: function() {
		return this.startColor__;
	}
	,set_startColor: function(_v) {
		return this.startColor__ = _v;
	}
	,endColor__: null
	,get_endColor: function() {
		return this.endColor__;
	}
	,set_endColor: function(_v) {
		return this.endColor__ = _v;
	}
	,noiseTex__: null
	,get_noiseTex: function() {
		return this.noiseTex__;
	}
	,set_noiseTex: function(_v) {
		return this.noiseTex__ = _v;
	}
	,noiseScale__: null
	,get_noiseScale: function() {
		return this.noiseScale__;
	}
	,set_noiseScale: function(_v) {
		return this.noiseScale__ = _v;
	}
	,noiseSpeed__: null
	,get_noiseSpeed: function() {
		return this.noiseSpeed__;
	}
	,set_noiseSpeed: function(_v) {
		return this.noiseSpeed__ = _v;
	}
	,noiseAmount__: null
	,get_noiseAmount: function() {
		return this.noiseAmount__;
	}
	,set_noiseAmount: function(_v) {
		return this.noiseAmount__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.USE_NOISE__) {
			this.constBits |= 262144;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.USE_NOISE__;
		case 2:
			return this.startHeight__;
		case 3:
			return this.endHeight__;
		case 4:
			return this.startOpacity__;
		case 5:
			return this.endOpacity__;
		case 6:
			return this.startColor__;
		case 7:
			return this.endColor__;
		case 8:
			return this.noiseTex__;
		case 9:
			return this.noiseScale__;
		case 10:
			return this.noiseSpeed__;
		case 11:
			return this.noiseAmount__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 2:
			return this.startHeight__;
		case 3:
			return this.endHeight__;
		case 4:
			return this.startOpacity__;
		case 5:
			return this.endOpacity__;
		case 9:
			return this.noiseScale__;
		case 10:
			return this.noiseSpeed__;
		case 11:
			return this.noiseAmount__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.RainShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.USE_NOISE__ = this.USE_NOISE__;
		s.startHeight__ = this.startHeight__;
		s.endHeight__ = this.endHeight__;
		s.startOpacity__ = this.startOpacity__;
		s.endOpacity__ = this.endOpacity__;
		s.startColor__ = this.startColor__;
		s.endColor__ = this.endColor__;
		s.noiseTex__ = this.noiseTex__;
		s.noiseScale__ = this.noiseScale__;
		s.noiseSpeed__ = this.noiseSpeed__;
		s.noiseAmount__ = this.noiseAmount__;
		return s;
	}
	,__class__: prefab.RainShader
	,__properties__: $extend(hrt.shader.PbrShader.prototype.__properties__,{set_noiseAmount:"set_noiseAmount",get_noiseAmount:"get_noiseAmount",set_noiseSpeed:"set_noiseSpeed",get_noiseSpeed:"get_noiseSpeed",set_noiseScale:"set_noiseScale",get_noiseScale:"get_noiseScale",set_noiseTex:"set_noiseTex",get_noiseTex:"get_noiseTex",set_endColor:"set_endColor",get_endColor:"get_endColor",set_startColor:"set_startColor",get_startColor:"get_startColor",set_endOpacity:"set_endOpacity",get_endOpacity:"get_endOpacity",set_startOpacity:"set_startOpacity",get_startOpacity:"get_startOpacity",set_endHeight:"set_endHeight",get_endHeight:"get_endHeight",set_startHeight:"set_startHeight",get_startHeight:"get_startHeight",set_USE_NOISE:"set_USE_NOISE",get_USE_NOISE:"get_USE_NOISE"})
});
prefab.Rain = $hxClasses["prefab.Rain"] = function(parent) {
	this.noiseAmount = 1;
	this.noiseScale = 1;
	this.noiseSpeed = 0;
	this.endColor = 16777215;
	this.startColor = 16777215;
	this.endOpacity = 1;
	this.startOpacity = 0;
	this.endHeight = 0;
	this.startHeight = 0;
	this.rainPass = new h3d.pass.ScreenFx(new prefab.RainShader());
	hrt.prefab.rfx.RendererFX.call(this,parent);
	this.startHeight = 100;
	this.rainPass.pass.setBlendMode(h2d.BlendMode.Alpha);
};
prefab.Rain.__name__ = "prefab.Rain";
prefab.Rain.__super__ = hrt.prefab.rfx.RendererFX;
prefab.Rain.prototype = $extend(hrt.prefab.rfx.RendererFX.prototype,{
	rainPass: null
	,startHeight: null
	,endHeight: null
	,startOpacity: null
	,endOpacity: null
	,startColor: null
	,endColor: null
	,noise: null
	,noiseSpeed: null
	,noiseScale: null
	,noiseAmount: null
	,end: function(r,step) {
		if(!(this.enabled && this.enableInEditor)) {
			return;
		}
		if(step == h3d.impl.Step.BeforeTonemapping && (this.startOpacity != 0 || this.endOpacity != 0)) {
			r.mark("Rain");
			var ctx = r.ctx;
			this.rainPass.shader.startHeight__ = this.startHeight;
			this.rainPass.shader.endHeight__ = this.endHeight;
			var _this = this.rainPass.shader.startColor__;
			var c = this.startColor;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			var _this = this.rainPass.shader.endColor__;
			var c = this.endColor;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.rainPass.shader.startColor__.w = this.startOpacity;
			this.rainPass.shader.endColor__.w = this.endOpacity;
			var _this = this.rainPass.shader;
			var _v = this.noise != null && hxd.res.Loader.currentInstance.load(this.noise).toTexture() != null;
			_this.constModified = true;
			_this.USE_NOISE__ = _v;
			if(this.rainPass.shader.USE_NOISE__) {
				this.rainPass.shader.noiseTex__ = hxd.res.Loader.currentInstance.load(this.noise).toTexture();
				this.rainPass.shader.noiseTex__.set_wrap(h3d.mat.Wrap.Repeat);
				this.rainPass.shader.noiseScale__ = 1.0 / this.noiseScale;
				this.rainPass.shader.noiseSpeed__ = this.noiseSpeed / this.noiseScale;
				this.rainPass.shader.noiseAmount__ = this.noiseAmount;
			}
			this.rainPass.setGlobals(ctx);
			this.rainPass.render();
		}
	}
	,edit: function(ctx) {
		ctx.properties.add($("\r\n\t\t\t<dl>\r\n\t\t\t\t<div class=\"group\" name=\"Height\">\r\n\t\t\t\t\t<dt>Start Height</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"startHeight\"/></dd>\r\n\t\t\t\t\t<dt>End Height</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"endHeight\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"group\" name=\"Color\">\r\n\t\t\t\t\t<dt>Start Color</dt><dd><input type=\"color\" field=\"startColor\"/></dd>\r\n\t\t\t\t\t<dt>End Color</dt><dd><input type=\"color\" field=\"endColor\"/></dd>\r\n\t\t\t\t\t<dt>Start Opacity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"startOpacity\"/></dd>\r\n\t\t\t\t\t<dt>End Opacity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"endOpacity\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"group\" name=\"Noise\">\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"noise\"/></dd>\r\n\t\t\t\t\t<dt>Amount</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"noiseAmount\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"noiseScale\"/></dd>\r\n\t\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"noiseSpeed\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t</dl>\r\n\t\t"),this);
		hrt.prefab.rfx.RendererFX.prototype.edit.call(this,ctx);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.saveSerializedFields.call(this,obj);
		if(this.startHeight != 0) {
			obj.startHeight = this.startHeight;
		}
		if(this.endHeight != 0) {
			obj.endHeight = this.endHeight;
		}
		if(this.startOpacity != 0) {
			obj.startOpacity = this.startOpacity;
		}
		if(this.endOpacity != 1) {
			obj.endOpacity = this.endOpacity;
		}
		if(this.startColor != 16777215) {
			obj.startColor = this.startColor;
		}
		if(this.endColor != 16777215) {
			obj.endColor = this.endColor;
		}
		if(this.noise != null) {
			obj.noise = this.noise;
		}
		if(this.noiseSpeed != 0) {
			obj.noiseSpeed = this.noiseSpeed;
		}
		if(this.noiseScale != 1) {
			obj.noiseScale = this.noiseScale;
		}
		if(this.noiseAmount != 1) {
			obj.noiseAmount = this.noiseAmount;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.loadSerializedFields.call(this,obj);
		this.startHeight = obj.startHeight == null ? 0 : obj.startHeight;
		this.endHeight = obj.endHeight == null ? 0 : obj.endHeight;
		this.startOpacity = obj.startOpacity == null ? 0 : obj.startOpacity;
		this.endOpacity = obj.endOpacity == null ? 1 : obj.endOpacity;
		this.startColor = obj.startColor == null ? 16777215 : obj.startColor;
		this.endColor = obj.endColor == null ? 16777215 : obj.endColor;
		this.noise = obj.noise == null ? null : obj.noise;
		this.noiseSpeed = obj.noiseSpeed == null ? 0 : obj.noiseSpeed;
		this.noiseScale = obj.noiseScale == null ? 1 : obj.noiseScale;
		this.noiseAmount = obj.noiseAmount == null ? 1 : obj.noiseAmount;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.rfx.RendererFX.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.startHeight = p1.startHeight;
		this.endHeight = p1.endHeight;
		this.startOpacity = p1.startOpacity;
		this.endOpacity = p1.endOpacity;
		this.startColor = p1.startColor;
		this.endColor = p1.endColor;
		this.noise = p1.noise;
		this.noiseSpeed = p1.noiseSpeed;
		this.noiseScale = p1.noiseScale;
		this.noiseAmount = p1.noiseAmount;
	}
	,__class__: prefab.Rain
});
prefab.RainRoughnessShader = $hxClasses["prefab.RainRoughnessShader"] = function() {
	this.roughnessMultiplier__ = 0;
	hxsl.Shader.call(this);
};
prefab.RainRoughnessShader.__name__ = "prefab.RainRoughnessShader";
prefab.RainRoughnessShader._SHADER = null;
prefab.RainRoughnessShader.__super__ = hxsl.Shader;
prefab.RainRoughnessShader.prototype = $extend(hxsl.Shader.prototype,{
	roughnessMultiplier__: null
	,get_roughnessMultiplier: function() {
		return this.roughnessMultiplier__;
	}
	,set_roughnessMultiplier: function(_v) {
		return this.roughnessMultiplier__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.roughnessMultiplier__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.roughnessMultiplier__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.RainRoughnessShader.prototype);
		s.shader = this.shader;
		s.roughnessMultiplier__ = this.roughnessMultiplier__;
		return s;
	}
	,__class__: prefab.RainRoughnessShader
	,__properties__: {set_roughnessMultiplier:"set_roughnessMultiplier",get_roughnessMultiplier:"get_roughnessMultiplier"}
});
prefab.RainRoughness = $hxClasses["prefab.RainRoughness"] = function(parent) {
	this.roughnessMultiplier = 0.8;
	this.rain = 0.0;
	hrt.prefab.rfx.RendererFX.call(this,parent);
};
prefab.RainRoughness.__name__ = "prefab.RainRoughness";
prefab.RainRoughness.__super__ = hrt.prefab.rfx.RendererFX;
prefab.RainRoughness.prototype = $extend(hrt.prefab.rfx.RendererFX.prototype,{
	shader: null
	,rain: null
	,roughnessMultiplier: null
	,makeInstance: function(ctx) {
		ctx = hrt.prefab.rfx.RendererFX.prototype.makeInstance.call(this,ctx);
		this.shader = new prefab.RainRoughnessShader();
		this.updateInstance(ctx);
		return ctx;
	}
	,begin: function(r,step) {
		if(step == h3d.impl.Step.Lighting) {
			var ctx = r.ctx;
			var meteo = true;
			this.shader.roughnessMultiplier__ = meteo ? 1.0 + (this.roughnessMultiplier - 1.0) * this.rain : 1.0;
			var pbrRenderer = r;
			if(pbrRenderer.slides.getShader(prefab.RainRoughnessShader) == null) {
				pbrRenderer.slides.addShader(this.shader);
			}
			if(pbrRenderer.pbrOut.getShader(prefab.RainRoughnessShader) == null) {
				pbrRenderer.pbrOut.addShader(this.shader);
			}
		}
	}
	,edit: function(ctx) {
		ctx.properties.add($("\r\n\t\t\t<dl>\r\n\t\t\t\t<div class=\"group\" name=\"Lighting\">\r\n\t\t\t\t\t<dt>Roughness multiplier</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"roughnessMultiplier\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"group\" name=\"Debug\">\r\n\t\t\t\t\t<dt>Rain</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"rain\"/></dd>\r\n\t\t\t\t</div>\r\n\t\t\t</dl>\r\n\t\t"),this);
		hrt.prefab.rfx.RendererFX.prototype.edit.call(this,ctx);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.saveSerializedFields.call(this,obj);
		if(this.roughnessMultiplier != 0.8) {
			obj.roughnessMultiplier = this.roughnessMultiplier;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.loadSerializedFields.call(this,obj);
		this.roughnessMultiplier = obj.roughnessMultiplier == null ? 0.8 : obj.roughnessMultiplier;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.rfx.RendererFX.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.roughnessMultiplier = p1.roughnessMultiplier;
	}
	,__class__: prefab.RainRoughness
});
prefab.RandomTransform = $hxClasses["prefab.RandomTransform"] = function(parent) {
	this.maxRotZ = 0.0;
	this.minRotZ = 0.0;
	this.maxRotY = 0.0;
	this.minRotY = 0.0;
	this.maxRotX = 0.0;
	this.minRotX = 0.0;
	this.maxScaleZ = 1.0;
	this.minScaleZ = 1.0;
	this.maxScaleY = 1.0;
	this.minScaleY = 1.0;
	this.maxScaleX = 1.0;
	this.minScaleX = 1.0;
	this.maxZ = 0.0;
	this.minZ = 0.0;
	this.maxY = 0.0;
	this.minY = 0.0;
	this.maxX = 0.0;
	this.minX = 0.0;
	hrt.prefab.Object3D.call(this,parent);
};
prefab.RandomTransform.__name__ = "prefab.RandomTransform";
prefab.RandomTransform.__super__ = hrt.prefab.Object3D;
prefab.RandomTransform.prototype = $extend(hrt.prefab.Object3D.prototype,{
	minX: null
	,maxX: null
	,minY: null
	,maxY: null
	,minZ: null
	,maxZ: null
	,minScaleX: null
	,maxScaleX: null
	,minScaleY: null
	,maxScaleY: null
	,minScaleZ: null
	,maxScaleZ: null
	,minRotX: null
	,maxRotX: null
	,minRotY: null
	,maxRotY: null
	,minRotZ: null
	,maxRotZ: null
	,makeInstance: function(ctx) {
		var ctx1 = hrt.prefab.Object3D.prototype.makeInstance.call(this,ctx);
		ctx1.local3d.name = this.name;
		var _this = ctx1.local3d;
		_this.x = 0;
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		_this.y = 0;
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		_this.z = 0;
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		var _this = ctx1.local3d;
		_this.scaleX = 1.0;
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		_this.scaleY = 1.0;
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		_this.scaleZ = 1.0;
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			_this.flags |= f;
		} else {
			_this.flags &= ~f;
		}
		ctx1.local3d.setRotation(0,0,0);
		this.updateInstance(ctx1);
		return ctx1;
	}
	,updateInstance: function(ctx,props) {
		hrt.prefab.Object3D.prototype.updateInstance.call(this,ctx,props);
		ctx.local3d.setTransform(this.getRandomTransform());
	}
	,getRandomTransform: function() {
		var tmp = prefab.RandomTransform.qRot;
		var a = this.minRotX;
		var b = this.maxRotX;
		var tmp1 = (a + Math.random() * (b - a)) * 3.14159265358979323 / 180.0;
		var a = this.minRotY;
		var b = this.maxRotY;
		var tmp2 = (a + Math.random() * (b - a)) * 3.14159265358979323 / 180.0;
		var a = this.minRotZ;
		var b = this.maxRotZ;
		tmp.initRotation(tmp1,tmp2,(a + Math.random() * (b - a)) * 3.14159265358979323 / 180.0);
		prefab.RandomTransform.qRot.toMatrix(prefab.RandomTransform.mat);
		var a = this.minScaleX;
		var b = this.maxScaleX;
		var scaleX = a + Math.random() * (b - a);
		prefab.RandomTransform.mat._11 *= scaleX;
		prefab.RandomTransform.mat._12 *= scaleX;
		prefab.RandomTransform.mat._13 *= scaleX;
		var a = this.minScaleY;
		var b = this.maxScaleY;
		var scaleY = a + Math.random() * (b - a);
		prefab.RandomTransform.mat._21 *= scaleY;
		prefab.RandomTransform.mat._22 *= scaleY;
		prefab.RandomTransform.mat._23 *= scaleY;
		var a = this.minScaleZ;
		var b = this.maxScaleZ;
		var scaleZ = a + Math.random() * (b - a);
		prefab.RandomTransform.mat._31 *= scaleZ;
		prefab.RandomTransform.mat._32 *= scaleZ;
		prefab.RandomTransform.mat._33 *= scaleZ;
		var a = this.minX;
		var b = this.maxX;
		var tmp = a + Math.random() * (b - a);
		prefab.RandomTransform.mat._41 = tmp;
		var a = this.minY;
		var b = this.maxY;
		var tmp = a + Math.random() * (b - a);
		prefab.RandomTransform.mat._42 = tmp;
		var a = this.minZ;
		var b = this.maxZ;
		var tmp = a + Math.random() * (b - a);
		prefab.RandomTransform.mat._43 = tmp;
		return prefab.RandomTransform.mat;
	}
	,edit: function(ctx) {
		var _gthis = this;
		var props = ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Debug\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t<dt>Refresh Button</dt><dd><input class=\"preview\" type=\"button\" value=\"(ಠ_ಠ)\" /></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Position\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>X Min</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"minX\"/></dd>\r\n\t\t\t\t\t<dt>X Max</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"maxX\"/></dd>\r\n\t\t\t\t\t<dt>Y Min</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"minY\"/></dd>\r\n\t\t\t\t\t<dt>Y Max</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"maxY\"/></dd>\r\n\t\t\t\t\t<dt>Z Min</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"minZ\"/></dd>\r\n\t\t\t\t\t<dt>Z Max</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"maxZ\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Scale\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>X Min</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"minScaleX\"/></dd>\r\n\t\t\t\t\t<dt>X Max</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"maxScaleX\"/></dd>\r\n\t\t\t\t\t<dt>Y Min</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"minScaleY\"/></dd>\r\n\t\t\t\t\t<dt>Y Max</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"maxScaleY\"/></dd>\r\n\t\t\t\t\t<dt>Z Min</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"minScaleZ\"/></dd>\r\n\t\t\t\t\t<dt>Z Max</dt><dd><input type=\"range\" min=\"-10\" max=\"10\" field=\"maxScaleZ\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Rotation\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>X Min</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"minRotX\"/></dd>\r\n\t\t\t\t\t<dt>X Max</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"maxRotX\"/></dd>\r\n\t\t\t\t\t<dt>Y Min</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"minRotY\"/></dd>\r\n\t\t\t\t\t<dt>Y Max</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"maxRotY\"/></dd>\r\n\t\t\t\t\t<dt>Z Min</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"minRotZ\"/></dd>\r\n\t\t\t\t\t<dt>Z Max</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"maxRotZ\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
		props.find(".preview").click(function(e) {
			ctx.onChange(_gthis,null);
		});
	}
	,getHideProps: function() {
		return { icon : "paint-brush", name : "RandomTransform"};
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.minX != 0.0) {
			obj.minX = this.minX;
		}
		if(this.maxX != 0.0) {
			obj.maxX = this.maxX;
		}
		if(this.minY != 0.0) {
			obj.minY = this.minY;
		}
		if(this.maxY != 0.0) {
			obj.maxY = this.maxY;
		}
		if(this.minZ != 0.0) {
			obj.minZ = this.minZ;
		}
		if(this.maxZ != 0.0) {
			obj.maxZ = this.maxZ;
		}
		if(this.minScaleX != 1.0) {
			obj.minScaleX = this.minScaleX;
		}
		if(this.maxScaleX != 1.0) {
			obj.maxScaleX = this.maxScaleX;
		}
		if(this.minScaleY != 1.0) {
			obj.minScaleY = this.minScaleY;
		}
		if(this.maxScaleY != 1.0) {
			obj.maxScaleY = this.maxScaleY;
		}
		if(this.minScaleZ != 1.0) {
			obj.minScaleZ = this.minScaleZ;
		}
		if(this.maxScaleZ != 1.0) {
			obj.maxScaleZ = this.maxScaleZ;
		}
		if(this.minRotX != 0.0) {
			obj.minRotX = this.minRotX;
		}
		if(this.maxRotX != 0.0) {
			obj.maxRotX = this.maxRotX;
		}
		if(this.minRotY != 0.0) {
			obj.minRotY = this.minRotY;
		}
		if(this.maxRotY != 0.0) {
			obj.maxRotY = this.maxRotY;
		}
		if(this.minRotZ != 0.0) {
			obj.minRotZ = this.minRotZ;
		}
		if(this.maxRotZ != 0.0) {
			obj.maxRotZ = this.maxRotZ;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.minX = obj.minX == null ? 0.0 : obj.minX;
		this.maxX = obj.maxX == null ? 0.0 : obj.maxX;
		this.minY = obj.minY == null ? 0.0 : obj.minY;
		this.maxY = obj.maxY == null ? 0.0 : obj.maxY;
		this.minZ = obj.minZ == null ? 0.0 : obj.minZ;
		this.maxZ = obj.maxZ == null ? 0.0 : obj.maxZ;
		this.minScaleX = obj.minScaleX == null ? 1.0 : obj.minScaleX;
		this.maxScaleX = obj.maxScaleX == null ? 1.0 : obj.maxScaleX;
		this.minScaleY = obj.minScaleY == null ? 1.0 : obj.minScaleY;
		this.maxScaleY = obj.maxScaleY == null ? 1.0 : obj.maxScaleY;
		this.minScaleZ = obj.minScaleZ == null ? 1.0 : obj.minScaleZ;
		this.maxScaleZ = obj.maxScaleZ == null ? 1.0 : obj.maxScaleZ;
		this.minRotX = obj.minRotX == null ? 0.0 : obj.minRotX;
		this.maxRotX = obj.maxRotX == null ? 0.0 : obj.maxRotX;
		this.minRotY = obj.minRotY == null ? 0.0 : obj.minRotY;
		this.maxRotY = obj.maxRotY == null ? 0.0 : obj.maxRotY;
		this.minRotZ = obj.minRotZ == null ? 0.0 : obj.minRotZ;
		this.maxRotZ = obj.maxRotZ == null ? 0.0 : obj.maxRotZ;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.minX = p1.minX;
		this.maxX = p1.maxX;
		this.minY = p1.minY;
		this.maxY = p1.maxY;
		this.minZ = p1.minZ;
		this.maxZ = p1.maxZ;
		this.minScaleX = p1.minScaleX;
		this.maxScaleX = p1.maxScaleX;
		this.minScaleY = p1.minScaleY;
		this.maxScaleY = p1.maxScaleY;
		this.minScaleZ = p1.minScaleZ;
		this.maxScaleZ = p1.maxScaleZ;
		this.minRotX = p1.minRotX;
		this.maxRotX = p1.maxRotX;
		this.minRotY = p1.minRotY;
		this.maxRotY = p1.maxRotY;
		this.minRotZ = p1.minRotZ;
		this.maxRotZ = p1.maxRotZ;
	}
	,__class__: prefab.RandomTransform
});
prefab.RiverShader = $hxClasses["prefab.RiverShader"] = function() {
	this.foamNoiseIntensity__ = 0;
	this.foamNoiseScale__ = 0;
	this.foamNoiseTextureSize__ = new h3d.Vector();
	this.foamThickness__ = 0;
	this.foamSpeed__ = 0;
	this.foamRange__ = 0;
	this.foamScale__ = 0;
	this.foamColor__ = new h3d.Vector();
	this.secondWaveSpeed__ = 0;
	this.secondWaveRotate__ = new h3d.Vector();
	this.secondWaveScaleY__ = 0;
	this.secondWaveScaleX__ = 0;
	this.secondWaveIntensity__ = 0;
	this.waveSpeed__ = 0;
	this.waveRotate__ = new h3d.Vector();
	this.waveScaleY__ = 0;
	this.waveScaleX__ = 0;
	this.waveIntensity__ = 0;
	this.colorNoiseStrength__ = 0;
	this.colorNoiseScaleY__ = 0;
	this.colorNoiseScaleX__ = 0;
	this.maxDepth__ = 0;
	this.opacityPower__ = 0;
	this.roughness__ = 0;
	this.deepWaterColor__ = new h3d.Vector();
	this.middleWaterColor__ = new h3d.Vector();
	this.nearWaterColor__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
prefab.RiverShader.__name__ = "prefab.RiverShader";
prefab.RiverShader._SHADER = null;
prefab.RiverShader.__super__ = hxsl.Shader;
prefab.RiverShader.prototype = $extend(hxsl.Shader.prototype,{
	nearWaterColor__: null
	,get_nearWaterColor: function() {
		return this.nearWaterColor__;
	}
	,set_nearWaterColor: function(_v) {
		return this.nearWaterColor__ = _v;
	}
	,middleWaterColor__: null
	,get_middleWaterColor: function() {
		return this.middleWaterColor__;
	}
	,set_middleWaterColor: function(_v) {
		return this.middleWaterColor__ = _v;
	}
	,deepWaterColor__: null
	,get_deepWaterColor: function() {
		return this.deepWaterColor__;
	}
	,set_deepWaterColor: function(_v) {
		return this.deepWaterColor__ = _v;
	}
	,roughness__: null
	,get_roughness: function() {
		return this.roughness__;
	}
	,set_roughness: function(_v) {
		return this.roughness__ = _v;
	}
	,opacityPower__: null
	,get_opacityPower: function() {
		return this.opacityPower__;
	}
	,set_opacityPower: function(_v) {
		return this.opacityPower__ = _v;
	}
	,maxDepth__: null
	,get_maxDepth: function() {
		return this.maxDepth__;
	}
	,set_maxDepth: function(_v) {
		return this.maxDepth__ = _v;
	}
	,colorNoiseTexture__: null
	,get_colorNoiseTexture: function() {
		return this.colorNoiseTexture__;
	}
	,set_colorNoiseTexture: function(_v) {
		return this.colorNoiseTexture__ = _v;
	}
	,colorNoiseScaleX__: null
	,get_colorNoiseScaleX: function() {
		return this.colorNoiseScaleX__;
	}
	,set_colorNoiseScaleX: function(_v) {
		return this.colorNoiseScaleX__ = _v;
	}
	,colorNoiseScaleY__: null
	,get_colorNoiseScaleY: function() {
		return this.colorNoiseScaleY__;
	}
	,set_colorNoiseScaleY: function(_v) {
		return this.colorNoiseScaleY__ = _v;
	}
	,colorNoiseStrength__: null
	,get_colorNoiseStrength: function() {
		return this.colorNoiseStrength__;
	}
	,set_colorNoiseStrength: function(_v) {
		return this.colorNoiseStrength__ = _v;
	}
	,normalMap__: null
	,get_normalMap: function() {
		return this.normalMap__;
	}
	,set_normalMap: function(_v) {
		return this.normalMap__ = _v;
	}
	,waveIntensity__: null
	,get_waveIntensity: function() {
		return this.waveIntensity__;
	}
	,set_waveIntensity: function(_v) {
		return this.waveIntensity__ = _v;
	}
	,waveScaleX__: null
	,get_waveScaleX: function() {
		return this.waveScaleX__;
	}
	,set_waveScaleX: function(_v) {
		return this.waveScaleX__ = _v;
	}
	,waveScaleY__: null
	,get_waveScaleY: function() {
		return this.waveScaleY__;
	}
	,set_waveScaleY: function(_v) {
		return this.waveScaleY__ = _v;
	}
	,waveRotate__: null
	,get_waveRotate: function() {
		return this.waveRotate__;
	}
	,set_waveRotate: function(_v) {
		return this.waveRotate__ = _v;
	}
	,waveSpeed__: null
	,get_waveSpeed: function() {
		return this.waveSpeed__;
	}
	,set_waveSpeed: function(_v) {
		return this.waveSpeed__ = _v;
	}
	,secondWaveIntensity__: null
	,get_secondWaveIntensity: function() {
		return this.secondWaveIntensity__;
	}
	,set_secondWaveIntensity: function(_v) {
		return this.secondWaveIntensity__ = _v;
	}
	,secondWaveScaleX__: null
	,get_secondWaveScaleX: function() {
		return this.secondWaveScaleX__;
	}
	,set_secondWaveScaleX: function(_v) {
		return this.secondWaveScaleX__ = _v;
	}
	,secondWaveScaleY__: null
	,get_secondWaveScaleY: function() {
		return this.secondWaveScaleY__;
	}
	,set_secondWaveScaleY: function(_v) {
		return this.secondWaveScaleY__ = _v;
	}
	,secondWaveRotate__: null
	,get_secondWaveRotate: function() {
		return this.secondWaveRotate__;
	}
	,set_secondWaveRotate: function(_v) {
		return this.secondWaveRotate__ = _v;
	}
	,secondWaveSpeed__: null
	,get_secondWaveSpeed: function() {
		return this.secondWaveSpeed__;
	}
	,set_secondWaveSpeed: function(_v) {
		return this.secondWaveSpeed__ = _v;
	}
	,foamTexture__: null
	,get_foamTexture: function() {
		return this.foamTexture__;
	}
	,set_foamTexture: function(_v) {
		return this.foamTexture__ = _v;
	}
	,foamColor__: null
	,get_foamColor: function() {
		return this.foamColor__;
	}
	,set_foamColor: function(_v) {
		return this.foamColor__ = _v;
	}
	,foamScale__: null
	,get_foamScale: function() {
		return this.foamScale__;
	}
	,set_foamScale: function(_v) {
		return this.foamScale__ = _v;
	}
	,foamRange__: null
	,get_foamRange: function() {
		return this.foamRange__;
	}
	,set_foamRange: function(_v) {
		return this.foamRange__ = _v;
	}
	,foamSpeed__: null
	,get_foamSpeed: function() {
		return this.foamSpeed__;
	}
	,set_foamSpeed: function(_v) {
		return this.foamSpeed__ = _v;
	}
	,foamThickness__: null
	,get_foamThickness: function() {
		return this.foamThickness__;
	}
	,set_foamThickness: function(_v) {
		return this.foamThickness__ = _v;
	}
	,foamNoiseTexture__: null
	,get_foamNoiseTexture: function() {
		return this.foamNoiseTexture__;
	}
	,set_foamNoiseTexture: function(_v) {
		return this.foamNoiseTexture__ = _v;
	}
	,foamNoiseTextureSize__: null
	,get_foamNoiseTextureSize: function() {
		return this.foamNoiseTextureSize__;
	}
	,set_foamNoiseTextureSize: function(_v) {
		return this.foamNoiseTextureSize__ = _v;
	}
	,foamNoiseScale__: null
	,get_foamNoiseScale: function() {
		return this.foamNoiseScale__;
	}
	,set_foamNoiseScale: function(_v) {
		return this.foamNoiseScale__ = _v;
	}
	,foamNoiseIntensity__: null
	,get_foamNoiseIntensity: function() {
		return this.foamNoiseIntensity__;
	}
	,set_foamNoiseIntensity: function(_v) {
		return this.foamNoiseIntensity__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.nearWaterColor__;
		case 1:
			return this.middleWaterColor__;
		case 2:
			return this.deepWaterColor__;
		case 3:
			return this.roughness__;
		case 4:
			return this.opacityPower__;
		case 5:
			return this.maxDepth__;
		case 6:
			return this.colorNoiseTexture__;
		case 7:
			return this.colorNoiseScaleX__;
		case 8:
			return this.colorNoiseScaleY__;
		case 9:
			return this.colorNoiseStrength__;
		case 10:
			return this.normalMap__;
		case 11:
			return this.waveIntensity__;
		case 12:
			return this.waveScaleX__;
		case 13:
			return this.waveScaleY__;
		case 14:
			return this.waveRotate__;
		case 15:
			return this.waveSpeed__;
		case 16:
			return this.secondWaveIntensity__;
		case 17:
			return this.secondWaveScaleX__;
		case 18:
			return this.secondWaveScaleY__;
		case 19:
			return this.secondWaveRotate__;
		case 20:
			return this.secondWaveSpeed__;
		case 21:
			return this.foamTexture__;
		case 22:
			return this.foamColor__;
		case 23:
			return this.foamScale__;
		case 24:
			return this.foamRange__;
		case 25:
			return this.foamSpeed__;
		case 26:
			return this.foamThickness__;
		case 27:
			return this.foamNoiseTexture__;
		case 28:
			return this.foamNoiseTextureSize__;
		case 29:
			return this.foamNoiseScale__;
		case 30:
			return this.foamNoiseIntensity__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 3:
			return this.roughness__;
		case 4:
			return this.opacityPower__;
		case 5:
			return this.maxDepth__;
		case 7:
			return this.colorNoiseScaleX__;
		case 8:
			return this.colorNoiseScaleY__;
		case 9:
			return this.colorNoiseStrength__;
		case 11:
			return this.waveIntensity__;
		case 12:
			return this.waveScaleX__;
		case 13:
			return this.waveScaleY__;
		case 15:
			return this.waveSpeed__;
		case 16:
			return this.secondWaveIntensity__;
		case 17:
			return this.secondWaveScaleX__;
		case 18:
			return this.secondWaveScaleY__;
		case 20:
			return this.secondWaveSpeed__;
		case 23:
			return this.foamScale__;
		case 24:
			return this.foamRange__;
		case 25:
			return this.foamSpeed__;
		case 26:
			return this.foamThickness__;
		case 29:
			return this.foamNoiseScale__;
		case 30:
			return this.foamNoiseIntensity__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.RiverShader.prototype);
		s.shader = this.shader;
		s.nearWaterColor__ = this.nearWaterColor__;
		s.middleWaterColor__ = this.middleWaterColor__;
		s.deepWaterColor__ = this.deepWaterColor__;
		s.roughness__ = this.roughness__;
		s.opacityPower__ = this.opacityPower__;
		s.maxDepth__ = this.maxDepth__;
		s.colorNoiseTexture__ = this.colorNoiseTexture__;
		s.colorNoiseScaleX__ = this.colorNoiseScaleX__;
		s.colorNoiseScaleY__ = this.colorNoiseScaleY__;
		s.colorNoiseStrength__ = this.colorNoiseStrength__;
		s.normalMap__ = this.normalMap__;
		s.waveIntensity__ = this.waveIntensity__;
		s.waveScaleX__ = this.waveScaleX__;
		s.waveScaleY__ = this.waveScaleY__;
		s.waveRotate__ = this.waveRotate__;
		s.waveSpeed__ = this.waveSpeed__;
		s.secondWaveIntensity__ = this.secondWaveIntensity__;
		s.secondWaveScaleX__ = this.secondWaveScaleX__;
		s.secondWaveScaleY__ = this.secondWaveScaleY__;
		s.secondWaveRotate__ = this.secondWaveRotate__;
		s.secondWaveSpeed__ = this.secondWaveSpeed__;
		s.foamTexture__ = this.foamTexture__;
		s.foamColor__ = this.foamColor__;
		s.foamScale__ = this.foamScale__;
		s.foamRange__ = this.foamRange__;
		s.foamSpeed__ = this.foamSpeed__;
		s.foamThickness__ = this.foamThickness__;
		s.foamNoiseTexture__ = this.foamNoiseTexture__;
		s.foamNoiseTextureSize__ = this.foamNoiseTextureSize__;
		s.foamNoiseScale__ = this.foamNoiseScale__;
		s.foamNoiseIntensity__ = this.foamNoiseIntensity__;
		return s;
	}
	,__class__: prefab.RiverShader
	,__properties__: {set_foamNoiseIntensity:"set_foamNoiseIntensity",get_foamNoiseIntensity:"get_foamNoiseIntensity",set_foamNoiseScale:"set_foamNoiseScale",get_foamNoiseScale:"get_foamNoiseScale",set_foamNoiseTextureSize:"set_foamNoiseTextureSize",get_foamNoiseTextureSize:"get_foamNoiseTextureSize",set_foamNoiseTexture:"set_foamNoiseTexture",get_foamNoiseTexture:"get_foamNoiseTexture",set_foamThickness:"set_foamThickness",get_foamThickness:"get_foamThickness",set_foamSpeed:"set_foamSpeed",get_foamSpeed:"get_foamSpeed",set_foamRange:"set_foamRange",get_foamRange:"get_foamRange",set_foamScale:"set_foamScale",get_foamScale:"get_foamScale",set_foamColor:"set_foamColor",get_foamColor:"get_foamColor",set_foamTexture:"set_foamTexture",get_foamTexture:"get_foamTexture",set_secondWaveSpeed:"set_secondWaveSpeed",get_secondWaveSpeed:"get_secondWaveSpeed",set_secondWaveRotate:"set_secondWaveRotate",get_secondWaveRotate:"get_secondWaveRotate",set_secondWaveScaleY:"set_secondWaveScaleY",get_secondWaveScaleY:"get_secondWaveScaleY",set_secondWaveScaleX:"set_secondWaveScaleX",get_secondWaveScaleX:"get_secondWaveScaleX",set_secondWaveIntensity:"set_secondWaveIntensity",get_secondWaveIntensity:"get_secondWaveIntensity",set_waveSpeed:"set_waveSpeed",get_waveSpeed:"get_waveSpeed",set_waveRotate:"set_waveRotate",get_waveRotate:"get_waveRotate",set_waveScaleY:"set_waveScaleY",get_waveScaleY:"get_waveScaleY",set_waveScaleX:"set_waveScaleX",get_waveScaleX:"get_waveScaleX",set_waveIntensity:"set_waveIntensity",get_waveIntensity:"get_waveIntensity",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",set_colorNoiseStrength:"set_colorNoiseStrength",get_colorNoiseStrength:"get_colorNoiseStrength",set_colorNoiseScaleY:"set_colorNoiseScaleY",get_colorNoiseScaleY:"get_colorNoiseScaleY",set_colorNoiseScaleX:"set_colorNoiseScaleX",get_colorNoiseScaleX:"get_colorNoiseScaleX",set_colorNoiseTexture:"set_colorNoiseTexture",get_colorNoiseTexture:"get_colorNoiseTexture",set_maxDepth:"set_maxDepth",get_maxDepth:"get_maxDepth",set_opacityPower:"set_opacityPower",get_opacityPower:"get_opacityPower",set_roughness:"set_roughness",get_roughness:"get_roughness",set_deepWaterColor:"set_deepWaterColor",get_deepWaterColor:"get_deepWaterColor",set_middleWaterColor:"set_middleWaterColor",get_middleWaterColor:"get_middleWaterColor",set_nearWaterColor:"set_nearWaterColor",get_nearWaterColor:"get_nearWaterColor"}
});
prefab.River = $hxClasses["prefab.River"] = function(parent) {
	this.collide = true;
	this.foamNoiseIntensity = 0.0;
	this.foamNoiseScale = 1.0;
	this.foamNoise = null;
	this.foamThickness = 0.2;
	this.foamSpeed = 1.0;
	this.foamRange = 1.0;
	this.foamScale = 1.0;
	this.foamColor = 16777215;
	this.foamTexture = null;
	this.waveFoamSpeed = 0.0;
	this.waveFoamRange = 1.0;
	this.waveFoamScale = 1.0;
	this.secondWaveSpeed = 0;
	this.secondWaveRotate = 0;
	this.secondWaveScaleY = 0;
	this.secondWaveScaleX = 0;
	this.waveSpeed = 1.0;
	this.waveRotate = 0;
	this.waveScaleY = 1.0;
	this.waveScaleX = 1.0;
	this.secondWaveIntensity = 0.0;
	this.waveIntensity = 1.0;
	this.normalMap = null;
	this.colorNoiseStrength = 1.0;
	this.colorNoiseScaleY = 1.0;
	this.colorNoiseScaleX = 1.0;
	this.colorNoiseTexture = null;
	this.maxDepth = 5.0;
	this.opacityPower = 5.0;
	this.roughness = 0.0;
	this.deepWaterColor = 16777215;
	this.middleWaterColor = 16777215;
	this.nearWaterColor = 16777215;
	hrt.prefab.l3d.Polygon.call(this,parent);
};
prefab.River.__name__ = "prefab.River";
prefab.River.__super__ = hrt.prefab.l3d.Polygon;
prefab.River.prototype = $extend(hrt.prefab.l3d.Polygon.prototype,{
	riverShader: null
	,nearWaterColor: null
	,middleWaterColor: null
	,deepWaterColor: null
	,roughness: null
	,opacityPower: null
	,maxDepth: null
	,colorNoiseTexture: null
	,colorNoiseScaleX: null
	,colorNoiseScaleY: null
	,colorNoiseStrength: null
	,normalMap: null
	,waveIntensity: null
	,secondWaveIntensity: null
	,waveScaleX: null
	,waveScaleY: null
	,waveRotate: null
	,waveSpeed: null
	,secondWaveScaleX: null
	,secondWaveScaleY: null
	,secondWaveRotate: null
	,secondWaveSpeed: null
	,waveFoamScale: null
	,waveFoamRange: null
	,waveFoamSpeed: null
	,foamTexture: null
	,foamColor: null
	,foamScale: null
	,foamRange: null
	,foamSpeed: null
	,foamThickness: null
	,foamNoise: null
	,foamNoiseScale: null
	,foamNoiseIntensity: null
	,collide: null
	,makeInstance: function(ctx) {
		this.hasDebugColor = false;
		ctx = ctx.clone(this);
		var ro = new h3d.scene.Mesh(null,null,ctx.local3d);
		ro.material.passes.setPassName("decal");
		ro.material.passes.setBlendMode(h2d.BlendMode.Alpha);
		ro.material.passes.set_depthWrite(false);
		ro.material.set_castShadows(false);
		ro.material.set_receiveShadows(true);
		var depthPass = ro.material.allocPass("depthWrite",false);
		depthPass.set_depthWrite(true);
		depthPass.set_depthTest(h3d.mat.Compare.Less);
		var _this = ro.material.passes;
		var _g_l = _this.shaders;
		var _g_last = _this.parentShaders;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			depthPass.addShader(s1);
		}
		this.riverShader = new prefab.RiverShader();
		ro.material.passes.addShader(this.riverShader);
		ctx.local3d = ro;
		ctx.local3d.name = this.name;
		this.updateInstance(ctx);
		return ctx;
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.l3d.Polygon.prototype.updateInstance.call(this,ctx,propName);
		var ro = ctx.local3d;
		var ssr = ro.material.allocPass("ssr",true);
		ssr.setBlendMode(h2d.BlendMode.Alpha);
		ssr.set_depthWrite(false);
		ssr.set_depthTest(h3d.mat.Compare.LessEqual);
		var c = this.nearWaterColor;
		var s = 0.00392156862745098;
		this.riverShader.nearWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		var c = this.middleWaterColor;
		var s = 0.00392156862745098;
		this.riverShader.middleWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		var c = this.deepWaterColor;
		var s = 0.00392156862745098;
		this.riverShader.deepWaterColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		this.riverShader.roughness__ = this.roughness;
		this.riverShader.opacityPower__ = this.opacityPower;
		this.riverShader.maxDepth__ = this.maxDepth;
		this.riverShader.colorNoiseTexture__ = this.colorNoiseTexture != null ? ctx.loadTexture(this.colorNoiseTexture) : h3d.mat.Texture.fromColor(0);
		this.riverShader.colorNoiseTexture__.set_wrap(h3d.mat.Wrap.Repeat);
		this.riverShader.colorNoiseScaleX__ = this.colorNoiseScaleX;
		this.riverShader.colorNoiseScaleY__ = this.colorNoiseScaleY;
		this.riverShader.colorNoiseStrength__ = this.colorNoiseStrength;
		this.riverShader.normalMap__ = this.normalMap != null ? ctx.loadTexture(this.normalMap) : h3d.mat.Texture.fromColor(255);
		this.riverShader.normalMap__.set_wrap(h3d.mat.Wrap.Repeat);
		this.riverShader.waveIntensity__ = this.waveIntensity;
		this.riverShader.secondWaveIntensity__ = this.secondWaveIntensity;
		this.riverShader.waveScaleX__ = this.waveScaleX;
		this.riverShader.waveScaleY__ = this.waveScaleY;
		var _this = this.riverShader.waveRotate__;
		var x = Math.cos(this.waveRotate * Math.PI / 180);
		var y = Math.sin(this.waveRotate * Math.PI / 180);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		this.riverShader.waveSpeed__ = this.waveSpeed;
		this.riverShader.secondWaveScaleX__ = this.secondWaveScaleX;
		this.riverShader.secondWaveScaleY__ = this.secondWaveScaleY;
		var _this = this.riverShader.secondWaveRotate__;
		var x = Math.cos(this.secondWaveRotate * Math.PI / 180);
		var y = Math.sin(this.secondWaveRotate * Math.PI / 180);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		this.riverShader.secondWaveSpeed__ = this.secondWaveSpeed;
		this.riverShader.foamTexture__ = this.foamTexture != null ? ctx.loadTexture(this.foamTexture) : h3d.mat.Texture.fromColor(0);
		this.riverShader.foamTexture__.set_wrap(h3d.mat.Wrap.Repeat);
		var c = this.foamColor;
		var s = 0.00392156862745098;
		this.riverShader.foamColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		this.riverShader.foamScale__ = this.foamScale;
		this.riverShader.foamRange__ = this.foamRange;
		this.riverShader.foamSpeed__ = this.foamSpeed;
		this.riverShader.foamThickness__ = this.foamThickness;
		this.riverShader.foamNoiseTexture__ = this.foamNoise != null ? ctx.loadTexture(this.foamNoise) : h3d.mat.Texture.fromColor(0);
		this.riverShader.foamNoiseTexture__.set_wrap(h3d.mat.Wrap.Repeat);
		this.riverShader.foamNoiseScale__ = this.foamNoiseScale;
		this.riverShader.foamNoiseIntensity__ = this.foamNoiseIntensity;
	}
	,getHideProps: function() {
		return { icon : "square", name : "River"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.l3d.Polygon.prototype.edit.call(this,ctx);
		ctx.properties.add($("\n\t\t\t<div class=\"group\" name=\"Color\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Near Water Color </dt><dd><input type=\"color\" field=\"nearWaterColor\"/></dd>\n\t\t\t\t\t<dt>Middle Water Color</dt><dd><input type=\"color\" field=\"middleWaterColor\"/></dd>\n\t\t\t\t\t<dt>Deep Water Color</dt><dd><input type=\"color\" field=\"deepWaterColor\"/></dd>\n\t\t\t\t\t<dt>Roughness</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"roughness\"/></dd>\n\t\t\t\t\t<dt>Opacity Power</dt><dd><input type=\"range\" min=\"0\" max=\"5\" field=\"opacityPower\"/></dd>\n\t\t\t\t\t<dt>River max depth</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"maxDepth\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t\t<div class=\"group\" name=\"Color Noise\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"colorNoiseTexture\"/></dd>\n\t\t\t\t\t<dt>Scale X</dt><dd><input type=\"range\" min=\"0\" max =\"1\" field=\"colorNoiseScaleX\"/></dd>\n\t\t\t\t\t<dt>Scale Y</dt><dd><input type=\"range\" min=\"0\" max =\"1\" field=\"colorNoiseScaleY\"/></dd>\n\t\t\t\t\t<dt>Strength</dt><dd><input type=\"range\" min=\"0\" max =\"1\" field=\"colorNoiseStrength\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t\t<div class=\"group\" name=\"Wave\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>NormalMap</dt><dd><input type=\"texturepath\" field=\"normalMap\"/></dd>\n\t\t\t\t\t<dt>Wave Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"10\" field=\"waveIntensity\"/></dd>\n\t\t\t\t\t<dt>Wave Scale X</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"waveScaleX\"/></dd>\n\t\t\t\t\t<dt>Wave Scale Y</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"waveScaleY\"/></dd>\n\t\t\t\t\t<dt>Wave Rotate</dt><dd><input type=\"range\" min=\"-180\" max=\"180\" field=\"waveRotate\"/></dd>\n\t\t\t\t\t<dt>Wave Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"waveSpeed\"/></dd>\n\t\t\t\t\t<dt>Second Wave Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"secondWaveIntensity\"/></dd>\n\t\t\t\t\t<dt>2d Wave Scale X</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"secondWaveScaleX\"/></dd>\n\t\t\t\t\t<dt>2d Wave Scale Y</dt><dd><input type=\"range\" min=\"0\" max=\"4\" field=\"secondWaveScaleY\"/></dd>\n\t\t\t\t\t<dt>2d Wave Rotate</dt><dd><input type=\"range\" min=\"-180\" max=\"180\" field=\"secondWaveRotate\"/></dd>\n\t\t\t\t\t<dt>2d Wave Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"secondWaveSpeed\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t\t<div class=\"group\" name=\"Shore\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Color</dt><dd> <input type=\"color\" field=\"foamColor\"/></dd>\n\t\t\t\t\t<dt>Texture</dt><dd> <input type=\"texturepath\" field=\"foamTexture\"/></dd>\n\t\t\t\t\t<dt>Scale</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamScale\"/></dd>\n\t\t\t\t\t<dt>Thickness</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamThickness\"/></dd>\n\t\t\t\t\t<dt>Speed</dt><dd> <input type=\"range\" min=\"0\" max =\"1\" step=\"0.01\" field=\"foamSpeed\"/></dd>\n\t\t\t\t\t<dt>Range</dt><dd> <input type=\"range\" min=\"0\" max =\"10\"  field=\"foamRange\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t\t<div class=\"group\" name=\"Collisions\">\n\t\t\t\t<dl>\n\t\t\t\t\t<dt>Collide WorldMap</dt><dd><input type=\"checkbox\" field=\"collide\"/></dd>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.l3d.Polygon.prototype.saveSerializedFields.call(this,obj);
		if(this.nearWaterColor != 16777215) {
			obj.nearWaterColor = this.nearWaterColor;
		}
		if(this.middleWaterColor != 16777215) {
			obj.middleWaterColor = this.middleWaterColor;
		}
		if(this.deepWaterColor != 16777215) {
			obj.deepWaterColor = this.deepWaterColor;
		}
		if(this.roughness != 0.0) {
			obj.roughness = this.roughness;
		}
		if(this.opacityPower != 5.0) {
			obj.opacityPower = this.opacityPower;
		}
		if(this.maxDepth != 5.0) {
			obj.maxDepth = this.maxDepth;
		}
		if(this.colorNoiseTexture != null) {
			obj.colorNoiseTexture = this.colorNoiseTexture;
		}
		if(this.colorNoiseScaleX != 1.0) {
			obj.colorNoiseScaleX = this.colorNoiseScaleX;
		}
		if(this.colorNoiseScaleY != 1.0) {
			obj.colorNoiseScaleY = this.colorNoiseScaleY;
		}
		if(this.colorNoiseStrength != 1.0) {
			obj.colorNoiseStrength = this.colorNoiseStrength;
		}
		if(this.normalMap != null) {
			obj.normalMap = this.normalMap;
		}
		if(this.waveIntensity != 1.0) {
			obj.waveIntensity = this.waveIntensity;
		}
		if(this.secondWaveIntensity != 0.0) {
			obj.secondWaveIntensity = this.secondWaveIntensity;
		}
		if(this.waveScaleX != 1.0) {
			obj.waveScaleX = this.waveScaleX;
		}
		if(this.waveScaleY != 1.0) {
			obj.waveScaleY = this.waveScaleY;
		}
		if(this.waveRotate != 0) {
			obj.waveRotate = this.waveRotate;
		}
		if(this.waveSpeed != 1.0) {
			obj.waveSpeed = this.waveSpeed;
		}
		if(this.secondWaveScaleX != 0) {
			obj.secondWaveScaleX = this.secondWaveScaleX;
		}
		if(this.secondWaveScaleY != 0) {
			obj.secondWaveScaleY = this.secondWaveScaleY;
		}
		if(this.secondWaveRotate != 0) {
			obj.secondWaveRotate = this.secondWaveRotate;
		}
		if(this.secondWaveSpeed != 0) {
			obj.secondWaveSpeed = this.secondWaveSpeed;
		}
		if(this.waveFoamScale != 1.0) {
			obj.waveFoamScale = this.waveFoamScale;
		}
		if(this.waveFoamRange != 1.0) {
			obj.waveFoamRange = this.waveFoamRange;
		}
		if(this.waveFoamSpeed != 0.0) {
			obj.waveFoamSpeed = this.waveFoamSpeed;
		}
		if(this.foamTexture != null) {
			obj.foamTexture = this.foamTexture;
		}
		if(this.foamColor != 16777215) {
			obj.foamColor = this.foamColor;
		}
		if(this.foamScale != 1.0) {
			obj.foamScale = this.foamScale;
		}
		if(this.foamRange != 1.0) {
			obj.foamRange = this.foamRange;
		}
		if(this.foamSpeed != 1.0) {
			obj.foamSpeed = this.foamSpeed;
		}
		if(this.foamThickness != 0.2) {
			obj.foamThickness = this.foamThickness;
		}
		if(this.foamNoise != null) {
			obj.foamNoise = this.foamNoise;
		}
		if(this.foamNoiseScale != 1.0) {
			obj.foamNoiseScale = this.foamNoiseScale;
		}
		if(this.foamNoiseIntensity != 0.0) {
			obj.foamNoiseIntensity = this.foamNoiseIntensity;
		}
		if(this.collide != true) {
			obj.collide = this.collide;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.l3d.Polygon.prototype.loadSerializedFields.call(this,obj);
		this.nearWaterColor = obj.nearWaterColor == null ? 16777215 : obj.nearWaterColor;
		this.middleWaterColor = obj.middleWaterColor == null ? 16777215 : obj.middleWaterColor;
		this.deepWaterColor = obj.deepWaterColor == null ? 16777215 : obj.deepWaterColor;
		this.roughness = obj.roughness == null ? 0.0 : obj.roughness;
		this.opacityPower = obj.opacityPower == null ? 5.0 : obj.opacityPower;
		this.maxDepth = obj.maxDepth == null ? 5.0 : obj.maxDepth;
		this.colorNoiseTexture = obj.colorNoiseTexture == null ? null : obj.colorNoiseTexture;
		this.colorNoiseScaleX = obj.colorNoiseScaleX == null ? 1.0 : obj.colorNoiseScaleX;
		this.colorNoiseScaleY = obj.colorNoiseScaleY == null ? 1.0 : obj.colorNoiseScaleY;
		this.colorNoiseStrength = obj.colorNoiseStrength == null ? 1.0 : obj.colorNoiseStrength;
		this.normalMap = obj.normalMap == null ? null : obj.normalMap;
		this.waveIntensity = obj.waveIntensity == null ? 1.0 : obj.waveIntensity;
		this.secondWaveIntensity = obj.secondWaveIntensity == null ? 0.0 : obj.secondWaveIntensity;
		this.waveScaleX = obj.waveScaleX == null ? 1.0 : obj.waveScaleX;
		this.waveScaleY = obj.waveScaleY == null ? 1.0 : obj.waveScaleY;
		this.waveRotate = obj.waveRotate == null ? 0 : obj.waveRotate;
		this.waveSpeed = obj.waveSpeed == null ? 1.0 : obj.waveSpeed;
		this.secondWaveScaleX = obj.secondWaveScaleX == null ? 0 : obj.secondWaveScaleX;
		this.secondWaveScaleY = obj.secondWaveScaleY == null ? 0 : obj.secondWaveScaleY;
		this.secondWaveRotate = obj.secondWaveRotate == null ? 0 : obj.secondWaveRotate;
		this.secondWaveSpeed = obj.secondWaveSpeed == null ? 0 : obj.secondWaveSpeed;
		this.waveFoamScale = obj.waveFoamScale == null ? 1.0 : obj.waveFoamScale;
		this.waveFoamRange = obj.waveFoamRange == null ? 1.0 : obj.waveFoamRange;
		this.waveFoamSpeed = obj.waveFoamSpeed == null ? 0.0 : obj.waveFoamSpeed;
		this.foamTexture = obj.foamTexture == null ? null : obj.foamTexture;
		this.foamColor = obj.foamColor == null ? 16777215 : obj.foamColor;
		this.foamScale = obj.foamScale == null ? 1.0 : obj.foamScale;
		this.foamRange = obj.foamRange == null ? 1.0 : obj.foamRange;
		this.foamSpeed = obj.foamSpeed == null ? 1.0 : obj.foamSpeed;
		this.foamThickness = obj.foamThickness == null ? 0.2 : obj.foamThickness;
		this.foamNoise = obj.foamNoise == null ? null : obj.foamNoise;
		this.foamNoiseScale = obj.foamNoiseScale == null ? 1.0 : obj.foamNoiseScale;
		this.foamNoiseIntensity = obj.foamNoiseIntensity == null ? 0.0 : obj.foamNoiseIntensity;
		this.collide = obj.collide == null ? true : obj.collide;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.l3d.Polygon.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.nearWaterColor = p1.nearWaterColor;
		this.middleWaterColor = p1.middleWaterColor;
		this.deepWaterColor = p1.deepWaterColor;
		this.roughness = p1.roughness;
		this.opacityPower = p1.opacityPower;
		this.maxDepth = p1.maxDepth;
		this.colorNoiseTexture = p1.colorNoiseTexture;
		this.colorNoiseScaleX = p1.colorNoiseScaleX;
		this.colorNoiseScaleY = p1.colorNoiseScaleY;
		this.colorNoiseStrength = p1.colorNoiseStrength;
		this.normalMap = p1.normalMap;
		this.waveIntensity = p1.waveIntensity;
		this.secondWaveIntensity = p1.secondWaveIntensity;
		this.waveScaleX = p1.waveScaleX;
		this.waveScaleY = p1.waveScaleY;
		this.waveRotate = p1.waveRotate;
		this.waveSpeed = p1.waveSpeed;
		this.secondWaveScaleX = p1.secondWaveScaleX;
		this.secondWaveScaleY = p1.secondWaveScaleY;
		this.secondWaveRotate = p1.secondWaveRotate;
		this.secondWaveSpeed = p1.secondWaveSpeed;
		this.waveFoamScale = p1.waveFoamScale;
		this.waveFoamRange = p1.waveFoamRange;
		this.waveFoamSpeed = p1.waveFoamSpeed;
		this.foamTexture = p1.foamTexture;
		this.foamColor = p1.foamColor;
		this.foamScale = p1.foamScale;
		this.foamRange = p1.foamRange;
		this.foamSpeed = p1.foamSpeed;
		this.foamThickness = p1.foamThickness;
		this.foamNoise = p1.foamNoise;
		this.foamNoiseScale = p1.foamNoiseScale;
		this.foamNoiseIntensity = p1.foamNoiseIntensity;
		this.collide = p1.collide;
	}
	,__class__: prefab.River
});
prefab.SSSFleshLightingShader = $hxClasses["prefab.SSSFleshLightingShader"] = function() {
	this.maximumPerLight__ = 0;
	this.nearRatio__ = 0;
	this.threshold__ = 0;
	this.intensity__ = 0;
	this.nearColor__ = new h3d.Vector();
	this.mainColor__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
prefab.SSSFleshLightingShader.__name__ = "prefab.SSSFleshLightingShader";
prefab.SSSFleshLightingShader._SHADER = null;
prefab.SSSFleshLightingShader.__super__ = hxsl.Shader;
prefab.SSSFleshLightingShader.prototype = $extend(hxsl.Shader.prototype,{
	mainColor__: null
	,get_mainColor: function() {
		return this.mainColor__;
	}
	,set_mainColor: function(_v) {
		return this.mainColor__ = _v;
	}
	,nearColor__: null
	,get_nearColor: function() {
		return this.nearColor__;
	}
	,set_nearColor: function(_v) {
		return this.nearColor__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,threshold__: null
	,get_threshold: function() {
		return this.threshold__;
	}
	,set_threshold: function(_v) {
		return this.threshold__ = _v;
	}
	,nearRatio__: null
	,get_nearRatio: function() {
		return this.nearRatio__;
	}
	,set_nearRatio: function(_v) {
		return this.nearRatio__ = _v;
	}
	,maximumPerLight__: null
	,get_maximumPerLight: function() {
		return this.maximumPerLight__;
	}
	,set_maximumPerLight: function(_v) {
		return this.maximumPerLight__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.mainColor__;
		case 1:
			return this.nearColor__;
		case 2:
			return this.intensity__;
		case 3:
			return this.threshold__;
		case 4:
			return this.nearRatio__;
		case 5:
			return this.maximumPerLight__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.intensity__;
		case 3:
			return this.threshold__;
		case 4:
			return this.nearRatio__;
		case 5:
			return this.maximumPerLight__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.SSSFleshLightingShader.prototype);
		s.shader = this.shader;
		s.mainColor__ = this.mainColor__;
		s.nearColor__ = this.nearColor__;
		s.intensity__ = this.intensity__;
		s.threshold__ = this.threshold__;
		s.nearRatio__ = this.nearRatio__;
		s.maximumPerLight__ = this.maximumPerLight__;
		return s;
	}
	,__class__: prefab.SSSFleshLightingShader
	,__properties__: {set_maximumPerLight:"set_maximumPerLight",get_maximumPerLight:"get_maximumPerLight",set_nearRatio:"set_nearRatio",get_nearRatio:"get_nearRatio",set_threshold:"set_threshold",get_threshold:"get_threshold",set_intensity:"set_intensity",get_intensity:"get_intensity",set_nearColor:"set_nearColor",get_nearColor:"get_nearColor",set_mainColor:"set_mainColor",get_mainColor:"get_mainColor"}
});
prefab.SSSFleshLighting = $hxClasses["prefab.SSSFleshLighting"] = function(parent) {
	this.shader = new prefab.SSSFleshLightingShader();
	this.maximumPerLight = 1.0;
	this.nearRatio = 0;
	this.threshold = 0;
	this.nearColor = 15732480;
	this.mainColor = 15732480;
	hrt.prefab.rfx.RendererFX.call(this,parent);
};
prefab.SSSFleshLighting.__name__ = "prefab.SSSFleshLighting";
prefab.SSSFleshLighting.__super__ = hrt.prefab.rfx.RendererFX;
prefab.SSSFleshLighting.prototype = $extend(hrt.prefab.rfx.RendererFX.prototype,{
	mainColor: null
	,nearColor: null
	,threshold: null
	,nearRatio: null
	,maximumPerLight: null
	,shader: null
	,makeInstance: function(ctx) {
		ctx = hrt.prefab.rfx.RendererFX.prototype.makeInstance.call(this,ctx);
		this.updateInstance(ctx);
		return ctx;
	}
	,begin: function(r,step) {
		if(step == h3d.impl.Step.Lighting) {
			if(r.getLightSystem() != null) {
				var pbrLightSystem = r.getLightSystem();
				if(pbrLightSystem != null) {
					var c = this.mainColor;
					var s = 0.00392156862745098;
					this.shader.mainColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
					var c = this.nearColor;
					var s = 0.00392156862745098;
					this.shader.nearColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
					this.shader.threshold__ = this.threshold;
					this.shader.nearRatio__ = this.nearRatio;
					this.shader.maximumPerLight__ = this.maximumPerLight;
					pbrLightSystem.lightingShaders.push(this.shader);
				}
			}
		}
	}
	,edit: function(ctx) {
		var _gthis = this;
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Color\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Main color</dt><dd><input type=\"color\" field=\"mainColor\"/></dd>\r\n\t\t\t\t\t<dt>Near color</dt><dd><input type=\"color\" field=\"nearColor\"/></dd>\r\n\t\t\t\t\t<dt>Near ratio</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"nearRatio\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"SSS\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Threshold</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"threshold\"/></dd>\r\n\t\t\t\t\t<dt>Maximum per light</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"maximumPerLight\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.saveSerializedFields.call(this,obj);
		if(this.mainColor != 15732480) {
			obj.mainColor = this.mainColor;
		}
		if(this.nearColor != 15732480) {
			obj.nearColor = this.nearColor;
		}
		if(this.threshold != 0) {
			obj.threshold = this.threshold;
		}
		if(this.nearRatio != 0) {
			obj.nearRatio = this.nearRatio;
		}
		if(this.maximumPerLight != 1.0) {
			obj.maximumPerLight = this.maximumPerLight;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.loadSerializedFields.call(this,obj);
		this.mainColor = obj.mainColor == null ? 15732480 : obj.mainColor;
		this.nearColor = obj.nearColor == null ? 15732480 : obj.nearColor;
		this.threshold = obj.threshold == null ? 0 : obj.threshold;
		this.nearRatio = obj.nearRatio == null ? 0 : obj.nearRatio;
		this.maximumPerLight = obj.maximumPerLight == null ? 1.0 : obj.maximumPerLight;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.rfx.RendererFX.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.mainColor = p1.mainColor;
		this.nearColor = p1.nearColor;
		this.threshold = p1.threshold;
		this.nearRatio = p1.nearRatio;
		this.maximumPerLight = p1.maximumPerLight;
	}
	,__class__: prefab.SSSFleshLighting
});
prefab.SSSGreedyShader = $hxClasses["prefab.SSSGreedyShader"] = function() {
	this.nearRatio__ = 0;
	this.threshold__ = 0;
	this.intensity__ = 0;
	this.nearColor__ = new h3d.Vector();
	this.mainColor__ = new h3d.Vector();
	h3d.shader.pbr.DefaultForward.call(this);
};
prefab.SSSGreedyShader.__name__ = "prefab.SSSGreedyShader";
prefab.SSSGreedyShader._SHADER = null;
prefab.SSSGreedyShader.__super__ = h3d.shader.pbr.DefaultForward;
prefab.SSSGreedyShader.prototype = $extend(h3d.shader.pbr.DefaultForward.prototype,{
	mainColor__: null
	,get_mainColor: function() {
		return this.mainColor__;
	}
	,set_mainColor: function(_v) {
		return this.mainColor__ = _v;
	}
	,nearColor__: null
	,get_nearColor: function() {
		return this.nearColor__;
	}
	,set_nearColor: function(_v) {
		return this.nearColor__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,threshold__: null
	,get_threshold: function() {
		return this.threshold__;
	}
	,set_threshold: function(_v) {
		return this.threshold__ = _v;
	}
	,nearRatio__: null
	,get_nearRatio: function() {
		return this.nearRatio__;
	}
	,set_nearRatio: function(_v) {
		return this.nearRatio__ = _v;
	}
	,translucencyTexture__: null
	,get_translucencyTexture: function() {
		return this.translucencyTexture__;
	}
	,set_translucencyTexture: function(_v) {
		return this.translucencyTexture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.DIR_SHADOW_COUNT__;
		if(v >>> 5 != 0) {
			throw haxe.Exception.thrown("DIR_SHADOW_COUNT" + " is out of range " + v + ">" + 31);
		}
		this.constBits |= v;
		var v = this.POINT_SHADOW_COUNT__;
		if(v >>> 5 != 0) {
			throw haxe.Exception.thrown("POINT_SHADOW_COUNT" + " is out of range " + v + ">" + 31);
		}
		this.constBits |= v << 5;
		var v = this.SPOT_SHADOW_COUNT__;
		if(v >>> 5 != 0) {
			throw haxe.Exception.thrown("SPOT_SHADOW_COUNT" + " is out of range " + v + ">" + 31);
		}
		this.constBits |= v << 10;
		var v = this.BUFFER_SIZE__;
		if(v >>> 9 != 0) {
			throw haxe.Exception.thrown("BUFFER_SIZE" + " is out of range " + v + ">" + 511);
		}
		this.constBits |= v << 15;
		if(this.USE_INDIRECT__) {
			this.constBits |= 16777216;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.DIR_SHADOW_COUNT__;
		case 1:
			return this.POINT_SHADOW_COUNT__;
		case 2:
			return this.SPOT_SHADOW_COUNT__;
		case 3:
			return this.BUFFER_SIZE__;
		case 4:
			return this.lightInfos__;
		case 5:
			return this.dirLightCount__;
		case 6:
			return this.pointLightCount__;
		case 7:
			return this.spotLightCount__;
		case 8:
			return this.dirLightStride__;
		case 9:
			return this.pointLightStride__;
		case 10:
			return this.dirShadowMaps__;
		case 11:
			return this.pointShadowMaps__;
		case 12:
			return this.spotShadowMaps__;
		case 13:
			return this.cameraPosition__;
		case 14:
			return this.emissivePower__;
		case 15:
			return this.USE_INDIRECT__;
		case 16:
			return this.irrLut__;
		case 17:
			return this.irrDiffuse__;
		case 18:
			return this.irrSpecular__;
		case 19:
			return this.irrSpecularLevels__;
		case 20:
			return this.irrPower__;
		case 21:
			return this.irrRotation__;
		case 22:
			return this.mainColor__;
		case 23:
			return this.nearColor__;
		case 24:
			return this.intensity__;
		case 25:
			return this.threshold__;
		case 26:
			return this.nearRatio__;
		case 27:
			return this.translucencyTexture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 14:
			return this.emissivePower__;
		case 19:
			return this.irrSpecularLevels__;
		case 20:
			return this.irrPower__;
		case 24:
			return this.intensity__;
		case 25:
			return this.threshold__;
		case 26:
			return this.nearRatio__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.SSSGreedyShader.prototype);
		s.shader = this.shader;
		s.DIR_SHADOW_COUNT__ = this.DIR_SHADOW_COUNT__;
		s.POINT_SHADOW_COUNT__ = this.POINT_SHADOW_COUNT__;
		s.SPOT_SHADOW_COUNT__ = this.SPOT_SHADOW_COUNT__;
		s.BUFFER_SIZE__ = this.BUFFER_SIZE__;
		s.lightInfos__ = this.lightInfos__;
		s.dirLightCount__ = this.dirLightCount__;
		s.pointLightCount__ = this.pointLightCount__;
		s.spotLightCount__ = this.spotLightCount__;
		s.dirLightStride__ = this.dirLightStride__;
		s.pointLightStride__ = this.pointLightStride__;
		s.dirShadowMaps__ = this.dirShadowMaps__;
		s.pointShadowMaps__ = this.pointShadowMaps__;
		s.spotShadowMaps__ = this.spotShadowMaps__;
		s.cameraPosition__ = this.cameraPosition__;
		s.emissivePower__ = this.emissivePower__;
		s.USE_INDIRECT__ = this.USE_INDIRECT__;
		s.irrLut__ = this.irrLut__;
		s.irrDiffuse__ = this.irrDiffuse__;
		s.irrSpecular__ = this.irrSpecular__;
		s.irrSpecularLevels__ = this.irrSpecularLevels__;
		s.irrPower__ = this.irrPower__;
		s.irrRotation__ = this.irrRotation__;
		s.mainColor__ = this.mainColor__;
		s.nearColor__ = this.nearColor__;
		s.intensity__ = this.intensity__;
		s.threshold__ = this.threshold__;
		s.nearRatio__ = this.nearRatio__;
		s.translucencyTexture__ = this.translucencyTexture__;
		return s;
	}
	,__class__: prefab.SSSGreedyShader
	,__properties__: $extend(h3d.shader.pbr.DefaultForward.prototype.__properties__,{set_translucencyTexture:"set_translucencyTexture",get_translucencyTexture:"get_translucencyTexture",set_nearRatio:"set_nearRatio",get_nearRatio:"get_nearRatio",set_threshold:"set_threshold",get_threshold:"get_threshold",set_intensity:"set_intensity",get_intensity:"get_intensity",set_nearColor:"set_nearColor",get_nearColor:"get_nearColor",set_mainColor:"set_mainColor",get_mainColor:"get_mainColor"})
});
prefab.SSSGreedy = $hxClasses["prefab.SSSGreedy"] = function(parent) {
	this.translucencyTexture = null;
	this.nearRatio = 0;
	this.threshold = 0;
	this.intensity = 1.0;
	this.nearColor = 15732480;
	this.mainColor = 15732480;
	hrt.prefab.Shader.call(this,parent);
};
prefab.SSSGreedy.__name__ = "prefab.SSSGreedy";
prefab.SSSGreedy.__super__ = hrt.prefab.Shader;
prefab.SSSGreedy.prototype = $extend(hrt.prefab.Shader.prototype,{
	mainColor: null
	,nearColor: null
	,intensity: null
	,threshold: null
	,nearRatio: null
	,translucencyTexture: null
	,makeShader: function(ctx) {
		return new prefab.SSSGreedyShader();
	}
	,applyShader: function(obj,material,shader) {
		var p = material.allocPass("forwardAlpha",true);
		p.addShader(shader);
		p.set_enableLights(true);
		p.set_depthTest(h3d.mat.Compare.LessEqual);
		p.set_depthWrite(true);
		p.setBlendMode(h2d.BlendMode.Add);
	}
	,updateInstance: function(ctx,propName) {
		var shaderDef = this.getShaderDefinition(ctx);
		if(ctx.custom == null || shaderDef == null) {
			return;
		}
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,ctx.custom,shaderDef);
		var shader = js.Boot.__cast(ctx.custom , prefab.SSSGreedyShader);
		var c = this.mainColor;
		var s = 0.00392156862745098;
		shader.mainColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		var c = this.nearColor;
		var s = 0.00392156862745098;
		shader.nearColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		shader.intensity__ = this.intensity;
		shader.threshold__ = this.threshold;
		shader.nearRatio__ = this.nearRatio;
		shader.translucencyTexture__ = this.translucencyTexture != null ? ctx.loadTexture(this.translucencyTexture) : h3d.mat.Texture.fromColor(16777215);
	}
	,edit: function(ctx) {
		var _gthis = this;
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Color\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Near color</dt><dd><input type=\"color\" field=\"nearColor\"/></dd>\r\n\t\t\t\t\t<dt>Main color</dt><dd><input type=\"color\" field=\"mainColor\"/></dd>\r\n\t\t\t\t\t<dt>Near ratio</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"nearRatio\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"SSS\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"intensity\"/></dd>\r\n\t\t\t\t\t<dt>Threshold</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"threshold\"/></dd>\r\n\t\t\t\t\t<dt>Translucency</dt><dd><input type=\"texturepath\" field=\"translucencyTexture\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.mainColor != 15732480) {
			obj.mainColor = this.mainColor;
		}
		if(this.nearColor != 15732480) {
			obj.nearColor = this.nearColor;
		}
		if(this.intensity != 1.0) {
			obj.intensity = this.intensity;
		}
		if(this.threshold != 0) {
			obj.threshold = this.threshold;
		}
		if(this.nearRatio != 0) {
			obj.nearRatio = this.nearRatio;
		}
		if(this.translucencyTexture != null) {
			obj.translucencyTexture = this.translucencyTexture;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.mainColor = obj.mainColor == null ? 15732480 : obj.mainColor;
		this.nearColor = obj.nearColor == null ? 15732480 : obj.nearColor;
		this.intensity = obj.intensity == null ? 1.0 : obj.intensity;
		this.threshold = obj.threshold == null ? 0 : obj.threshold;
		this.nearRatio = obj.nearRatio == null ? 0 : obj.nearRatio;
		this.translucencyTexture = obj.translucencyTexture == null ? null : obj.translucencyTexture;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.mainColor = p1.mainColor;
		this.nearColor = p1.nearColor;
		this.intensity = p1.intensity;
		this.threshold = p1.threshold;
		this.nearRatio = p1.nearRatio;
		this.translucencyTexture = p1.translucencyTexture;
	}
	,__class__: prefab.SSSGreedy
});
prefab.ShadowAttenuatorShader = $hxClasses["prefab.ShadowAttenuatorShader"] = function() {
	this.shadowAttenuation__ = 0;
	hxsl.Shader.call(this);
};
prefab.ShadowAttenuatorShader.__name__ = "prefab.ShadowAttenuatorShader";
prefab.ShadowAttenuatorShader._SHADER = null;
prefab.ShadowAttenuatorShader.__super__ = hxsl.Shader;
prefab.ShadowAttenuatorShader.prototype = $extend(hxsl.Shader.prototype,{
	shadowAttenuation__: null
	,get_shadowAttenuation: function() {
		return this.shadowAttenuation__;
	}
	,set_shadowAttenuation: function(_v) {
		return this.shadowAttenuation__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.shadowAttenuation__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.shadowAttenuation__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.ShadowAttenuatorShader.prototype);
		s.shader = this.shader;
		s.shadowAttenuation__ = this.shadowAttenuation__;
		return s;
	}
	,__class__: prefab.ShadowAttenuatorShader
	,__properties__: {set_shadowAttenuation:"set_shadowAttenuation",get_shadowAttenuation:"get_shadowAttenuation"}
});
prefab.ShadowAttenuator = $hxClasses["prefab.ShadowAttenuator"] = function(parent) {
	this.shadow = 0;
	this.shader = new prefab.ShadowAttenuatorShader();
	hrt.prefab.rfx.RendererFX.call(this,parent);
	this.shadow = 0.5;
};
prefab.ShadowAttenuator.__name__ = "prefab.ShadowAttenuator";
prefab.ShadowAttenuator.__super__ = hrt.prefab.rfx.RendererFX;
prefab.ShadowAttenuator.prototype = $extend(hrt.prefab.rfx.RendererFX.prototype,{
	shader: null
	,shadow: null
	,end: function(r,step) {
		if(step == h3d.impl.Step.Shadows) {
			r.mark("ShadowAttenuator");
			this.shader.shadowAttenuation__ = 1.0 - this.shadow;
			var pbrRenderer = r;
			var pbrLightSystem = r.ctx.lightSystem;
			if(pbrLightSystem != null) {
				pbrLightSystem.lightingShaders.push(this.shader);
			}
			if(pbrRenderer.slides.getShader(prefab.ShadowAttenuatorShader) == null) {
				pbrRenderer.slides.addShader(this.shader);
			}
			if(pbrRenderer.pbrOut.getShader(prefab.ShadowAttenuatorShader) == null) {
				pbrRenderer.pbrOut.addShader(this.shader);
			}
			if(pbrRenderer.pbrLightPass.getShader(prefab.ShadowAttenuatorShader) == null) {
				pbrRenderer.pbrLightPass.addShader(this.shader);
			}
		}
		if(step == h3d.impl.Step.Overlay) {
			var pbrRenderer = r;
			pbrRenderer.pbrOut.removeShader(this.shader);
			pbrRenderer.pbrLightPass.removeShader(this.shader);
		}
	}
	,edit: function(ctx) {
		ctx.properties.add($("\r\n\t\t\t<dl>\r\n\t\t\t<dt>Shadow</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"shadow\"/></dd>\r\n\t\t\t</dl>\r\n\t\t"),this);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.saveSerializedFields.call(this,obj);
		if(this.shadow != 0) {
			obj.shadow = this.shadow;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.rfx.RendererFX.prototype.loadSerializedFields.call(this,obj);
		this.shadow = obj.shadow == null ? 0 : obj.shadow;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.rfx.RendererFX.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.shadow = p1.shadow;
	}
	,__class__: prefab.ShadowAttenuator
});
prefab.Sound = $hxClasses["prefab.Sound"] = function(parent) {
	this.event = "";
	hrt.prefab.Object3D.call(this,parent);
};
prefab.Sound.__name__ = "prefab.Sound";
prefab.Sound.__super__ = hrt.prefab.Object3D;
prefab.Sound.prototype = $extend(hrt.prefab.Object3D.prototype,{
	event: null
	,createObject: function(ctx) {
		var m = new h3d.scene.Mesh(h3d.prim.Cube.defaultUnitCube(),null,ctx.local3d);
		var _this = m.material;
		_this.set_castShadows(false);
		_this.set_receiveShadows(false);
		m.material.passes.set_culling(h3d.mat.Face.Both);
		var v = new h3d.Matrix();
		m.defaultTransform = v;
		var f = 1;
		var b = true;
		if(b) {
			m.flags |= f;
		} else {
			m.flags &= ~f;
		}
		m.defaultTransform.initScale(0.1,0.1,0.1);
		return m;
	}
	,makeInstance: function(ctx) {
		ctx = hrt.prefab.Object3D.prototype.makeInstance.call(this,ctx);
		var obj = new h2d.ObjectFollower(ctx.local3d,ctx.local2d);
		obj.horizontalAlign = h2d.FlowAlign.Middle;
		obj.followVisibility = true;
		new h2d.Bitmap(h2d.Tile.fromTexture(ctx.loadTexture("ui/Icons/prefabSoundIco.png")),obj);
		ctx.local2d = obj;
		return ctx;
	}
	,getHideProps: function() {
		return { icon : "volume-up", name : "Sound"};
	}
	,edit: function(ctx) {
		hrt.prefab.Object3D.prototype.edit.call(this,ctx);
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"Sound\">\r\n\t\t\t<dl>\r\n\t\t\t<dt>Event Name</dt><dd><input field=\"event\"/></dd>\r\n\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t"),this);
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.saveSerializedFields.call(this,obj);
		if(this.event != "") {
			obj.event = this.event;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Object3D.prototype.loadSerializedFields.call(this,obj);
		this.event = obj.event == null ? "" : obj.event;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Object3D.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.event = p1.event;
	}
	,__class__: prefab.Sound
});
prefab.TattooShader = $hxClasses["prefab.TattooShader"] = function() {
	this.color__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
prefab.TattooShader.__name__ = "prefab.TattooShader";
prefab.TattooShader._SHADER = null;
prefab.TattooShader.__super__ = hxsl.Shader;
prefab.TattooShader.prototype = $extend(hxsl.Shader.prototype,{
	texture__: null
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.texture__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.TattooShader.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		s.color__ = this.color__;
		return s;
	}
	,__class__: prefab.TattooShader
	,__properties__: {set_color:"set_color",get_color:"get_color",set_texture:"set_texture",get_texture:"get_texture"}
});
prefab.Tattoo = $hxClasses["prefab.Tattoo"] = function(parent) {
	this.color = 0;
	this.texture = null;
	hrt.prefab.Shader.call(this,parent);
};
prefab.Tattoo.__name__ = "prefab.Tattoo";
prefab.Tattoo.__super__ = hrt.prefab.Shader;
prefab.Tattoo.prototype = $extend(hrt.prefab.Shader.prototype,{
	texture: null
	,color: null
	,makeShader: function(ctx) {
		return new prefab.TattooShader();
	}
	,updateInstance: function(ctx,propName) {
		var shaderDef = this.getShaderDefinition(ctx);
		if(ctx.custom == null || shaderDef == null) {
			return;
		}
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,ctx.custom,shaderDef);
		var shader = js.Boot.__cast(ctx.custom , prefab.TattooShader);
		var c = this.color;
		var s = 0.00392156862745098;
		shader.color__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		shader.texture__ = this.texture != null ? ctx.loadTexture(this.texture) : h3d.mat.Texture.fromColor(16777215);
	}
	,applyShader: function(obj,material,shader) {
		material.passes.addShader(shader);
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Tattoo\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Texture</dt><dd><input type=\"texturepath\" field=\"texture\"/></dd>\r\n\t\t\t\t\t<dt>Color</dt><dd><input type=\"color\"\" field=\"color\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.texture != null) {
			obj.texture = this.texture;
		}
		if(this.color != 0) {
			obj.color = this.color;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.texture = obj.texture == null ? null : obj.texture;
		this.color = obj.color == null ? 0 : obj.color;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.texture = p1.texture;
		this.color = p1.color;
	}
	,__class__: prefab.Tattoo
});
if(!prefab.terrain) prefab.terrain = {};
prefab.terrain.TerrainBlendShadowPass = $hxClasses["prefab.terrain.TerrainBlendShadowPass"] = function() {
	hxsl.Shader.call(this);
};
prefab.terrain.TerrainBlendShadowPass.__name__ = "prefab.terrain.TerrainBlendShadowPass";
prefab.terrain.TerrainBlendShadowPass._SHADER = null;
prefab.terrain.TerrainBlendShadowPass.__super__ = hxsl.Shader;
prefab.terrain.TerrainBlendShadowPass.prototype = $extend(hxsl.Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: prefab.terrain.TerrainBlendShadowPass
});
prefab.TerrainAlphaBlend = $hxClasses["prefab.TerrainAlphaBlend"] = function(parent) {
	this.DEBUG = false;
	this.range = 0.25;
	hrt.prefab.Shader.call(this,parent);
};
prefab.TerrainAlphaBlend.__name__ = "prefab.TerrainAlphaBlend";
prefab.TerrainAlphaBlend.__super__ = hrt.prefab.Shader;
prefab.TerrainAlphaBlend.prototype = $extend(hrt.prefab.Shader.prototype,{
	range: null
	,DEBUG: null
	,makeInstance: function(ctx) {
		var ctx1 = hrt.prefab.Shader.prototype.makeInstance.call(this,ctx);
		var _g = 0;
		var _g1 = ctx1.local3d.getMaterials();
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.passes.setBlendMode(h2d.BlendMode.Alpha);
		}
		return ctx1;
	}
	,makeShader: function(ctx) {
		var t = ctx.local3d.getScene().find(function(o) {
			if(((o) instanceof prefab.terrain.TerrainMesh)) {
				return o;
			} else {
				return null;
			}
		});
		if(t != null) {
			var terrain = t;
			var s = new prefab.terrain.TerrainBlend();
			terrain.syncTerrainAlphaBlendShader(s);
			return s;
		}
		return new prefab.terrain.TerrainBlend();
	}
	,applyShader: function(obj,material,shader) {
		hrt.prefab.Shader.prototype.applyShader.call(this,obj,material,shader);
		var sh = material.getPass("shadow");
		if(sh != null) {
			sh.addShader(prefab.TerrainAlphaBlend.terrainBlendShadowPass);
		}
	}
	,syncShaderVars: function(shader,shaderDef) {
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,shader,shaderDef);
		var s = shader;
		s.range__ = this.range;
		s.constModified = true;
		s.DEBUG__ = this.DEBUG;
	}
	,getHideProps: function() {
		return { icon : "cog", name : "TerrainAlphaBlend", allowParent : function(p) {
			if(!(p.to(hrt.prefab.Object2D) != null || p.to(hrt.prefab.Object3D) != null)) {
				return p.to(hrt.prefab.Material) != null;
			} else {
				return true;
			}
		}};
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Terrain Alpha Blend\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Range</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"range\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Debug\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Debug</dt><dd><input type=\"checkbox\" field=\"DEBUG\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.range != 0.25) {
			obj.range = this.range;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.range = obj.range == null ? 0.25 : obj.range;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.range = p1.range;
	}
	,__class__: prefab.TerrainAlphaBlend
});
prefab.TerrainColor = $hxClasses["prefab.TerrainColor"] = function(parent) {
	this.DEBUG = false;
	this.range = 0.5;
	hrt.prefab.Shader.call(this,parent);
};
prefab.TerrainColor.__name__ = "prefab.TerrainColor";
prefab.TerrainColor.__super__ = hrt.prefab.Shader;
prefab.TerrainColor.prototype = $extend(hrt.prefab.Shader.prototype,{
	range: null
	,DEBUG: null
	,makeShader: function(ctx) {
		var t = ctx.local3d.getScene().find(function(o) {
			if(((o) instanceof prefab.terrain.TerrainMesh)) {
				return o;
			} else {
				return null;
			}
		});
		if(t != null) {
			var terrain = t;
			var s = new prefab.terrain.TerrainColorNormalShader();
			terrain.syncTerrainColorShader(s);
			return s;
		}
		return new prefab.terrain.TerrainColorNormalShader();
	}
	,syncShaderVars: function(shader,shaderDef) {
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,shader,shaderDef);
		var s = shader;
		s.range__ = this.range;
		s.constModified = true;
		s.DEBUG__ = this.DEBUG;
	}
	,getHideProps: function() {
		return { icon : "cog", name : "TerrainColor", allowParent : function(p) {
			if(!(p.to(hrt.prefab.Object2D) != null || p.to(hrt.prefab.Object3D) != null)) {
				return p.to(hrt.prefab.Material) != null;
			} else {
				return true;
			}
		}};
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Terrain Color\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Range</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"range\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Debug\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Debug</dt><dd><input type=\"checkbox\" field=\"DEBUG\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.range != 0.5) {
			obj.range = this.range;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.range = obj.range == null ? 0.5 : obj.range;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.range = p1.range;
	}
	,__class__: prefab.TerrainColor
});
prefab.TerrainPathShader = $hxClasses["prefab.TerrainPathShader"] = function() {
	this.scale__ = 0;
	this.noiseScale__ = 0;
	hxsl.Shader.call(this);
};
prefab.TerrainPathShader.__name__ = "prefab.TerrainPathShader";
prefab.TerrainPathShader._SHADER = null;
prefab.TerrainPathShader.__super__ = hxsl.Shader;
prefab.TerrainPathShader.prototype = $extend(hxsl.Shader.prototype,{
	COLOR_ONLY__: null
	,get_COLOR_ONLY: function() {
		return this.COLOR_ONLY__;
	}
	,set_COLOR_ONLY: function(_v) {
		this.constModified = true;
		return this.COLOR_ONLY__ = _v;
	}
	,albedoTexture__: null
	,get_albedoTexture: function() {
		return this.albedoTexture__;
	}
	,set_albedoTexture: function(_v) {
		return this.albedoTexture__ = _v;
	}
	,normalTexture__: null
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,noise__: null
	,get_noise: function() {
		return this.noise__;
	}
	,set_noise: function(_v) {
		return this.noise__ = _v;
	}
	,noiseScale__: null
	,get_noiseScale: function() {
		return this.noiseScale__;
	}
	,set_noiseScale: function(_v) {
		return this.noiseScale__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.COLOR_ONLY__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.COLOR_ONLY__;
		case 1:
			return this.albedoTexture__;
		case 2:
			return this.normalTexture__;
		case 3:
			return this.noise__;
		case 4:
			return this.noiseScale__;
		case 5:
			return this.scale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 4:
			return this.noiseScale__;
		case 5:
			return this.scale__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.TerrainPathShader.prototype);
		s.shader = this.shader;
		s.COLOR_ONLY__ = this.COLOR_ONLY__;
		s.albedoTexture__ = this.albedoTexture__;
		s.normalTexture__ = this.normalTexture__;
		s.noise__ = this.noise__;
		s.noiseScale__ = this.noiseScale__;
		s.scale__ = this.scale__;
		return s;
	}
	,__class__: prefab.TerrainPathShader
	,__properties__: {set_scale:"set_scale",get_scale:"get_scale",set_noiseScale:"set_noiseScale",get_noiseScale:"get_noiseScale",set_noise:"set_noise",get_noise:"get_noise",set_normalTexture:"set_normalTexture",get_normalTexture:"get_normalTexture",set_albedoTexture:"set_albedoTexture",get_albedoTexture:"get_albedoTexture",set_COLOR_ONLY:"set_COLOR_ONLY",get_COLOR_ONLY:"get_COLOR_ONLY"}
});
prefab.TreeWindShader = $hxClasses["prefab.TreeWindShader"] = function() {
	this.zOffsetRange__ = 0;
	this.zOffsetSpeed__ = 0;
	this.zOffsetScale__ = 0;
	this.zOffsetIntensity__ = 0;
	this.leafRange__ = 0;
	this.leafIntensity__ = 0;
	this.zRange__ = 0;
	this.direction__ = new h3d.Vector();
	this.scale__ = 0;
	this.speed__ = 0;
	this.intensity__ = 0;
	this.perInstance = true;
	hxsl.Shader.call(this);
};
prefab.TreeWindShader.__name__ = "prefab.TreeWindShader";
prefab.TreeWindShader._SHADER = null;
prefab.TreeWindShader.__super__ = hxsl.Shader;
prefab.TreeWindShader.prototype = $extend(hxsl.Shader.prototype,{
	perInstance: null
	,noise__: null
	,get_noise: function() {
		return this.noise__;
	}
	,set_noise: function(_v) {
		return this.noise__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,speed__: null
	,get_speed: function() {
		return this.speed__;
	}
	,set_speed: function(_v) {
		return this.speed__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,direction__: null
	,get_direction: function() {
		return this.direction__;
	}
	,set_direction: function(_v) {
		return this.direction__ = _v;
	}
	,zRange__: null
	,get_zRange: function() {
		return this.zRange__;
	}
	,set_zRange: function(_v) {
		return this.zRange__ = _v;
	}
	,leafIntensity__: null
	,get_leafIntensity: function() {
		return this.leafIntensity__;
	}
	,set_leafIntensity: function(_v) {
		return this.leafIntensity__ = _v;
	}
	,leafRange__: null
	,get_leafRange: function() {
		return this.leafRange__;
	}
	,set_leafRange: function(_v) {
		return this.leafRange__ = _v;
	}
	,zOffsetIntensity__: null
	,get_zOffsetIntensity: function() {
		return this.zOffsetIntensity__;
	}
	,set_zOffsetIntensity: function(_v) {
		return this.zOffsetIntensity__ = _v;
	}
	,zOffsetNoise__: null
	,get_zOffsetNoise: function() {
		return this.zOffsetNoise__;
	}
	,set_zOffsetNoise: function(_v) {
		return this.zOffsetNoise__ = _v;
	}
	,zOffsetScale__: null
	,get_zOffsetScale: function() {
		return this.zOffsetScale__;
	}
	,set_zOffsetScale: function(_v) {
		return this.zOffsetScale__ = _v;
	}
	,zOffsetSpeed__: null
	,get_zOffsetSpeed: function() {
		return this.zOffsetSpeed__;
	}
	,set_zOffsetSpeed: function(_v) {
		return this.zOffsetSpeed__ = _v;
	}
	,zOffsetRange__: null
	,get_zOffsetRange: function() {
		return this.zOffsetRange__;
	}
	,set_zOffsetRange: function(_v) {
		return this.zOffsetRange__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.noise__;
		case 1:
			return this.intensity__;
		case 2:
			return this.speed__;
		case 3:
			return this.scale__;
		case 4:
			return this.direction__;
		case 5:
			return this.zRange__;
		case 6:
			return this.leafIntensity__;
		case 7:
			return this.leafRange__;
		case 8:
			return this.zOffsetIntensity__;
		case 9:
			return this.zOffsetNoise__;
		case 10:
			return this.zOffsetScale__;
		case 11:
			return this.zOffsetSpeed__;
		case 12:
			return this.zOffsetRange__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.intensity__;
		case 2:
			return this.speed__;
		case 3:
			return this.scale__;
		case 5:
			return this.zRange__;
		case 6:
			return this.leafIntensity__;
		case 7:
			return this.leafRange__;
		case 8:
			return this.zOffsetIntensity__;
		case 10:
			return this.zOffsetScale__;
		case 11:
			return this.zOffsetSpeed__;
		case 12:
			return this.zOffsetRange__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.TreeWindShader.prototype);
		s.shader = this.shader;
		s.noise__ = this.noise__;
		s.intensity__ = this.intensity__;
		s.speed__ = this.speed__;
		s.scale__ = this.scale__;
		s.direction__ = this.direction__;
		s.zRange__ = this.zRange__;
		s.leafIntensity__ = this.leafIntensity__;
		s.leafRange__ = this.leafRange__;
		s.zOffsetIntensity__ = this.zOffsetIntensity__;
		s.zOffsetNoise__ = this.zOffsetNoise__;
		s.zOffsetScale__ = this.zOffsetScale__;
		s.zOffsetSpeed__ = this.zOffsetSpeed__;
		s.zOffsetRange__ = this.zOffsetRange__;
		return s;
	}
	,__class__: prefab.TreeWindShader
	,__properties__: {set_zOffsetRange:"set_zOffsetRange",get_zOffsetRange:"get_zOffsetRange",set_zOffsetSpeed:"set_zOffsetSpeed",get_zOffsetSpeed:"get_zOffsetSpeed",set_zOffsetScale:"set_zOffsetScale",get_zOffsetScale:"get_zOffsetScale",set_zOffsetNoise:"set_zOffsetNoise",get_zOffsetNoise:"get_zOffsetNoise",set_zOffsetIntensity:"set_zOffsetIntensity",get_zOffsetIntensity:"get_zOffsetIntensity",set_leafRange:"set_leafRange",get_leafRange:"get_leafRange",set_leafIntensity:"set_leafIntensity",get_leafIntensity:"get_leafIntensity",set_zRange:"set_zRange",get_zRange:"get_zRange",set_direction:"set_direction",get_direction:"get_direction",set_scale:"set_scale",get_scale:"get_scale",set_speed:"set_speed",get_speed:"get_speed",set_intensity:"set_intensity",get_intensity:"get_intensity",set_noise:"set_noise",get_noise:"get_noise"}
});
prefab.TreeWind = $hxClasses["prefab.TreeWind"] = function(parent) {
	this.zOffsetRange = 10.0;
	this.zOffsetSpeed = 0.4;
	this.zOffsetScale = 0.5;
	this.zOffsetNoise = "prefabs/fx/wind/perlin2.jpg";
	this.zOffsetIntensity = 0.15;
	this.leafRange = 30.0;
	this.leafIntensity = 0.1;
	this.zRange = 100.0;
	this.direction = 0.0;
	this.speed = 0.1;
	this.scale = 0.02;
	this.intensity = 0.8;
	this.noise = "prefabs/fx/wind/perlin2.jpg";
	hrt.prefab.Shader.call(this,parent);
};
prefab.TreeWind.__name__ = "prefab.TreeWind";
prefab.TreeWind.__super__ = hrt.prefab.Shader;
prefab.TreeWind.prototype = $extend(hrt.prefab.Shader.prototype,{
	noise: null
	,intensity: null
	,scale: null
	,speed: null
	,direction: null
	,zRange: null
	,leafIntensity: null
	,leafRange: null
	,zOffsetIntensity: null
	,zOffsetNoise: null
	,zOffsetScale: null
	,zOffsetSpeed: null
	,zOffsetRange: null
	,makeShader: function(ctx) {
		return new prefab.TreeWindShader();
	}
	,syncShaderVars: function(shader,shaderDef) {
		hrt.prefab.Shader.prototype.syncShaderVars.call(this,shader,shaderDef);
		var tws = shader;
		if(this.noise != null) {
			tws.noise__ = hxd.res.Loader.currentInstance.load(this.noise).toTexture();
		}
		tws.intensity__ = this.intensity;
		tws.scale__ = this.scale;
		tws.speed__ = this.speed;
		var a = this.direction * 3.14159265358979323 / 180.0;
		var _this = tws.direction__;
		var x = Math.cos(a);
		var y = Math.sin(a);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		tws.zRange__ = this.zRange;
		tws.leafIntensity__ = this.leafIntensity;
		tws.leafRange__ = this.leafRange;
		if(this.zOffsetNoise != null) {
			tws.zOffsetNoise__ = hxd.res.Loader.currentInstance.load(this.zOffsetNoise).toTexture();
		}
		tws.zOffsetIntensity__ = this.zOffsetIntensity;
		tws.zOffsetScale__ = this.zOffsetScale;
		tws.zOffsetSpeed__ = this.zOffsetSpeed;
		tws.zOffsetRange__ = this.zOffsetRange;
	}
	,edit: function(ctx) {
		var _gthis = this;
		var group = $("\r\n\t\t\t<div class=\"group\" name=\"Wind\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Noise</dt><dd><input type=\"texturepath\" field=\"noise\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"scale\"/></dd>\r\n\t\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"speed\"/></dd>\r\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"intensity\"/></dd>\r\n\t\t\t\t\t<dt>Direction</dt><dd><input type=\"range\" min=\"0\" max=\"360\" field=\"direction\"/></dd>\r\n\t\t\t\t\t<dt>Z Range</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"zRange\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Leaf Wind\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"leafIntensity\"/></dd>\r\n\t\t\t\t\t<dt>Range</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"leafRange\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"group\" name=\"Leaf Z Offset\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Noise</dt><dd><input type=\"texturepath\" field=\"zOffsetNoise\"/></dd>\r\n\t\t\t\t\t<dt>Scale</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"zOffsetScale\"/></dd>\r\n\t\t\t\t\t<dt>Speed</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"zOffsetSpeed\"/></dd>\r\n\t\t\t\t\t<dt>Intensity</dt><dd><input type=\"range\" min=\"0\" max=\"1\" field=\"zOffsetIntensity\"/></dd>\r\n\t\t\t\t\t<dt>Range</dt><dd><input type=\"range\" min=\"0\" max=\"100\" field=\"zOffsetRange\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t");
		var props = ctx.properties.add(group,this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,getHideProps: function() {
		return { icon : "cog", name : "TreeWind", allowParent : function(p) {
			if(!(p.to(hrt.prefab.Object2D) != null || p.to(hrt.prefab.Object3D) != null)) {
				return p.to(hrt.prefab.Material) != null;
			} else {
				return true;
			}
		}};
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.saveSerializedFields.call(this,obj);
		if(this.noise != "prefabs/fx/wind/perlin2.jpg") {
			obj.noise = this.noise;
		}
		if(this.intensity != 0.8) {
			obj.intensity = this.intensity;
		}
		if(this.scale != 0.02) {
			obj.scale = this.scale;
		}
		if(this.speed != 0.1) {
			obj.speed = this.speed;
		}
		if(this.direction != 0.0) {
			obj.direction = this.direction;
		}
		if(this.zRange != 100.0) {
			obj.zRange = this.zRange;
		}
		if(this.leafIntensity != 0.1) {
			obj.leafIntensity = this.leafIntensity;
		}
		if(this.leafRange != 30.0) {
			obj.leafRange = this.leafRange;
		}
		if(this.zOffsetIntensity != 0.15) {
			obj.zOffsetIntensity = this.zOffsetIntensity;
		}
		if(this.zOffsetNoise != "prefabs/fx/wind/perlin2.jpg") {
			obj.zOffsetNoise = this.zOffsetNoise;
		}
		if(this.zOffsetScale != 0.5) {
			obj.zOffsetScale = this.zOffsetScale;
		}
		if(this.zOffsetSpeed != 0.4) {
			obj.zOffsetSpeed = this.zOffsetSpeed;
		}
		if(this.zOffsetRange != 10.0) {
			obj.zOffsetRange = this.zOffsetRange;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.Shader.prototype.loadSerializedFields.call(this,obj);
		this.noise = obj.noise == null ? "prefabs/fx/wind/perlin2.jpg" : obj.noise;
		this.intensity = obj.intensity == null ? 0.8 : obj.intensity;
		this.scale = obj.scale == null ? 0.02 : obj.scale;
		this.speed = obj.speed == null ? 0.1 : obj.speed;
		this.direction = obj.direction == null ? 0.0 : obj.direction;
		this.zRange = obj.zRange == null ? 100.0 : obj.zRange;
		this.leafIntensity = obj.leafIntensity == null ? 0.1 : obj.leafIntensity;
		this.leafRange = obj.leafRange == null ? 30.0 : obj.leafRange;
		this.zOffsetIntensity = obj.zOffsetIntensity == null ? 0.15 : obj.zOffsetIntensity;
		this.zOffsetNoise = obj.zOffsetNoise == null ? "prefabs/fx/wind/perlin2.jpg" : obj.zOffsetNoise;
		this.zOffsetScale = obj.zOffsetScale == null ? 0.5 : obj.zOffsetScale;
		this.zOffsetSpeed = obj.zOffsetSpeed == null ? 0.4 : obj.zOffsetSpeed;
		this.zOffsetRange = obj.zOffsetRange == null ? 10.0 : obj.zOffsetRange;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.Shader.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.noise = p1.noise;
		this.intensity = p1.intensity;
		this.scale = p1.scale;
		this.speed = p1.speed;
		this.direction = p1.direction;
		this.zRange = p1.zRange;
		this.leafIntensity = p1.leafIntensity;
		this.leafRange = p1.leafRange;
		this.zOffsetIntensity = p1.zOffsetIntensity;
		this.zOffsetNoise = p1.zOffsetNoise;
		this.zOffsetScale = p1.zOffsetScale;
		this.zOffsetSpeed = p1.zOffsetSpeed;
		this.zOffsetRange = p1.zOffsetRange;
	}
	,__class__: prefab.TreeWind
});
prefab.NormalFromHeightMap = $hxClasses["prefab.NormalFromHeightMap"] = function() {
	this.intensity__ = 0;
	this.pixelSize__ = new h3d.Vector();
	h3d.shader.ScreenShader.call(this);
};
prefab.NormalFromHeightMap.__name__ = "prefab.NormalFromHeightMap";
prefab.NormalFromHeightMap._SHADER = null;
prefab.NormalFromHeightMap.__super__ = h3d.shader.ScreenShader;
prefab.NormalFromHeightMap.prototype = $extend(h3d.shader.ScreenShader.prototype,{
	pixelSize__: null
	,get_pixelSize: function() {
		return this.pixelSize__;
	}
	,set_pixelSize: function(_v) {
		return this.pixelSize__ = _v;
	}
	,heightMap__: null
	,get_heightMap: function() {
		return this.heightMap__;
	}
	,set_heightMap: function(_v) {
		return this.heightMap__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.pixelSize__;
		case 2:
			return this.heightMap__;
		case 3:
			return this.intensity__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 3:
			return this.intensity__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.NormalFromHeightMap.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.pixelSize__ = this.pixelSize__;
		s.heightMap__ = this.heightMap__;
		s.intensity__ = this.intensity__;
		return s;
	}
	,__class__: prefab.NormalFromHeightMap
	,__properties__: $extend(h3d.shader.ScreenShader.prototype.__properties__,{set_intensity:"set_intensity",get_intensity:"get_intensity",set_heightMap:"set_heightMap",get_heightMap:"get_heightMap",set_pixelSize:"set_pixelSize",get_pixelSize:"get_pixelSize"})
});
prefab.WaterUtils = $hxClasses["prefab.WaterUtils"] = function() { };
prefab.WaterUtils.__name__ = "prefab.WaterUtils";
prefab.WaterUtils.convertHeightMapToNormalMap = function(heightmap,intensity,output) {
	var output = new h3d.mat.Texture(heightmap.width,heightmap.height,[h3d.mat.TextureFlags.Target],hxd.PixelFormat.RGBA);
	output.set_wrap(h3d.mat.Wrap.Repeat);
	var s = new prefab.NormalFromHeightMap();
	s.heightMap__ = heightmap;
	var _this = s.pixelSize__;
	var x = 1.0 / output.width;
	var y = 1.0 / output.height;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	s.intensity__ = intensity;
	h3d.pass.ScreenFx.run(s,output);
	return output;
};
prefab.WaterUtils.findTerrain = function(p,ctx) {
	return ctx.shared.find(p,hrt.prefab.l3d.HeightMap,null,true);
};
prefab.WaterUtils.getHeight = function(t,x,y) {
	if(t == null) {
		return 0.0;
	}
	var h = t.getZ(x,y);
	if(h == -Infinity) {
		return 0.0;
	}
	return h;
};
prefab.Weather = $hxClasses["prefab.Weather"] = function(r) {
	this.speed = 0.4;
	h3d.scene.Object.call(this,r);
	this.root = r;
	this.envParts = new haxe.ds.StringMap();
	this.envPartsAmount = new haxe.ds.StringMap();
	var ctx = new hrt.prefab.Context();
	ctx.local3d = r;
	ctx.shared = new hrt.prefab.ContextShared();
	var _g = hxd.Res.load("prefabs/fx/envParticles").entry.iterator();
	while(_g.i < _g.l) {
		var f = _g.a[_g.i++];
		if(f.get_extension() != "prefab") {
			continue;
		}
		var res = hxd.Res.load(f.get_path());
		var library = res.toPrefab().load();
		var o = library.make(ctx).local3d;
		var p = o.find(function(o) {
			if(((o) instanceof h3d.parts.GpuParticles)) {
				return o;
			} else {
				return null;
			}
		});
		if(p == null) {
			continue;
		}
		var p1 = p;
		p1.amount = 0;
		var f1 = 2;
		p1.flags &= ~f1;
		this.envParts.h[p1.name] = p1;
		this.envPartsAmount.h[p1.name] = { target : 0.0, curAmount : 0.0};
	}
	this.rain = this.envParts.h["rain"];
};
prefab.Weather.__name__ = "prefab.Weather";
prefab.Weather.__super__ = h3d.scene.Object;
prefab.Weather.prototype = $extend(h3d.scene.Object.prototype,{
	root: null
	,envParts: null
	,envPartsAmount: null
	,speed: null
	,rain: null
	,setAmount: function(envPartName,amount) {
		var info = this.envPartsAmount.h[envPartName];
		if(info != null) {
			info.target = amount;
		}
	}
	,loadPartData: function(f) {
		var pdata = JSON.parse(f.getText());
		return pdata;
	}
	,sync: function(ctx) {
		h3d.scene.Object.prototype.sync.call(this,ctx);
		var camPos = ctx.camera.pos;
		var _this = ctx.camera.target;
		var v = ctx.camera.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var _this_w = w;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x * k;
		var y = _this_y * k;
		var z = _this_z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var camDir_x = x;
		var camDir_y = y;
		var camDir_z = z;
		var camDir_w = 1.;
		var _this = ctx.camera.up;
		var x = _this.y * camDir_z - _this.z * camDir_y;
		var y = _this.z * camDir_x - _this.x * camDir_z;
		var z = _this.x * camDir_y - _this.y * camDir_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var right_x = x;
		var right_y = y;
		var right_z = z;
		var right_w = w;
		var x = 0;
		var y = 0;
		var z = 1;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = 1.;
		var x = right_y * v_z - right_z * v_y;
		var y = right_z * v_x - right_x * v_z;
		var z = right_x * v_y - right_y * v_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var front_x = x;
		var front_y = y;
		var front_z = z;
		var front_w = w;
		var amount = ctx.elapsedTime * this.speed;
		var h = this.envPartsAmount.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			var info = this.envPartsAmount.h[k];
			var f = info.curAmount - info.target;
			if((f < 0 ? -f : f) <= amount) {
				info.curAmount = info.target;
			} else {
				var f1 = amount * (info.curAmount > info.target ? -1 : 1);
				info.curAmount += f1 < 0. ? 0. : f1 > 1. ? 1. : f1;
			}
			var emitter = this.envParts.h[k];
			emitter.amount = info.curAmount;
			var b = emitter.amount > 0;
			var f2 = 2;
			if(b) {
				emitter.flags |= f2;
			} else {
				emitter.flags &= ~f2;
			}
			if((emitter.flags & 2) != 0) {
				var _this = emitter.bounds;
				var dist = (_this.xMax - _this.xMin) * 0.8;
				var x = front_x;
				var y = front_y;
				var z = front_z;
				var w = front_w;
				if(w == null) {
					w = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var offset_x = x;
				var offset_y = y;
				var offset_z = z;
				var offset_w = w;
				offset_x *= dist;
				offset_y *= dist;
				offset_z *= dist;
				var x1 = camPos.x + offset_x;
				var y1 = camPos.y + offset_y;
				var z1 = camPos.z + offset_z;
				var w1 = camPos.w + offset_w;
				if(w1 == null) {
					w1 = 1.;
				}
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var emitterPos_x = x1;
				var emitterPos_y = y1;
				var emitterPos_z = z1;
				var emitterPos_w = w1;
				var x2 = emitterPos_x;
				var y2 = emitterPos_y;
				var z2 = emitterPos_z;
				emitter.x = x2;
				var f3 = 1;
				var b1 = true;
				if(b1) {
					emitter.flags |= f3;
				} else {
					emitter.flags &= ~f3;
				}
				emitter.y = y2;
				var f4 = 1;
				var b2 = true;
				if(b2) {
					emitter.flags |= f4;
				} else {
					emitter.flags &= ~f4;
				}
				emitter.z = z2;
				var f5 = 1;
				var b3 = true;
				if(b3) {
					emitter.flags |= f5;
				} else {
					emitter.flags &= ~f5;
				}
				var f6 = 1;
				var b4 = true;
				if(b4) {
					emitter.flags |= f6;
				} else {
					emitter.flags &= ~f6;
				}
			}
		}
	}
	,__class__: prefab.Weather
});
prefab.ZDecalShader = $hxClasses["prefab.ZDecalShader"] = function() {
	this.GAMMA_CORRECT__ = false;
	this.zColor__ = new h3d.Vector();
	h3d.shader.pbr.DecalPBR.call(this);
};
prefab.ZDecalShader.__name__ = "prefab.ZDecalShader";
prefab.ZDecalShader._SHADER = null;
prefab.ZDecalShader.__super__ = h3d.shader.pbr.DecalPBR;
prefab.ZDecalShader.prototype = $extend(h3d.shader.pbr.DecalPBR.prototype,{
	zColor__: null
	,get_zColor: function() {
		return this.zColor__;
	}
	,set_zColor: function(_v) {
		return this.zColor__ = _v;
	}
	,GAMMA_CORRECT__: null
	,get_GAMMA_CORRECT: function() {
		return this.GAMMA_CORRECT__;
	}
	,set_GAMMA_CORRECT: function(_v) {
		this.constModified = true;
		return this.GAMMA_CORRECT__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.CENTERED__) {
			this.constBits |= 1;
		}
		if(this.USE_ALBEDO__) {
			this.constBits |= 2;
		}
		if(this.USE_NORMAL__) {
			this.constBits |= 4;
		}
		if(this.GAMMA_CORRECT__) {
			this.constBits |= 512;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.CENTERED__;
		case 1:
			return this.USE_ALBEDO__;
		case 2:
			return this.USE_NORMAL__;
		case 3:
			return this.albedoStrength__;
		case 4:
			return this.normalStrength__;
		case 5:
			return this.pbrStrength__;
		case 6:
			return this.emissiveStrength__;
		case 7:
			return this.normal__;
		case 8:
			return this.tangent__;
		case 9:
			return this.fadePower__;
		case 10:
			return this.fadeStart__;
		case 11:
			return this.fadeEnd__;
		case 12:
			return this.albedoTexture__;
		case 13:
			return this.normalTexture__;
		case 14:
			return this.pbrTexture__;
		case 15:
			return this.zColor__;
		case 16:
			return this.GAMMA_CORRECT__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 3:
			return this.albedoStrength__;
		case 4:
			return this.normalStrength__;
		case 5:
			return this.pbrStrength__;
		case 6:
			return this.emissiveStrength__;
		case 9:
			return this.fadePower__;
		case 10:
			return this.fadeStart__;
		case 11:
			return this.fadeEnd__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.ZDecalShader.prototype);
		s.shader = this.shader;
		s.CENTERED__ = this.CENTERED__;
		s.USE_ALBEDO__ = this.USE_ALBEDO__;
		s.USE_NORMAL__ = this.USE_NORMAL__;
		s.albedoStrength__ = this.albedoStrength__;
		s.normalStrength__ = this.normalStrength__;
		s.pbrStrength__ = this.pbrStrength__;
		s.emissiveStrength__ = this.emissiveStrength__;
		s.normal__ = this.normal__;
		s.tangent__ = this.tangent__;
		s.fadePower__ = this.fadePower__;
		s.fadeStart__ = this.fadeStart__;
		s.fadeEnd__ = this.fadeEnd__;
		s.albedoTexture__ = this.albedoTexture__;
		s.normalTexture__ = this.normalTexture__;
		s.pbrTexture__ = this.pbrTexture__;
		s.zColor__ = this.zColor__;
		s.GAMMA_CORRECT__ = this.GAMMA_CORRECT__;
		return s;
	}
	,__class__: prefab.ZDecalShader
	,__properties__: $extend(h3d.shader.pbr.DecalPBR.prototype.__properties__,{set_GAMMA_CORRECT:"set_GAMMA_CORRECT",get_GAMMA_CORRECT:"get_GAMMA_CORRECT",set_zColor:"set_zColor",get_zColor:"get_zColor"})
});
prefab.ZDecal = $hxClasses["prefab.ZDecal"] = function(parent) {
	this.overlay = false;
	this.zColor = 16777215;
	this.shader = null;
	hrt.prefab.l3d.Decal.call(this,parent);
};
prefab.ZDecal.__name__ = "prefab.ZDecal";
prefab.ZDecal.__super__ = hrt.prefab.l3d.Decal;
prefab.ZDecal.prototype = $extend(hrt.prefab.l3d.Decal.prototype,{
	shader: null
	,zColor: null
	,overlay: null
	,save: function() {
		var obj = hrt.prefab.l3d.Decal.prototype.save.call(this);
		return obj;
	}
	,load: function(obj) {
		hrt.prefab.l3d.Decal.prototype.load.call(this,obj);
	}
	,makeInstance: function(ctx) {
		ctx = ctx.clone(this);
		var mesh = new h3d.scene.pbr.Decal(h3d.prim.Cube.defaultUnitCube(),null,ctx.local3d);
		this.shader = mesh.material.passes.getShader(prefab.ZDecalShader);
		if(this.shader == null) {
			this.shader = new prefab.ZDecalShader();
			mesh.material.passes.addShader(this.shader);
		}
		mesh.material.passes.set_depthWrite(false);
		mesh.material.passes.set_depthTest(h3d.mat.Compare.LessEqual);
		mesh.material.passes.set_culling(h3d.mat.Face.Back);
		var _this = mesh.material;
		_this.set_castShadows(false);
		_this.set_receiveShadows(false);
		ctx.local3d = mesh;
		ctx.local3d.name = this.name;
		this.updateInstance(ctx);
		return ctx;
	}
	,updateRenderParams: function(ctx) {
		var value = ctx.local3d;
		var mesh = ((value) instanceof h3d.scene.Mesh) ? value : null;
		switch(this.renderMode) {
		case "AfterTonemapping":
			mesh.material.passes.setPassName("afterTonemappingDecal");
			var _this = this.shader;
			_this.constModified = true;
			_this.GAMMA_CORRECT__ = false;
			break;
		case "BeforeTonemapping":
			mesh.material.passes.setPassName("beforeTonemappingDecal");
			var _this = this.shader;
			_this.constModified = true;
			_this.GAMMA_CORRECT__ = true;
			break;
		case "Default":case "Terrain":
			mesh.material.passes.setPassName(this.renderMode == "Default" ? "decal" : "terrainDecal");
			var _this = this.shader;
			_this.constModified = true;
			_this.GAMMA_CORRECT__ = false;
			break;
		}
		if(this.overlay) {
			mesh.material.passes.setPassName("overlay");
			var _this = this.shader;
			_this.constModified = true;
			_this.GAMMA_CORRECT__ = false;
		}
		mesh.material.passes.setBlendMode(this.blendMode);
		this.shader = mesh.material.passes.getShader(prefab.ZDecalShader);
		if(this.shader != null) {
			this.shader.albedoTexture__ = this.albedoMap != null ? ctx.loadTexture(this.albedoMap) : null;
			this.shader.normalTexture__ = this.normalMap != null ? ctx.loadTexture(this.normalMap) : null;
			if(this.shader.albedoTexture__ != null) {
				this.shader.albedoTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			if(this.shader.normalTexture__ != null) {
				this.shader.normalTexture__.set_wrap(h3d.mat.Wrap.Repeat);
			}
			this.shader.albedoStrength__ = this.albedoStrength;
			this.shader.normalStrength__ = this.normalStrength;
			this.shader.pbrStrength__ = this.pbrStrength;
			this.shader.emissiveStrength__ = this.emissiveStrength;
			this.shader.fadePower__ = this.fadePower;
			this.shader.fadeStart__ = this.fadeStart * 10.0;
			this.shader.fadeEnd__ = this.fadeEnd * 10.0;
			var c = this.zColor;
			var s = 0.00392156862745098;
			this.shader.zColor__ = new h3d.Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
		}
	}
	,updateInstance: function(ctx,propName) {
		hrt.prefab.l3d.Decal.prototype.updateInstance.call(this,ctx,propName);
		this.updateRenderParams(ctx);
	}
	,getHideProps: function() {
		return { icon : "paint-brush", name : "zDecal"};
	}
	,edit: function(ctx) {
		var _gthis = this;
		hrt.prefab.l3d.Decal.prototype.edit.call(this,ctx);
		ctx.properties.add($("\r\n\t\t\t<div class=\"group\" name=\"ZDecal\">\r\n\t\t\t\t<dl>\r\n\t\t\t\t\t<dt>Depth Color</dt><dd><input type=\"color\" field=\"zColor\"/></dd>\r\n\t\t\t\t\t<dt>After GenFog</dt><dd><input type=\"checkbox\" field=\"overlay\"/></dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t"),this,function(pname) {
			ctx.onChange(_gthis,pname);
		});
	}
	,saveSerializedFields: function(obj) {
		hrt.prefab.l3d.Decal.prototype.saveSerializedFields.call(this,obj);
		if(this.zColor != 16777215) {
			obj.zColor = this.zColor;
		}
		if(this.overlay != false) {
			obj.overlay = this.overlay;
		}
	}
	,loadSerializedFields: function(obj) {
		hrt.prefab.l3d.Decal.prototype.loadSerializedFields.call(this,obj);
		this.zColor = obj.zColor == null ? 16777215 : obj.zColor;
		this.overlay = obj.overlay == null ? false : obj.overlay;
	}
	,copySerializedFields: function(p) {
		hrt.prefab.l3d.Decal.prototype.copySerializedFields.call(this,p);
		var p1 = p;
		this.zColor = p1.zColor;
		this.overlay = p1.overlay;
	}
	,__class__: prefab.ZDecal
});
prefab.terrain.Terrain = $hxClasses["prefab.terrain.Terrain"] = function(parent) {
	hrt.prefab.terrain.Terrain.call(this,parent);
};
prefab.terrain.Terrain.__name__ = "prefab.terrain.Terrain";
prefab.terrain.Terrain.__super__ = hrt.prefab.terrain.Terrain;
prefab.terrain.Terrain.prototype = $extend(hrt.prefab.terrain.Terrain.prototype,{
	createTerrain: function(ctx) {
		var t = new prefab.terrain.TerrainMesh(ctx.local3d);
		return t;
	}
	,loadTiles: function(ctx) {
		hrt.prefab.terrain.Terrain.prototype.loadTiles.call(this,ctx);
		var t = this.terrain;
		t.updateBounds();
	}
	,__class__: prefab.terrain.Terrain
});
prefab.terrain.TerrainBlend = $hxClasses["prefab.terrain.TerrainBlend"] = function() {
	this.invScale__ = new h3d.Vector();
	this.translate__ = new h3d.Vector();
	this.rotate__ = new h3d.Vector();
	this.range__ = 0;
	this.to__ = new h3d.Vector();
	this.from__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
prefab.terrain.TerrainBlend.__name__ = "prefab.terrain.TerrainBlend";
prefab.terrain.TerrainBlend._SHADER = null;
prefab.terrain.TerrainBlend.__super__ = hxsl.Shader;
prefab.terrain.TerrainBlend.prototype = $extend(hxsl.Shader.prototype,{
	from__: null
	,get_from: function() {
		return this.from__;
	}
	,set_from: function(_v) {
		return this.from__ = _v;
	}
	,to__: null
	,get_to: function() {
		return this.to__;
	}
	,set_to: function(_v) {
		return this.to__ = _v;
	}
	,normalHeightTexture__: null
	,get_normalHeightTexture: function() {
		return this.normalHeightTexture__;
	}
	,set_normalHeightTexture: function(_v) {
		return this.normalHeightTexture__ = _v;
	}
	,range__: null
	,get_range: function() {
		return this.range__;
	}
	,set_range: function(_v) {
		return this.range__ = _v;
	}
	,rotate__: null
	,get_rotate: function() {
		return this.rotate__;
	}
	,set_rotate: function(_v) {
		return this.rotate__ = _v;
	}
	,translate__: null
	,get_translate: function() {
		return this.translate__;
	}
	,set_translate: function(_v) {
		return this.translate__ = _v;
	}
	,invScale__: null
	,get_invScale: function() {
		return this.invScale__;
	}
	,set_invScale: function(_v) {
		return this.invScale__ = _v;
	}
	,DEBUG__: null
	,get_DEBUG: function() {
		return this.DEBUG__;
	}
	,set_DEBUG: function(_v) {
		this.constModified = true;
		return this.DEBUG__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.DEBUG__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.from__;
		case 1:
			return this.to__;
		case 2:
			return this.normalHeightTexture__;
		case 3:
			return this.range__;
		case 4:
			return this.rotate__;
		case 5:
			return this.translate__;
		case 6:
			return this.invScale__;
		case 7:
			return this.DEBUG__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.range__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.terrain.TerrainBlend.prototype);
		s.shader = this.shader;
		s.from__ = this.from__;
		s.to__ = this.to__;
		s.normalHeightTexture__ = this.normalHeightTexture__;
		s.range__ = this.range__;
		s.rotate__ = this.rotate__;
		s.translate__ = this.translate__;
		s.invScale__ = this.invScale__;
		s.DEBUG__ = this.DEBUG__;
		return s;
	}
	,__class__: prefab.terrain.TerrainBlend
	,__properties__: {set_DEBUG:"set_DEBUG",get_DEBUG:"get_DEBUG",set_invScale:"set_invScale",get_invScale:"get_invScale",set_translate:"set_translate",get_translate:"get_translate",set_rotate:"set_rotate",get_rotate:"get_rotate",set_range:"set_range",get_range:"get_range",set_normalHeightTexture:"set_normalHeightTexture",get_normalHeightTexture:"get_normalHeightTexture",set_to:"set_to",get_to:"get_to",set_from:"set_from",get_from:"get_from"}
});
prefab.terrain.TerrainColorNormalShader = $hxClasses["prefab.terrain.TerrainColorNormalShader"] = function() {
	this.invScale__ = new h3d.Vector();
	this.translate__ = new h3d.Vector();
	this.rotate__ = new h3d.Vector();
	this.to__ = new h3d.Vector();
	this.from__ = new h3d.Vector();
	this.range__ = 0;
	hxsl.Shader.call(this);
};
prefab.terrain.TerrainColorNormalShader.__name__ = "prefab.terrain.TerrainColorNormalShader";
prefab.terrain.TerrainColorNormalShader._SHADER = null;
prefab.terrain.TerrainColorNormalShader.__super__ = hxsl.Shader;
prefab.terrain.TerrainColorNormalShader.prototype = $extend(hxsl.Shader.prototype,{
	range__: null
	,get_range: function() {
		return this.range__;
	}
	,set_range: function(_v) {
		return this.range__ = _v;
	}
	,from__: null
	,get_from: function() {
		return this.from__;
	}
	,set_from: function(_v) {
		return this.from__ = _v;
	}
	,to__: null
	,get_to: function() {
		return this.to__;
	}
	,set_to: function(_v) {
		return this.to__ = _v;
	}
	,albedoTexture__: null
	,get_albedoTexture: function() {
		return this.albedoTexture__;
	}
	,set_albedoTexture: function(_v) {
		return this.albedoTexture__ = _v;
	}
	,normalHeightTexture__: null
	,get_normalHeightTexture: function() {
		return this.normalHeightTexture__;
	}
	,set_normalHeightTexture: function(_v) {
		return this.normalHeightTexture__ = _v;
	}
	,rotate__: null
	,get_rotate: function() {
		return this.rotate__;
	}
	,set_rotate: function(_v) {
		return this.rotate__ = _v;
	}
	,translate__: null
	,get_translate: function() {
		return this.translate__;
	}
	,set_translate: function(_v) {
		return this.translate__ = _v;
	}
	,invScale__: null
	,get_invScale: function() {
		return this.invScale__;
	}
	,set_invScale: function(_v) {
		return this.invScale__ = _v;
	}
	,DEBUG__: null
	,get_DEBUG: function() {
		return this.DEBUG__;
	}
	,set_DEBUG: function(_v) {
		this.constModified = true;
		return this.DEBUG__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.DEBUG__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.range__;
		case 1:
			return this.from__;
		case 2:
			return this.to__;
		case 3:
			return this.albedoTexture__;
		case 4:
			return this.normalHeightTexture__;
		case 5:
			return this.rotate__;
		case 6:
			return this.translate__;
		case 7:
			return this.invScale__;
		case 8:
			return this.DEBUG__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.range__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.terrain.TerrainColorNormalShader.prototype);
		s.shader = this.shader;
		s.range__ = this.range__;
		s.from__ = this.from__;
		s.to__ = this.to__;
		s.albedoTexture__ = this.albedoTexture__;
		s.normalHeightTexture__ = this.normalHeightTexture__;
		s.rotate__ = this.rotate__;
		s.translate__ = this.translate__;
		s.invScale__ = this.invScale__;
		s.DEBUG__ = this.DEBUG__;
		return s;
	}
	,__class__: prefab.terrain.TerrainColorNormalShader
	,__properties__: {set_DEBUG:"set_DEBUG",get_DEBUG:"get_DEBUG",set_invScale:"set_invScale",get_invScale:"get_invScale",set_translate:"set_translate",get_translate:"get_translate",set_rotate:"set_rotate",get_rotate:"get_rotate",set_normalHeightTexture:"set_normalHeightTexture",get_normalHeightTexture:"get_normalHeightTexture",set_albedoTexture:"set_albedoTexture",get_albedoTexture:"get_albedoTexture",set_to:"set_to",get_to:"get_to",set_from:"set_from",get_from:"get_from",set_range:"set_range",get_range:"get_range"}
});
if(!prefab.terrain._TerrainMesh) prefab.terrain._TerrainMesh = {};
prefab.terrain._TerrainMesh.TerrainBakeShader = $hxClasses["prefab.terrain._TerrainMesh.TerrainBakeShader"] = function() {
	this.to__ = new h3d.Vector();
	this.from__ = new h3d.Vector();
	this.blendSharpness__ = 0;
	this.heightBlendStrength__ = 0;
	this.tileSize__ = new h3d.Vector();
	this.tilePos__ = new h3d.Vector();
	this.secondSurfaceParams__ = [];
	this.surfaceParams__ = [];
	this.SURFACE_COUNT__ = 0;
	h3d.shader.ScreenShader.call(this);
};
prefab.terrain._TerrainMesh.TerrainBakeShader.__name__ = "prefab.terrain._TerrainMesh.TerrainBakeShader";
prefab.terrain._TerrainMesh.TerrainBakeShader._SHADER = null;
prefab.terrain._TerrainMesh.TerrainBakeShader.__super__ = h3d.shader.ScreenShader;
prefab.terrain._TerrainMesh.TerrainBakeShader.prototype = $extend(h3d.shader.ScreenShader.prototype,{
	SURFACE_COUNT__: null
	,get_SURFACE_COUNT: function() {
		return this.SURFACE_COUNT__;
	}
	,set_SURFACE_COUNT: function(_v) {
		this.constModified = true;
		return this.SURFACE_COUNT__ = _v;
	}
	,albedoTextures__: null
	,get_albedoTextures: function() {
		return this.albedoTextures__;
	}
	,set_albedoTextures: function(_v) {
		return this.albedoTextures__ = _v;
	}
	,normalTextures__: null
	,get_normalTextures: function() {
		return this.normalTextures__;
	}
	,set_normalTextures: function(_v) {
		return this.normalTextures__ = _v;
	}
	,pbrTextures__: null
	,get_pbrTextures: function() {
		return this.pbrTextures__;
	}
	,set_pbrTextures: function(_v) {
		return this.pbrTextures__ = _v;
	}
	,weightTextures__: null
	,get_weightTextures: function() {
		return this.weightTextures__;
	}
	,set_weightTextures: function(_v) {
		return this.weightTextures__ = _v;
	}
	,surfaceIndexMap__: null
	,get_surfaceIndexMap: function() {
		return this.surfaceIndexMap__;
	}
	,set_surfaceIndexMap: function(_v) {
		return this.surfaceIndexMap__ = _v;
	}
	,surfaceParams__: null
	,get_surfaceParams: function() {
		return this.surfaceParams__;
	}
	,set_surfaceParams: function(_v) {
		return this.surfaceParams__ = _v;
	}
	,secondSurfaceParams__: null
	,get_secondSurfaceParams: function() {
		return this.secondSurfaceParams__;
	}
	,set_secondSurfaceParams: function(_v) {
		return this.secondSurfaceParams__ = _v;
	}
	,tilePos__: null
	,get_tilePos: function() {
		return this.tilePos__;
	}
	,set_tilePos: function(_v) {
		return this.tilePos__ = _v;
	}
	,tileSize__: null
	,get_tileSize: function() {
		return this.tileSize__;
	}
	,set_tileSize: function(_v) {
		return this.tileSize__ = _v;
	}
	,sourceHeight__: null
	,get_sourceHeight: function() {
		return this.sourceHeight__;
	}
	,set_sourceHeight: function(_v) {
		return this.sourceHeight__ = _v;
	}
	,sourceNormal__: null
	,get_sourceNormal: function() {
		return this.sourceNormal__;
	}
	,set_sourceNormal: function(_v) {
		return this.sourceNormal__ = _v;
	}
	,heightBlendStrength__: null
	,get_heightBlendStrength: function() {
		return this.heightBlendStrength__;
	}
	,set_heightBlendStrength: function(_v) {
		return this.heightBlendStrength__ = _v;
	}
	,blendSharpness__: null
	,get_blendSharpness: function() {
		return this.blendSharpness__;
	}
	,set_blendSharpness: function(_v) {
		return this.blendSharpness__ = _v;
	}
	,source__: null
	,get_source: function() {
		return this.source__;
	}
	,set_source: function(_v) {
		return this.source__ = _v;
	}
	,from__: null
	,get_from: function() {
		return this.from__;
	}
	,set_from: function(_v) {
		return this.from__ = _v;
	}
	,to__: null
	,get_to: function() {
		return this.to__;
	}
	,set_to: function(_v) {
		return this.to__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.SURFACE_COUNT__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("SURFACE_COUNT" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.SURFACE_COUNT__;
		case 2:
			return this.albedoTextures__;
		case 3:
			return this.normalTextures__;
		case 4:
			return this.pbrTextures__;
		case 5:
			return this.weightTextures__;
		case 6:
			return this.surfaceIndexMap__;
		case 7:
			return this.surfaceParams__;
		case 8:
			return this.secondSurfaceParams__;
		case 9:
			return this.tilePos__;
		case 10:
			return this.tileSize__;
		case 11:
			return this.sourceHeight__;
		case 12:
			return this.sourceNormal__;
		case 13:
			return this.heightBlendStrength__;
		case 14:
			return this.blendSharpness__;
		case 15:
			return this.source__;
		case 16:
			return this.from__;
		case 17:
			return this.to__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 13:
			return this.heightBlendStrength__;
		case 14:
			return this.blendSharpness__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.terrain._TerrainMesh.TerrainBakeShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.SURFACE_COUNT__ = this.SURFACE_COUNT__;
		s.albedoTextures__ = this.albedoTextures__;
		s.normalTextures__ = this.normalTextures__;
		s.pbrTextures__ = this.pbrTextures__;
		s.weightTextures__ = this.weightTextures__;
		s.surfaceIndexMap__ = this.surfaceIndexMap__;
		s.surfaceParams__ = this.surfaceParams__;
		s.secondSurfaceParams__ = this.secondSurfaceParams__;
		s.tilePos__ = this.tilePos__;
		s.tileSize__ = this.tileSize__;
		s.sourceHeight__ = this.sourceHeight__;
		s.sourceNormal__ = this.sourceNormal__;
		s.heightBlendStrength__ = this.heightBlendStrength__;
		s.blendSharpness__ = this.blendSharpness__;
		s.source__ = this.source__;
		s.from__ = this.from__;
		s.to__ = this.to__;
		return s;
	}
	,__class__: prefab.terrain._TerrainMesh.TerrainBakeShader
	,__properties__: $extend(h3d.shader.ScreenShader.prototype.__properties__,{set_to:"set_to",get_to:"get_to",set_from:"set_from",get_from:"get_from",set_source:"set_source",get_source:"get_source",set_blendSharpness:"set_blendSharpness",get_blendSharpness:"get_blendSharpness",set_heightBlendStrength:"set_heightBlendStrength",get_heightBlendStrength:"get_heightBlendStrength",set_sourceNormal:"set_sourceNormal",get_sourceNormal:"get_sourceNormal",set_sourceHeight:"set_sourceHeight",get_sourceHeight:"get_sourceHeight",set_tileSize:"set_tileSize",get_tileSize:"get_tileSize",set_tilePos:"set_tilePos",get_tilePos:"get_tilePos",set_secondSurfaceParams:"set_secondSurfaceParams",get_secondSurfaceParams:"get_secondSurfaceParams",set_surfaceParams:"set_surfaceParams",get_surfaceParams:"get_surfaceParams",set_surfaceIndexMap:"set_surfaceIndexMap",get_surfaceIndexMap:"get_surfaceIndexMap",set_weightTextures:"set_weightTextures",get_weightTextures:"get_weightTextures",set_pbrTextures:"set_pbrTextures",get_pbrTextures:"get_pbrTextures",set_normalTextures:"set_normalTextures",get_normalTextures:"get_normalTextures",set_albedoTextures:"set_albedoTextures",get_albedoTextures:"get_albedoTextures",set_SURFACE_COUNT:"set_SURFACE_COUNT",get_SURFACE_COUNT:"get_SURFACE_COUNT"})
});
prefab.terrain._TerrainMesh.CopyHeightNormalShader = $hxClasses["prefab.terrain._TerrainMesh.CopyHeightNormalShader"] = function() {
	this.to__ = new h3d.Vector();
	this.from__ = new h3d.Vector();
	this.sourceHeightSize__ = new h3d.Vector();
	h3d.shader.ScreenShader.call(this);
};
prefab.terrain._TerrainMesh.CopyHeightNormalShader.__name__ = "prefab.terrain._TerrainMesh.CopyHeightNormalShader";
prefab.terrain._TerrainMesh.CopyHeightNormalShader._SHADER = null;
prefab.terrain._TerrainMesh.CopyHeightNormalShader.__super__ = h3d.shader.ScreenShader;
prefab.terrain._TerrainMesh.CopyHeightNormalShader.prototype = $extend(h3d.shader.ScreenShader.prototype,{
	sourceHeight__: null
	,get_sourceHeight: function() {
		return this.sourceHeight__;
	}
	,set_sourceHeight: function(_v) {
		return this.sourceHeight__ = _v;
	}
	,sourceHeightSize__: null
	,get_sourceHeightSize: function() {
		return this.sourceHeightSize__;
	}
	,set_sourceHeightSize: function(_v) {
		return this.sourceHeightSize__ = _v;
	}
	,sourceNormal__: null
	,get_sourceNormal: function() {
		return this.sourceNormal__;
	}
	,set_sourceNormal: function(_v) {
		return this.sourceNormal__ = _v;
	}
	,from__: null
	,get_from: function() {
		return this.from__;
	}
	,set_from: function(_v) {
		return this.from__ = _v;
	}
	,to__: null
	,get_to: function() {
		return this.to__;
	}
	,set_to: function(_v) {
		return this.to__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.sourceHeight__;
		case 2:
			return this.sourceHeightSize__;
		case 3:
			return this.sourceNormal__;
		case 4:
			return this.from__;
		case 5:
			return this.to__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(prefab.terrain._TerrainMesh.CopyHeightNormalShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.sourceHeight__ = this.sourceHeight__;
		s.sourceHeightSize__ = this.sourceHeightSize__;
		s.sourceNormal__ = this.sourceNormal__;
		s.from__ = this.from__;
		s.to__ = this.to__;
		return s;
	}
	,__class__: prefab.terrain._TerrainMesh.CopyHeightNormalShader
	,__properties__: $extend(h3d.shader.ScreenShader.prototype.__properties__,{set_to:"set_to",get_to:"get_to",set_from:"set_from",get_from:"get_from",set_sourceNormal:"set_sourceNormal",get_sourceNormal:"get_sourceNormal",set_sourceHeightSize:"set_sourceHeightSize",get_sourceHeightSize:"get_sourceHeightSize",set_sourceHeight:"set_sourceHeight",get_sourceHeight:"get_sourceHeight"})
});
prefab.terrain.TerrainMesh = $hxClasses["prefab.terrain.TerrainMesh"] = function(parent) {
	this.terrainBlendShaders = [];
	this.terrainColorShaders = [];
	this.fromTo = new h3d.Vector();
	this.pixelPerUnit = 4;
	hrt.prefab.terrain.TerrainMesh.call(this,parent);
};
prefab.terrain.TerrainMesh.__name__ = "prefab.terrain.TerrainMesh";
prefab.terrain.TerrainMesh.__super__ = hrt.prefab.terrain.TerrainMesh;
prefab.terrain.TerrainMesh.prototype = $extend(hrt.prefab.terrain.TerrainMesh.prototype,{
	pixelPerUnit: null
	,albedoTexture: null
	,normalHeightTexture: null
	,fromTo: null
	,terrainColorShaders: null
	,terrainBlendShaders: null
	,onRemove: function() {
		hrt.prefab.terrain.TerrainMesh.prototype.onRemove.call(this);
		if(this.normalHeightTexture != null) {
			this.normalHeightTexture.dispose();
		}
		this.normalHeightTexture = null;
		if(this.albedoTexture != null) {
			this.albedoTexture.dispose();
		}
		this.albedoTexture = null;
	}
	,getAlbedoTexture: function() {
		if(this.albedoTexture == null) {
			this.bake();
		}
		return this.albedoTexture;
	}
	,getNormalHeightTexture: function() {
		if(this.normalHeightTexture == null) {
			this.bake();
		}
		return this.normalHeightTexture;
	}
	,updateBounds: function() {
		var minX = 0.0;
		var maxX = 0.0;
		var minY = 0.0;
		var maxY = 0.0;
		var _g = 0;
		var _g1 = this.tiles;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var b = t.tileX;
			if(minX > b) {
				minX = b;
			}
			var b1 = t.tileX + 1;
			if(maxX < b1) {
				maxX = b1;
			}
			var b2 = t.tileY;
			if(minY > b2) {
				minY = b2;
			}
			var b3 = t.tileY + 1;
			if(maxY < b3) {
				maxY = b3;
			}
		}
		minX *= this.tileSize.x;
		maxX *= this.tileSize.y;
		minY *= this.tileSize.x;
		maxY *= this.tileSize.y;
		var _this = this.getAbsPos();
		var v = null;
		if(v == null) {
			v = new h3d.Vector();
		}
		var x = _this._41;
		var y = _this._42;
		var z = _this._43;
		var w = _this._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		v.w = w;
		var pos = v;
		var _this = this.fromTo;
		var x = minX;
		var y = minY;
		var z = maxX;
		var w = maxY;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
	}
	,sync: function(ctx) {
		hrt.prefab.terrain.TerrainMesh.prototype.sync.call(this,ctx);
		this.updateBounds();
		var angle = -this.getRotationQuat().toMatrix().getEulerAngles().z;
		if(this.parent != null) {
			angle -= this.parent.getRotationQuat().toMatrix().getEulerAngles().z;
		}
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var _g = 0;
		var _g1 = this.terrainColorShaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.normalHeightTexture__ = this.getNormalHeightTexture();
			s.albedoTexture__ = this.getAlbedoTexture();
			var _this = s.from__;
			var x = this.fromTo.x;
			var y = this.fromTo.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = s.to__;
			var x1 = this.fromTo.z;
			var y1 = this.fromTo.w;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = 0.;
			_this1.w = 1.;
			var _this2 = s.rotate__;
			var x2 = cos;
			var y2 = sin;
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = 0.;
			_this2.w = 1.;
			var _this3 = s.translate__;
			var _this4 = this.getAbsPos();
			var v = null;
			if(v == null) {
				v = new h3d.Vector();
			}
			var x3 = _this4._41;
			var y3 = _this4._42;
			var z = _this4._43;
			var w = _this4._44;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			v.x = x3;
			v.y = y3;
			v.z = z;
			v.w = w;
			var x4 = -v.x;
			var _this5 = this.getAbsPos();
			var v1 = null;
			if(v1 == null) {
				v1 = new h3d.Vector();
			}
			var x5 = _this5._41;
			var y4 = _this5._42;
			var z1 = _this5._43;
			var w1 = _this5._44;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			v1.x = x5;
			v1.y = y4;
			v1.z = z1;
			v1.w = w1;
			var y5 = -v1.y;
			if(y5 == null) {
				y5 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this3.x = x4;
			_this3.y = y5;
			_this3.z = 0.;
			_this3.w = 1.;
			var _this6 = s.invScale__;
			var x6 = 1. / this.scaleX;
			var y6 = 1. / this.scaleY;
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			_this6.x = x6;
			_this6.y = y6;
			_this6.z = 0.;
			_this6.w = 1.;
		}
		var _g = 0;
		var _g1 = this.terrainBlendShaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.normalHeightTexture__ = this.getNormalHeightTexture();
			var _this = s.from__;
			var x = this.fromTo.x;
			var y = this.fromTo.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = s.to__;
			var x1 = this.fromTo.z;
			var y1 = this.fromTo.w;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = 0.;
			_this1.w = 1.;
			var _this2 = s.rotate__;
			var x2 = cos;
			var y2 = sin;
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = 0.;
			_this2.w = 1.;
			var _this3 = s.translate__;
			var _this4 = this.getAbsPos();
			var v = null;
			if(v == null) {
				v = new h3d.Vector();
			}
			var x3 = _this4._41;
			var y3 = _this4._42;
			var z = _this4._43;
			var w = _this4._44;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			v.x = x3;
			v.y = y3;
			v.z = z;
			v.w = w;
			var x4 = -v.x;
			var _this5 = this.getAbsPos();
			var v1 = null;
			if(v1 == null) {
				v1 = new h3d.Vector();
			}
			var x5 = _this5._41;
			var y4 = _this5._42;
			var z1 = _this5._43;
			var w1 = _this5._44;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			v1.x = x5;
			v1.y = y4;
			v1.z = z1;
			v1.w = w1;
			var y5 = -v1.y;
			if(y5 == null) {
				y5 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this3.x = x4;
			_this3.y = y5;
			_this3.z = 0.;
			_this3.w = 1.;
			var _this6 = s.invScale__;
			var x6 = 1. / this.scaleX;
			var y6 = 1. / this.scaleY;
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			_this6.x = x6;
			_this6.y = y6;
			_this6.z = 0.;
			_this6.w = 1.;
		}
	}
	,syncTerrainColorShader: function(s) {
		this.terrainColorShaders.push(s);
	}
	,syncTerrainAlphaBlendShader: function(s) {
		this.terrainBlendShaders.push(s);
	}
	,bake: function() {
		if(this.albedoTexture != null) {
			this.albedoTexture.dispose();
		}
		if(this.normalHeightTexture != null) {
			this.albedoTexture.dispose();
		}
		var terrainBounds_x = 0.;
		var terrainBounds_y = 0.;
		var terrainBounds_z = 0.;
		var terrainBounds_w = 1.;
		var _g = 0;
		var _g1 = this.tiles;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var a = terrainBounds_x;
			var b = t.tileX;
			terrainBounds_x = a > b ? b : a;
			var a1 = terrainBounds_y;
			var b1 = t.tileX + 1;
			terrainBounds_y = a1 < b1 ? b1 : a1;
			var a2 = terrainBounds_z;
			var b2 = t.tileY;
			terrainBounds_z = a2 > b2 ? b2 : a2;
			var a3 = terrainBounds_w;
			var b3 = t.tileY + 1;
			terrainBounds_w = a3 < b3 ? b3 : a3;
		}
		var f = terrainBounds_x;
		var f1 = terrainBounds_y;
		var terrainWidth = (f < 0 ? -f : f) + (f1 < 0 ? -f1 : f1) | 0;
		var f = terrainBounds_z;
		var f1 = terrainBounds_w;
		var terrainHeight = (f < 0 ? -f : f) + (f1 < 0 ? -f1 : f1) | 0;
		var colorMapWidth = terrainWidth * this.tileSize.x * this.pixelPerUnit | 0;
		var colorMapHeight = terrainHeight * this.tileSize.y * this.pixelPerUnit | 0;
		this.albedoTexture = new h3d.mat.Texture(colorMapWidth,colorMapHeight,[h3d.mat.TextureFlags.Target]);
		var engine = h3d.Engine.CURRENT;
		var output = [hxsl.Output.Value("albedoOutput")];
		var ss = new h3d.pass.ScreenFx(new prefab.terrain._TerrainMesh.TerrainBakeShader(),output);
		var _this = ss.shader;
		_this.constModified = true;
		_this.SURFACE_COUNT__ = this.surfaceArray.surfaceCount;
		ss.shader.surfaceParams__ = this.surfaceArray.params;
		ss.shader.secondSurfaceParams__ = this.surfaceArray.secondParams;
		ss.shader.albedoTextures__ = this.surfaceArray.albedo;
		ss.shader.normalTextures__ = this.surfaceArray.normal;
		ss.shader.pbrTextures__ = this.surfaceArray.pbr;
		var _this = ss.shader.tileSize__;
		var x = this.tileSize.x;
		var y = this.tileSize.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		ss.shader.heightBlendStrength__ = this.heightBlendStrength;
		ss.shader.blendSharpness__ = this.blendSharpness;
		engine.pushTargets([this.albedoTexture]);
		var _g = 0;
		var _g1 = this.tiles;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			ss.shader.surfaceIndexMap__ = t.surfaceIndexMap;
			ss.shader.weightTextures__ = t.surfaceWeightArray;
			ss.shader.sourceHeight__ = t.heightMap;
			ss.shader.sourceNormal__ = t.normalMap;
			var _this = ss.shader.from__;
			var x = (t.tileX - terrainBounds_x) * (this.tileSize.x * this.pixelPerUnit) / colorMapWidth;
			var y = (t.tileY - terrainBounds_z) * (this.tileSize.y * this.pixelPerUnit) / colorMapHeight;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = ss.shader.to__;
			var x1 = ss.shader.from__.x + this.tileSize.x * this.pixelPerUnit / colorMapWidth;
			var y1 = ss.shader.from__.y + this.tileSize.y * this.pixelPerUnit / colorMapHeight;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = 0.;
			_this1.w = 1.;
			ss.render();
		}
		engine.popTarget();
		var ratio = 1.0;
		var heightMapWidth = terrainWidth * this.heightMapResolution.x * ratio | 0;
		var heightMapHeight = terrainHeight * this.heightMapResolution.y * ratio | 0;
		var x = this.heightMapResolution.x * ratio;
		var y = this.heightMapResolution.y * ratio;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var heightTileSize_x = x;
		var heightTileSize_y = y;
		this.normalHeightTexture = new h3d.mat.Texture(heightMapWidth,heightMapHeight,[h3d.mat.TextureFlags.Target],hxd.PixelFormat.RGBA32F);
		var ss = new h3d.pass.ScreenFx(new prefab.terrain._TerrainMesh.CopyHeightNormalShader());
		engine.pushTarget(this.normalHeightTexture);
		var _g = 0;
		var _g1 = this.tiles;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			ss.shader.sourceHeight__ = t.heightMap;
			var _this = ss.shader.sourceHeightSize__;
			var x = t.heightMap.width;
			var y = t.heightMap.height;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			ss.shader.sourceNormal__ = t.normalMap;
			var _this1 = ss.shader.from__;
			var x1 = (t.tileX - terrainBounds_x) * heightTileSize_x / heightMapWidth;
			var y1 = (t.tileY - terrainBounds_z) * heightTileSize_y / heightMapHeight;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = 0.;
			_this1.w = 1.;
			var _this2 = ss.shader.to__;
			var x2 = ss.shader.from__.x + heightTileSize_x / heightMapWidth;
			var y2 = ss.shader.from__.y + heightTileSize_y / heightMapHeight;
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = 0.;
			_this2.w = 1.;
			ss.render();
		}
		engine.popTarget();
	}
	,__class__: prefab.terrain.TerrainMesh
});
var shaders = shaders || {};
shaders.AOEMaskingShader = $hxClasses["shaders.AOEMaskingShader"] = function() {
	hxsl.Shader.call(this);
};
shaders.AOEMaskingShader.__name__ = "shaders.AOEMaskingShader";
shaders.AOEMaskingShader._SHADER = null;
shaders.AOEMaskingShader.__super__ = hxsl.Shader;
shaders.AOEMaskingShader.prototype = $extend(hxsl.Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: shaders.AOEMaskingShader
});
shaders.AlphaGradient = $hxClasses["shaders.AlphaGradient"] = function() {
	this.vGrad__ = 0;
	this.uGrad__ = 0;
	hxsl.Shader.call(this);
};
shaders.AlphaGradient.__name__ = "shaders.AlphaGradient";
shaders.AlphaGradient._SHADER = null;
shaders.AlphaGradient.__super__ = hxsl.Shader;
shaders.AlphaGradient.prototype = $extend(hxsl.Shader.prototype,{
	uGrad__: null
	,get_uGrad: function() {
		return this.uGrad__;
	}
	,set_uGrad: function(_v) {
		return this.uGrad__ = _v;
	}
	,vGrad__: null
	,get_vGrad: function() {
		return this.vGrad__;
	}
	,set_vGrad: function(_v) {
		return this.vGrad__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uGrad__;
		case 1:
			return this.vGrad__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.uGrad__;
		case 1:
			return this.vGrad__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.AlphaGradient.prototype);
		s.shader = this.shader;
		s.uGrad__ = this.uGrad__;
		s.vGrad__ = this.vGrad__;
		return s;
	}
	,__class__: shaders.AlphaGradient
	,__properties__: {set_vGrad:"set_vGrad",get_vGrad:"get_vGrad",set_uGrad:"set_uGrad",get_uGrad:"get_uGrad"}
});
shaders.AlphaKill = $hxClasses["shaders.AlphaKill"] = function() {
	this.useRGB__ = false;
	this.threshold__ = 1;
	hxsl.Shader.call(this);
};
shaders.AlphaKill.__name__ = "shaders.AlphaKill";
shaders.AlphaKill._SHADER = null;
shaders.AlphaKill.__super__ = hxsl.Shader;
shaders.AlphaKill.prototype = $extend(hxsl.Shader.prototype,{
	threshold__: null
	,get_threshold: function() {
		return this.threshold__;
	}
	,set_threshold: function(_v) {
		return this.threshold__ = _v;
	}
	,useRGB__: null
	,get_useRGB: function() {
		return this.useRGB__;
	}
	,set_useRGB: function(_v) {
		this.constModified = true;
		return this.useRGB__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useRGB__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.threshold__;
		case 1:
			return this.useRGB__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.threshold__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.AlphaKill.prototype);
		s.shader = this.shader;
		s.threshold__ = this.threshold__;
		s.useRGB__ = this.useRGB__;
		return s;
	}
	,__class__: shaders.AlphaKill
	,__properties__: {set_useRGB:"set_useRGB",get_useRGB:"get_useRGB",set_threshold:"set_threshold",get_threshold:"get_threshold"}
});
shaders.AlphaMap = $hxClasses["shaders.AlphaMap"] = function(texture) {
	this.vOffset__ = 0;
	this.uOffset__ = 0;
	this.vScale__ = 1;
	this.uScale__ = 1;
	this.alpha__ = 1;
	this.replace__ = false;
	this.invert__ = false;
	this.wrap__ = true;
	this.useSourceUVs__ = false;
	hxsl.Shader.call(this);
	this.texture__ = texture;
};
shaders.AlphaMap.__name__ = "shaders.AlphaMap";
shaders.AlphaMap._SHADER = null;
shaders.AlphaMap.__super__ = hxsl.Shader;
shaders.AlphaMap.prototype = $extend(hxsl.Shader.prototype,{
	useSourceUVs__: null
	,get_useSourceUVs: function() {
		return this.useSourceUVs__;
	}
	,set_useSourceUVs: function(_v) {
		this.constModified = true;
		return this.useSourceUVs__ = _v;
	}
	,wrap__: null
	,get_wrap: function() {
		return this.wrap__;
	}
	,set_wrap: function(_v) {
		this.constModified = true;
		return this.wrap__ = _v;
	}
	,invert__: null
	,get_invert: function() {
		return this.invert__;
	}
	,set_invert: function(_v) {
		this.constModified = true;
		return this.invert__ = _v;
	}
	,replace__: null
	,get_replace: function() {
		return this.replace__;
	}
	,set_replace: function(_v) {
		this.constModified = true;
		return this.replace__ = _v;
	}
	,texture__: null
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,alpha__: null
	,get_alpha: function() {
		return this.alpha__;
	}
	,set_alpha: function(_v) {
		return this.alpha__ = _v;
	}
	,uScale__: null
	,get_uScale: function() {
		return this.uScale__;
	}
	,set_uScale: function(_v) {
		return this.uScale__ = _v;
	}
	,vScale__: null
	,get_vScale: function() {
		return this.vScale__;
	}
	,set_vScale: function(_v) {
		return this.vScale__ = _v;
	}
	,uOffset__: null
	,get_uOffset: function() {
		return this.uOffset__;
	}
	,set_uOffset: function(_v) {
		return this.uOffset__ = _v;
	}
	,vOffset__: null
	,get_vOffset: function() {
		return this.vOffset__;
	}
	,set_vOffset: function(_v) {
		return this.vOffset__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useSourceUVs__) {
			this.constBits |= 1;
		}
		if(this.wrap__) {
			this.constBits |= 2;
		}
		if(this.invert__) {
			this.constBits |= 4;
		}
		if(this.replace__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.useSourceUVs__;
		case 1:
			return this.wrap__;
		case 2:
			return this.invert__;
		case 3:
			return this.replace__;
		case 4:
			return this.texture__;
		case 5:
			return this.alpha__;
		case 6:
			return this.uScale__;
		case 7:
			return this.vScale__;
		case 8:
			return this.uOffset__;
		case 9:
			return this.vOffset__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 5:
			return this.alpha__;
		case 6:
			return this.uScale__;
		case 7:
			return this.vScale__;
		case 8:
			return this.uOffset__;
		case 9:
			return this.vOffset__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.AlphaMap.prototype);
		s.shader = this.shader;
		s.useSourceUVs__ = this.useSourceUVs__;
		s.wrap__ = this.wrap__;
		s.invert__ = this.invert__;
		s.replace__ = this.replace__;
		s.texture__ = this.texture__;
		s.alpha__ = this.alpha__;
		s.uScale__ = this.uScale__;
		s.vScale__ = this.vScale__;
		s.uOffset__ = this.uOffset__;
		s.vOffset__ = this.vOffset__;
		return s;
	}
	,__class__: shaders.AlphaMap
	,__properties__: {set_vOffset:"set_vOffset",get_vOffset:"get_vOffset",set_uOffset:"set_uOffset",get_uOffset:"get_uOffset",set_vScale:"set_vScale",get_vScale:"get_vScale",set_uScale:"set_uScale",get_uScale:"get_uScale",set_alpha:"set_alpha",get_alpha:"get_alpha",set_texture:"set_texture",get_texture:"get_texture",set_replace:"set_replace",get_replace:"get_replace",set_invert:"set_invert",get_invert:"get_invert",set_wrap:"set_wrap",get_wrap:"get_wrap",set_useSourceUVs:"set_useSourceUVs",get_useSourceUVs:"get_useSourceUVs"}
});
shaders.AlphaMult = $hxClasses["shaders.AlphaMult"] = function() {
	this.alpha__ = 1;
	hxsl.Shader.call(this);
};
shaders.AlphaMult.__name__ = "shaders.AlphaMult";
shaders.AlphaMult._SHADER = null;
shaders.AlphaMult.__super__ = hxsl.Shader;
shaders.AlphaMult.prototype = $extend(hxsl.Shader.prototype,{
	alpha__: null
	,get_alpha: function() {
		return this.alpha__;
	}
	,set_alpha: function(_v) {
		return this.alpha__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.alpha__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.alpha__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.AlphaMult.prototype);
		s.shader = this.shader;
		s.alpha__ = this.alpha__;
		return s;
	}
	,__class__: shaders.AlphaMult
	,__properties__: {set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
shaders.QuadAreaDisplay = $hxClasses["shaders.QuadAreaDisplay"] = function(USE_DECAL) {
	this.length__ = 0;
	this.endWidth__ = 0;
	this.startWidth__ = 0;
	this.borderColor__ = new h3d.Vector();
	this.bodyColor__ = new h3d.Vector();
	this.baseColor__ = new h3d.Vector();
	this.borderTexHeight__ = 0;
	this.borderTiling__ = 0;
	this.bodyTexHeight__ = 0;
	this.bodyTiling__ = 0;
	this.border__ = 0;
	this.fadeEnd__ = 0;
	this.fadeStart__ = 0;
	this.fadePower__ = 0;
	this.mainAlpha__ = 0;
	hxsl.Shader.call(this);
	this.constModified = true;
	this.USE_DECAL__ = USE_DECAL;
};
shaders.QuadAreaDisplay.__name__ = "shaders.QuadAreaDisplay";
shaders.QuadAreaDisplay._SHADER = null;
shaders.QuadAreaDisplay.__super__ = hxsl.Shader;
shaders.QuadAreaDisplay.prototype = $extend(hxsl.Shader.prototype,{
	mainAlpha__: null
	,get_mainAlpha: function() {
		return this.mainAlpha__;
	}
	,set_mainAlpha: function(_v) {
		return this.mainAlpha__ = _v;
	}
	,fadePower__: null
	,get_fadePower: function() {
		return this.fadePower__;
	}
	,set_fadePower: function(_v) {
		return this.fadePower__ = _v;
	}
	,fadeStart__: null
	,get_fadeStart: function() {
		return this.fadeStart__;
	}
	,set_fadeStart: function(_v) {
		return this.fadeStart__ = _v;
	}
	,fadeEnd__: null
	,get_fadeEnd: function() {
		return this.fadeEnd__;
	}
	,set_fadeEnd: function(_v) {
		return this.fadeEnd__ = _v;
	}
	,border__: null
	,get_border: function() {
		return this.border__;
	}
	,set_border: function(_v) {
		return this.border__ = _v;
	}
	,USE_BODY__: null
	,get_USE_BODY: function() {
		return this.USE_BODY__;
	}
	,set_USE_BODY: function(_v) {
		this.constModified = true;
		return this.USE_BODY__ = _v;
	}
	,INVERT_BODY_UV__: null
	,get_INVERT_BODY_UV: function() {
		return this.INVERT_BODY_UV__;
	}
	,set_INVERT_BODY_UV: function(_v) {
		this.constModified = true;
		return this.INVERT_BODY_UV__ = _v;
	}
	,bodyTexture__: null
	,get_bodyTexture: function() {
		return this.bodyTexture__;
	}
	,set_bodyTexture: function(_v) {
		return this.bodyTexture__ = _v;
	}
	,bodyTiling__: null
	,get_bodyTiling: function() {
		return this.bodyTiling__;
	}
	,set_bodyTiling: function(_v) {
		return this.bodyTiling__ = _v;
	}
	,bodyTexHeight__: null
	,get_bodyTexHeight: function() {
		return this.bodyTexHeight__;
	}
	,set_bodyTexHeight: function(_v) {
		return this.bodyTexHeight__ = _v;
	}
	,USE_BORDER__: null
	,get_USE_BORDER: function() {
		return this.USE_BORDER__;
	}
	,set_USE_BORDER: function(_v) {
		this.constModified = true;
		return this.USE_BORDER__ = _v;
	}
	,INVERT_BORDER_UV__: null
	,get_INVERT_BORDER_UV: function() {
		return this.INVERT_BORDER_UV__;
	}
	,set_INVERT_BORDER_UV: function(_v) {
		this.constModified = true;
		return this.INVERT_BORDER_UV__ = _v;
	}
	,SCALE_BORDER_ON_RADIUS__: null
	,get_SCALE_BORDER_ON_RADIUS: function() {
		return this.SCALE_BORDER_ON_RADIUS__;
	}
	,set_SCALE_BORDER_ON_RADIUS: function(_v) {
		this.constModified = true;
		return this.SCALE_BORDER_ON_RADIUS__ = _v;
	}
	,borderTexture__: null
	,get_borderTexture: function() {
		return this.borderTexture__;
	}
	,set_borderTexture: function(_v) {
		return this.borderTexture__ = _v;
	}
	,borderTiling__: null
	,get_borderTiling: function() {
		return this.borderTiling__;
	}
	,set_borderTiling: function(_v) {
		return this.borderTiling__ = _v;
	}
	,borderTexHeight__: null
	,get_borderTexHeight: function() {
		return this.borderTexHeight__;
	}
	,set_borderTexHeight: function(_v) {
		return this.borderTexHeight__ = _v;
	}
	,baseColor__: null
	,get_baseColor: function() {
		return this.baseColor__;
	}
	,set_baseColor: function(_v) {
		return this.baseColor__ = _v;
	}
	,bodyColor__: null
	,get_bodyColor: function() {
		return this.bodyColor__;
	}
	,set_bodyColor: function(_v) {
		return this.bodyColor__ = _v;
	}
	,borderColor__: null
	,get_borderColor: function() {
		return this.borderColor__;
	}
	,set_borderColor: function(_v) {
		return this.borderColor__ = _v;
	}
	,startWidth__: null
	,get_startWidth: function() {
		return this.startWidth__;
	}
	,set_startWidth: function(_v) {
		return this.startWidth__ = _v;
	}
	,endWidth__: null
	,get_endWidth: function() {
		return this.endWidth__;
	}
	,set_endWidth: function(_v) {
		return this.endWidth__ = _v;
	}
	,length__: null
	,get_length: function() {
		return this.length__;
	}
	,set_length: function(_v) {
		return this.length__ = _v;
	}
	,USE_DECAL__: null
	,get_USE_DECAL: function() {
		return this.USE_DECAL__;
	}
	,set_USE_DECAL: function(_v) {
		this.constModified = true;
		return this.USE_DECAL__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.USE_BODY__) {
			this.constBits |= 64;
		}
		if(this.INVERT_BODY_UV__) {
			this.constBits |= 128;
		}
		if(this.USE_BORDER__) {
			this.constBits |= 256;
		}
		if(this.INVERT_BORDER_UV__) {
			this.constBits |= 512;
		}
		if(this.SCALE_BORDER_ON_RADIUS__) {
			this.constBits |= 1024;
		}
		if(this.USE_DECAL__) {
			this.constBits |= 2048;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.mainAlpha__;
		case 1:
			return this.fadePower__;
		case 2:
			return this.fadeStart__;
		case 3:
			return this.fadeEnd__;
		case 4:
			return this.border__;
		case 5:
			return this.USE_BODY__;
		case 6:
			return this.INVERT_BODY_UV__;
		case 7:
			return this.bodyTexture__;
		case 8:
			return this.bodyTiling__;
		case 9:
			return this.bodyTexHeight__;
		case 10:
			return this.USE_BORDER__;
		case 11:
			return this.INVERT_BORDER_UV__;
		case 12:
			return this.SCALE_BORDER_ON_RADIUS__;
		case 13:
			return this.borderTexture__;
		case 14:
			return this.borderTiling__;
		case 15:
			return this.borderTexHeight__;
		case 16:
			return this.baseColor__;
		case 17:
			return this.bodyColor__;
		case 18:
			return this.borderColor__;
		case 19:
			return this.startWidth__;
		case 20:
			return this.endWidth__;
		case 21:
			return this.length__;
		case 22:
			return this.USE_DECAL__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.mainAlpha__;
		case 1:
			return this.fadePower__;
		case 2:
			return this.fadeStart__;
		case 3:
			return this.fadeEnd__;
		case 4:
			return this.border__;
		case 8:
			return this.bodyTiling__;
		case 9:
			return this.bodyTexHeight__;
		case 14:
			return this.borderTiling__;
		case 15:
			return this.borderTexHeight__;
		case 19:
			return this.startWidth__;
		case 20:
			return this.endWidth__;
		case 21:
			return this.length__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.QuadAreaDisplay.prototype);
		s.shader = this.shader;
		s.mainAlpha__ = this.mainAlpha__;
		s.fadePower__ = this.fadePower__;
		s.fadeStart__ = this.fadeStart__;
		s.fadeEnd__ = this.fadeEnd__;
		s.border__ = this.border__;
		s.USE_BODY__ = this.USE_BODY__;
		s.INVERT_BODY_UV__ = this.INVERT_BODY_UV__;
		s.bodyTexture__ = this.bodyTexture__;
		s.bodyTiling__ = this.bodyTiling__;
		s.bodyTexHeight__ = this.bodyTexHeight__;
		s.USE_BORDER__ = this.USE_BORDER__;
		s.INVERT_BORDER_UV__ = this.INVERT_BORDER_UV__;
		s.SCALE_BORDER_ON_RADIUS__ = this.SCALE_BORDER_ON_RADIUS__;
		s.borderTexture__ = this.borderTexture__;
		s.borderTiling__ = this.borderTiling__;
		s.borderTexHeight__ = this.borderTexHeight__;
		s.baseColor__ = this.baseColor__;
		s.bodyColor__ = this.bodyColor__;
		s.borderColor__ = this.borderColor__;
		s.startWidth__ = this.startWidth__;
		s.endWidth__ = this.endWidth__;
		s.length__ = this.length__;
		s.USE_DECAL__ = this.USE_DECAL__;
		return s;
	}
	,__class__: shaders.QuadAreaDisplay
	,__properties__: {set_USE_DECAL:"set_USE_DECAL",get_USE_DECAL:"get_USE_DECAL",set_length:"set_length",get_length:"get_length",set_endWidth:"set_endWidth",get_endWidth:"get_endWidth",set_startWidth:"set_startWidth",get_startWidth:"get_startWidth",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_bodyColor:"set_bodyColor",get_bodyColor:"get_bodyColor",set_baseColor:"set_baseColor",get_baseColor:"get_baseColor",set_borderTexHeight:"set_borderTexHeight",get_borderTexHeight:"get_borderTexHeight",set_borderTiling:"set_borderTiling",get_borderTiling:"get_borderTiling",set_borderTexture:"set_borderTexture",get_borderTexture:"get_borderTexture",set_SCALE_BORDER_ON_RADIUS:"set_SCALE_BORDER_ON_RADIUS",get_SCALE_BORDER_ON_RADIUS:"get_SCALE_BORDER_ON_RADIUS",set_INVERT_BORDER_UV:"set_INVERT_BORDER_UV",get_INVERT_BORDER_UV:"get_INVERT_BORDER_UV",set_USE_BORDER:"set_USE_BORDER",get_USE_BORDER:"get_USE_BORDER",set_bodyTexHeight:"set_bodyTexHeight",get_bodyTexHeight:"get_bodyTexHeight",set_bodyTiling:"set_bodyTiling",get_bodyTiling:"get_bodyTiling",set_bodyTexture:"set_bodyTexture",get_bodyTexture:"get_bodyTexture",set_INVERT_BODY_UV:"set_INVERT_BODY_UV",get_INVERT_BODY_UV:"get_INVERT_BODY_UV",set_USE_BODY:"set_USE_BODY",get_USE_BODY:"get_USE_BODY",set_border:"set_border",get_border:"get_border",set_fadeEnd:"set_fadeEnd",get_fadeEnd:"get_fadeEnd",set_fadeStart:"set_fadeStart",get_fadeStart:"get_fadeStart",set_fadePower:"set_fadePower",get_fadePower:"get_fadePower",set_mainAlpha:"set_mainAlpha",get_mainAlpha:"get_mainAlpha"}
});
shaders.DiscAreaDisplay = $hxClasses["shaders.DiscAreaDisplay"] = function(USE_DECAL) {
	this.iconColor__ = new h3d.Vector();
	this.iconRadius__ = 0;
	this.sideTiling__ = 0;
	this.sideThickness__ = 0;
	this.sideColor__ = new h3d.Vector();
	this.sideTextureHeight__ = 0;
	this.maxAngle__ = 0;
	this.minAngle__ = 0;
	this.borderColor__ = new h3d.Vector();
	this.bodyColor__ = new h3d.Vector();
	this.baseColor__ = new h3d.Vector();
	this.radius__ = 0;
	this.borderTexHeight__ = 0;
	this.borderTiling__ = 0;
	this.bodyTexHeight__ = 0;
	this.bodyTiling__ = 0;
	this.border__ = 0;
	this.fadeEnd__ = 0;
	this.fadeStart__ = 0;
	this.fadePower__ = 0;
	this.mainAlpha__ = 0;
	hxsl.Shader.call(this);
	this.constModified = true;
	this.USE_DECAL__ = USE_DECAL;
};
shaders.DiscAreaDisplay.__name__ = "shaders.DiscAreaDisplay";
shaders.DiscAreaDisplay._SHADER = null;
shaders.DiscAreaDisplay.__super__ = hxsl.Shader;
shaders.DiscAreaDisplay.prototype = $extend(hxsl.Shader.prototype,{
	mainAlpha__: null
	,get_mainAlpha: function() {
		return this.mainAlpha__;
	}
	,set_mainAlpha: function(_v) {
		return this.mainAlpha__ = _v;
	}
	,fadePower__: null
	,get_fadePower: function() {
		return this.fadePower__;
	}
	,set_fadePower: function(_v) {
		return this.fadePower__ = _v;
	}
	,fadeStart__: null
	,get_fadeStart: function() {
		return this.fadeStart__;
	}
	,set_fadeStart: function(_v) {
		return this.fadeStart__ = _v;
	}
	,fadeEnd__: null
	,get_fadeEnd: function() {
		return this.fadeEnd__;
	}
	,set_fadeEnd: function(_v) {
		return this.fadeEnd__ = _v;
	}
	,border__: null
	,get_border: function() {
		return this.border__;
	}
	,set_border: function(_v) {
		return this.border__ = _v;
	}
	,USE_BODY__: null
	,get_USE_BODY: function() {
		return this.USE_BODY__;
	}
	,set_USE_BODY: function(_v) {
		this.constModified = true;
		return this.USE_BODY__ = _v;
	}
	,INVERT_BODY_UV__: null
	,get_INVERT_BODY_UV: function() {
		return this.INVERT_BODY_UV__;
	}
	,set_INVERT_BODY_UV: function(_v) {
		this.constModified = true;
		return this.INVERT_BODY_UV__ = _v;
	}
	,bodyTexture__: null
	,get_bodyTexture: function() {
		return this.bodyTexture__;
	}
	,set_bodyTexture: function(_v) {
		return this.bodyTexture__ = _v;
	}
	,bodyTiling__: null
	,get_bodyTiling: function() {
		return this.bodyTiling__;
	}
	,set_bodyTiling: function(_v) {
		return this.bodyTiling__ = _v;
	}
	,bodyTexHeight__: null
	,get_bodyTexHeight: function() {
		return this.bodyTexHeight__;
	}
	,set_bodyTexHeight: function(_v) {
		return this.bodyTexHeight__ = _v;
	}
	,USE_BORDER__: null
	,get_USE_BORDER: function() {
		return this.USE_BORDER__;
	}
	,set_USE_BORDER: function(_v) {
		this.constModified = true;
		return this.USE_BORDER__ = _v;
	}
	,INVERT_BORDER_UV__: null
	,get_INVERT_BORDER_UV: function() {
		return this.INVERT_BORDER_UV__;
	}
	,set_INVERT_BORDER_UV: function(_v) {
		this.constModified = true;
		return this.INVERT_BORDER_UV__ = _v;
	}
	,SCALE_BORDER_ON_RADIUS__: null
	,get_SCALE_BORDER_ON_RADIUS: function() {
		return this.SCALE_BORDER_ON_RADIUS__;
	}
	,set_SCALE_BORDER_ON_RADIUS: function(_v) {
		this.constModified = true;
		return this.SCALE_BORDER_ON_RADIUS__ = _v;
	}
	,borderTexture__: null
	,get_borderTexture: function() {
		return this.borderTexture__;
	}
	,set_borderTexture: function(_v) {
		return this.borderTexture__ = _v;
	}
	,borderTiling__: null
	,get_borderTiling: function() {
		return this.borderTiling__;
	}
	,set_borderTiling: function(_v) {
		return this.borderTiling__ = _v;
	}
	,borderTexHeight__: null
	,get_borderTexHeight: function() {
		return this.borderTexHeight__;
	}
	,set_borderTexHeight: function(_v) {
		return this.borderTexHeight__ = _v;
	}
	,radius__: null
	,get_radius: function() {
		return this.radius__;
	}
	,set_radius: function(_v) {
		return this.radius__ = _v;
	}
	,baseColor__: null
	,get_baseColor: function() {
		return this.baseColor__;
	}
	,set_baseColor: function(_v) {
		return this.baseColor__ = _v;
	}
	,bodyColor__: null
	,get_bodyColor: function() {
		return this.bodyColor__;
	}
	,set_bodyColor: function(_v) {
		return this.bodyColor__ = _v;
	}
	,borderColor__: null
	,get_borderColor: function() {
		return this.borderColor__;
	}
	,set_borderColor: function(_v) {
		return this.borderColor__ = _v;
	}
	,USE_SIDE_BORDER__: null
	,get_USE_SIDE_BORDER: function() {
		return this.USE_SIDE_BORDER__;
	}
	,set_USE_SIDE_BORDER: function(_v) {
		this.constModified = true;
		return this.USE_SIDE_BORDER__ = _v;
	}
	,INVERT_SIDE_UV_X__: null
	,get_INVERT_SIDE_UV_X: function() {
		return this.INVERT_SIDE_UV_X__;
	}
	,set_INVERT_SIDE_UV_X: function(_v) {
		this.constModified = true;
		return this.INVERT_SIDE_UV_X__ = _v;
	}
	,INVERT_SIDE_UV_Y__: null
	,get_INVERT_SIDE_UV_Y: function() {
		return this.INVERT_SIDE_UV_Y__;
	}
	,set_INVERT_SIDE_UV_Y: function(_v) {
		this.constModified = true;
		return this.INVERT_SIDE_UV_Y__ = _v;
	}
	,minAngle__: null
	,get_minAngle: function() {
		return this.minAngle__;
	}
	,set_minAngle: function(_v) {
		return this.minAngle__ = _v;
	}
	,maxAngle__: null
	,get_maxAngle: function() {
		return this.maxAngle__;
	}
	,set_maxAngle: function(_v) {
		return this.maxAngle__ = _v;
	}
	,sideTexture__: null
	,get_sideTexture: function() {
		return this.sideTexture__;
	}
	,set_sideTexture: function(_v) {
		return this.sideTexture__ = _v;
	}
	,sideTextureHeight__: null
	,get_sideTextureHeight: function() {
		return this.sideTextureHeight__;
	}
	,set_sideTextureHeight: function(_v) {
		return this.sideTextureHeight__ = _v;
	}
	,sideColor__: null
	,get_sideColor: function() {
		return this.sideColor__;
	}
	,set_sideColor: function(_v) {
		return this.sideColor__ = _v;
	}
	,sideThickness__: null
	,get_sideThickness: function() {
		return this.sideThickness__;
	}
	,set_sideThickness: function(_v) {
		return this.sideThickness__ = _v;
	}
	,sideTiling__: null
	,get_sideTiling: function() {
		return this.sideTiling__;
	}
	,set_sideTiling: function(_v) {
		return this.sideTiling__ = _v;
	}
	,USE_ICON__: null
	,get_USE_ICON: function() {
		return this.USE_ICON__;
	}
	,set_USE_ICON: function(_v) {
		this.constModified = true;
		return this.USE_ICON__ = _v;
	}
	,USE_MULTIPLY__: null
	,get_USE_MULTIPLY: function() {
		return this.USE_MULTIPLY__;
	}
	,set_USE_MULTIPLY: function(_v) {
		this.constModified = true;
		return this.USE_MULTIPLY__ = _v;
	}
	,iconRadius__: null
	,get_iconRadius: function() {
		return this.iconRadius__;
	}
	,set_iconRadius: function(_v) {
		return this.iconRadius__ = _v;
	}
	,iconTexture__: null
	,get_iconTexture: function() {
		return this.iconTexture__;
	}
	,set_iconTexture: function(_v) {
		return this.iconTexture__ = _v;
	}
	,iconColor__: null
	,get_iconColor: function() {
		return this.iconColor__;
	}
	,set_iconColor: function(_v) {
		return this.iconColor__ = _v;
	}
	,USE_DECAL__: null
	,get_USE_DECAL: function() {
		return this.USE_DECAL__;
	}
	,set_USE_DECAL: function(_v) {
		this.constModified = true;
		return this.USE_DECAL__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.USE_BODY__) {
			this.constBits |= 64;
		}
		if(this.INVERT_BODY_UV__) {
			this.constBits |= 128;
		}
		if(this.USE_BORDER__) {
			this.constBits |= 256;
		}
		if(this.INVERT_BORDER_UV__) {
			this.constBits |= 512;
		}
		if(this.SCALE_BORDER_ON_RADIUS__) {
			this.constBits |= 1024;
		}
		if(this.USE_SIDE_BORDER__) {
			this.constBits |= 2048;
		}
		if(this.INVERT_SIDE_UV_X__) {
			this.constBits |= 4096;
		}
		if(this.INVERT_SIDE_UV_Y__) {
			this.constBits |= 8192;
		}
		if(this.USE_ICON__) {
			this.constBits |= 16384;
		}
		if(this.USE_MULTIPLY__) {
			this.constBits |= 32768;
		}
		if(this.USE_DECAL__) {
			this.constBits |= 65536;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.mainAlpha__;
		case 1:
			return this.fadePower__;
		case 2:
			return this.fadeStart__;
		case 3:
			return this.fadeEnd__;
		case 4:
			return this.border__;
		case 5:
			return this.USE_BODY__;
		case 6:
			return this.INVERT_BODY_UV__;
		case 7:
			return this.bodyTexture__;
		case 8:
			return this.bodyTiling__;
		case 9:
			return this.bodyTexHeight__;
		case 10:
			return this.USE_BORDER__;
		case 11:
			return this.INVERT_BORDER_UV__;
		case 12:
			return this.SCALE_BORDER_ON_RADIUS__;
		case 13:
			return this.borderTexture__;
		case 14:
			return this.borderTiling__;
		case 15:
			return this.borderTexHeight__;
		case 16:
			return this.radius__;
		case 17:
			return this.baseColor__;
		case 18:
			return this.bodyColor__;
		case 19:
			return this.borderColor__;
		case 20:
			return this.USE_SIDE_BORDER__;
		case 21:
			return this.INVERT_SIDE_UV_X__;
		case 22:
			return this.INVERT_SIDE_UV_Y__;
		case 23:
			return this.minAngle__;
		case 24:
			return this.maxAngle__;
		case 25:
			return this.sideTexture__;
		case 26:
			return this.sideTextureHeight__;
		case 27:
			return this.sideColor__;
		case 28:
			return this.sideThickness__;
		case 29:
			return this.sideTiling__;
		case 30:
			return this.USE_ICON__;
		case 31:
			return this.USE_MULTIPLY__;
		case 32:
			return this.iconRadius__;
		case 33:
			return this.iconTexture__;
		case 34:
			return this.iconColor__;
		case 35:
			return this.USE_DECAL__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.mainAlpha__;
		case 1:
			return this.fadePower__;
		case 2:
			return this.fadeStart__;
		case 3:
			return this.fadeEnd__;
		case 4:
			return this.border__;
		case 8:
			return this.bodyTiling__;
		case 9:
			return this.bodyTexHeight__;
		case 14:
			return this.borderTiling__;
		case 15:
			return this.borderTexHeight__;
		case 16:
			return this.radius__;
		case 23:
			return this.minAngle__;
		case 24:
			return this.maxAngle__;
		case 26:
			return this.sideTextureHeight__;
		case 28:
			return this.sideThickness__;
		case 29:
			return this.sideTiling__;
		case 32:
			return this.iconRadius__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.DiscAreaDisplay.prototype);
		s.shader = this.shader;
		s.mainAlpha__ = this.mainAlpha__;
		s.fadePower__ = this.fadePower__;
		s.fadeStart__ = this.fadeStart__;
		s.fadeEnd__ = this.fadeEnd__;
		s.border__ = this.border__;
		s.USE_BODY__ = this.USE_BODY__;
		s.INVERT_BODY_UV__ = this.INVERT_BODY_UV__;
		s.bodyTexture__ = this.bodyTexture__;
		s.bodyTiling__ = this.bodyTiling__;
		s.bodyTexHeight__ = this.bodyTexHeight__;
		s.USE_BORDER__ = this.USE_BORDER__;
		s.INVERT_BORDER_UV__ = this.INVERT_BORDER_UV__;
		s.SCALE_BORDER_ON_RADIUS__ = this.SCALE_BORDER_ON_RADIUS__;
		s.borderTexture__ = this.borderTexture__;
		s.borderTiling__ = this.borderTiling__;
		s.borderTexHeight__ = this.borderTexHeight__;
		s.radius__ = this.radius__;
		s.baseColor__ = this.baseColor__;
		s.bodyColor__ = this.bodyColor__;
		s.borderColor__ = this.borderColor__;
		s.USE_SIDE_BORDER__ = this.USE_SIDE_BORDER__;
		s.INVERT_SIDE_UV_X__ = this.INVERT_SIDE_UV_X__;
		s.INVERT_SIDE_UV_Y__ = this.INVERT_SIDE_UV_Y__;
		s.minAngle__ = this.minAngle__;
		s.maxAngle__ = this.maxAngle__;
		s.sideTexture__ = this.sideTexture__;
		s.sideTextureHeight__ = this.sideTextureHeight__;
		s.sideColor__ = this.sideColor__;
		s.sideThickness__ = this.sideThickness__;
		s.sideTiling__ = this.sideTiling__;
		s.USE_ICON__ = this.USE_ICON__;
		s.USE_MULTIPLY__ = this.USE_MULTIPLY__;
		s.iconRadius__ = this.iconRadius__;
		s.iconTexture__ = this.iconTexture__;
		s.iconColor__ = this.iconColor__;
		s.USE_DECAL__ = this.USE_DECAL__;
		return s;
	}
	,__class__: shaders.DiscAreaDisplay
	,__properties__: {set_USE_DECAL:"set_USE_DECAL",get_USE_DECAL:"get_USE_DECAL",set_iconColor:"set_iconColor",get_iconColor:"get_iconColor",set_iconTexture:"set_iconTexture",get_iconTexture:"get_iconTexture",set_iconRadius:"set_iconRadius",get_iconRadius:"get_iconRadius",set_USE_MULTIPLY:"set_USE_MULTIPLY",get_USE_MULTIPLY:"get_USE_MULTIPLY",set_USE_ICON:"set_USE_ICON",get_USE_ICON:"get_USE_ICON",set_sideTiling:"set_sideTiling",get_sideTiling:"get_sideTiling",set_sideThickness:"set_sideThickness",get_sideThickness:"get_sideThickness",set_sideColor:"set_sideColor",get_sideColor:"get_sideColor",set_sideTextureHeight:"set_sideTextureHeight",get_sideTextureHeight:"get_sideTextureHeight",set_sideTexture:"set_sideTexture",get_sideTexture:"get_sideTexture",set_maxAngle:"set_maxAngle",get_maxAngle:"get_maxAngle",set_minAngle:"set_minAngle",get_minAngle:"get_minAngle",set_INVERT_SIDE_UV_Y:"set_INVERT_SIDE_UV_Y",get_INVERT_SIDE_UV_Y:"get_INVERT_SIDE_UV_Y",set_INVERT_SIDE_UV_X:"set_INVERT_SIDE_UV_X",get_INVERT_SIDE_UV_X:"get_INVERT_SIDE_UV_X",set_USE_SIDE_BORDER:"set_USE_SIDE_BORDER",get_USE_SIDE_BORDER:"get_USE_SIDE_BORDER",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_bodyColor:"set_bodyColor",get_bodyColor:"get_bodyColor",set_baseColor:"set_baseColor",get_baseColor:"get_baseColor",set_radius:"set_radius",get_radius:"get_radius",set_borderTexHeight:"set_borderTexHeight",get_borderTexHeight:"get_borderTexHeight",set_borderTiling:"set_borderTiling",get_borderTiling:"get_borderTiling",set_borderTexture:"set_borderTexture",get_borderTexture:"get_borderTexture",set_SCALE_BORDER_ON_RADIUS:"set_SCALE_BORDER_ON_RADIUS",get_SCALE_BORDER_ON_RADIUS:"get_SCALE_BORDER_ON_RADIUS",set_INVERT_BORDER_UV:"set_INVERT_BORDER_UV",get_INVERT_BORDER_UV:"get_INVERT_BORDER_UV",set_USE_BORDER:"set_USE_BORDER",get_USE_BORDER:"get_USE_BORDER",set_bodyTexHeight:"set_bodyTexHeight",get_bodyTexHeight:"get_bodyTexHeight",set_bodyTiling:"set_bodyTiling",get_bodyTiling:"get_bodyTiling",set_bodyTexture:"set_bodyTexture",get_bodyTexture:"get_bodyTexture",set_INVERT_BODY_UV:"set_INVERT_BODY_UV",get_INVERT_BODY_UV:"get_INVERT_BODY_UV",set_USE_BODY:"set_USE_BODY",get_USE_BODY:"get_USE_BODY",set_border:"set_border",get_border:"get_border",set_fadeEnd:"set_fadeEnd",get_fadeEnd:"get_fadeEnd",set_fadeStart:"set_fadeStart",get_fadeStart:"get_fadeStart",set_fadePower:"set_fadePower",get_fadePower:"get_fadePower",set_mainAlpha:"set_mainAlpha",get_mainAlpha:"get_mainAlpha"}
});
shaders.AutoAlpha = $hxClasses["shaders.AutoAlpha"] = function() {
	this.scale__ = 1;
	hxsl.Shader.call(this);
};
shaders.AutoAlpha.__name__ = "shaders.AutoAlpha";
shaders.AutoAlpha._SHADER = null;
shaders.AutoAlpha.__super__ = hxsl.Shader;
shaders.AutoAlpha.prototype = $extend(hxsl.Shader.prototype,{
	scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.scale__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.scale__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.AutoAlpha.prototype);
		s.shader = this.shader;
		s.scale__ = this.scale__;
		return s;
	}
	,__class__: shaders.AutoAlpha
	,__properties__: {set_scale:"set_scale",get_scale:"get_scale"}
});
shaders.BlurredBackground = $hxClasses["shaders.BlurredBackground"] = function() {
	hxsl.Shader.call(this);
};
shaders.BlurredBackground.__name__ = "shaders.BlurredBackground";
shaders.BlurredBackground._SHADER = null;
shaders.BlurredBackground.__super__ = hxsl.Shader;
shaders.BlurredBackground.prototype = $extend(hxsl.Shader.prototype,{
	blurTex__: null
	,get_blurTex: function() {
		return this.blurTex__;
	}
	,set_blurTex: function(_v) {
		return this.blurTex__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.blurTex__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.BlurredBackground.prototype);
		s.shader = this.shader;
		s.blurTex__ = this.blurTex__;
		return s;
	}
	,__class__: shaders.BlurredBackground
	,__properties__: {set_blurTex:"set_blurTex",get_blurTex:"get_blurTex"}
});
shaders.CampGrass = $hxClasses["shaders.CampGrass"] = function() {
	hxsl.Shader.call(this);
};
shaders.CampGrass.__name__ = "shaders.CampGrass";
shaders.CampGrass._SHADER = null;
shaders.CampGrass.__super__ = hxsl.Shader;
shaders.CampGrass.prototype = $extend(hxsl.Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: shaders.CampGrass
});
shaders.ColorMap = $hxClasses["shaders.ColorMap"] = function() {
	this.pointB__ = 0;
	this.colorB__ = new h3d.Vector();
	this.pointA__ = 0;
	this.colorA__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
shaders.ColorMap.__name__ = "shaders.ColorMap";
shaders.ColorMap._SHADER = null;
shaders.ColorMap.__super__ = hxsl.Shader;
shaders.ColorMap.prototype = $extend(hxsl.Shader.prototype,{
	USE_ALPHA__: null
	,get_USE_ALPHA: function() {
		return this.USE_ALPHA__;
	}
	,set_USE_ALPHA: function(_v) {
		this.constModified = true;
		return this.USE_ALPHA__ = _v;
	}
	,colorA__: null
	,get_colorA: function() {
		return this.colorA__;
	}
	,set_colorA: function(_v) {
		return this.colorA__ = _v;
	}
	,pointA__: null
	,get_pointA: function() {
		return this.pointA__;
	}
	,set_pointA: function(_v) {
		return this.pointA__ = _v;
	}
	,colorB__: null
	,get_colorB: function() {
		return this.colorB__;
	}
	,set_colorB: function(_v) {
		return this.colorB__ = _v;
	}
	,pointB__: null
	,get_pointB: function() {
		return this.pointB__;
	}
	,set_pointB: function(_v) {
		return this.pointB__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.USE_ALPHA__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.USE_ALPHA__;
		case 1:
			return this.colorA__;
		case 2:
			return this.pointA__;
		case 3:
			return this.colorB__;
		case 4:
			return this.pointB__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.pointA__;
		case 4:
			return this.pointB__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.ColorMap.prototype);
		s.shader = this.shader;
		s.USE_ALPHA__ = this.USE_ALPHA__;
		s.colorA__ = this.colorA__;
		s.pointA__ = this.pointA__;
		s.colorB__ = this.colorB__;
		s.pointB__ = this.pointB__;
		return s;
	}
	,__class__: shaders.ColorMap
	,__properties__: {set_pointB:"set_pointB",get_pointB:"get_pointB",set_colorB:"set_colorB",get_colorB:"get_colorB",set_pointA:"set_pointA",get_pointA:"get_pointA",set_colorA:"set_colorA",get_colorA:"get_colorA",set_USE_ALPHA:"set_USE_ALPHA",get_USE_ALPHA:"get_USE_ALPHA"}
});
shaders.ColorMap3 = $hxClasses["shaders.ColorMap3"] = function() {
	this.pointC__ = 0;
	this.colorC__ = new h3d.Vector();
	this.pointB__ = 0;
	this.colorB__ = new h3d.Vector();
	this.pointA__ = 0;
	this.colorA__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
shaders.ColorMap3.__name__ = "shaders.ColorMap3";
shaders.ColorMap3._SHADER = null;
shaders.ColorMap3.__super__ = hxsl.Shader;
shaders.ColorMap3.prototype = $extend(hxsl.Shader.prototype,{
	colorA__: null
	,get_colorA: function() {
		return this.colorA__;
	}
	,set_colorA: function(_v) {
		return this.colorA__ = _v;
	}
	,pointA__: null
	,get_pointA: function() {
		return this.pointA__;
	}
	,set_pointA: function(_v) {
		return this.pointA__ = _v;
	}
	,colorB__: null
	,get_colorB: function() {
		return this.colorB__;
	}
	,set_colorB: function(_v) {
		return this.colorB__ = _v;
	}
	,pointB__: null
	,get_pointB: function() {
		return this.pointB__;
	}
	,set_pointB: function(_v) {
		return this.pointB__ = _v;
	}
	,colorC__: null
	,get_colorC: function() {
		return this.colorC__;
	}
	,set_colorC: function(_v) {
		return this.colorC__ = _v;
	}
	,pointC__: null
	,get_pointC: function() {
		return this.pointC__;
	}
	,set_pointC: function(_v) {
		return this.pointC__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorA__;
		case 1:
			return this.pointA__;
		case 2:
			return this.colorB__;
		case 3:
			return this.pointB__;
		case 4:
			return this.colorC__;
		case 5:
			return this.pointC__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.pointA__;
		case 3:
			return this.pointB__;
		case 5:
			return this.pointC__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.ColorMap3.prototype);
		s.shader = this.shader;
		s.colorA__ = this.colorA__;
		s.pointA__ = this.pointA__;
		s.colorB__ = this.colorB__;
		s.pointB__ = this.pointB__;
		s.colorC__ = this.colorC__;
		s.pointC__ = this.pointC__;
		return s;
	}
	,__class__: shaders.ColorMap3
	,__properties__: {set_pointC:"set_pointC",get_pointC:"get_pointC",set_colorC:"set_colorC",get_colorC:"get_colorC",set_pointB:"set_pointB",get_pointB:"get_pointB",set_colorB:"set_colorB",get_colorB:"get_colorB",set_pointA:"set_pointA",get_pointA:"get_pointA",set_colorA:"set_colorA",get_colorA:"get_colorA"}
});
shaders.ColorMult = $hxClasses["shaders.ColorMult"] = function() {
	this.amount__ = 1;
	this.color__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
shaders.ColorMult.__name__ = "shaders.ColorMult";
shaders.ColorMult._SHADER = null;
shaders.ColorMult.__super__ = hxsl.Shader;
shaders.ColorMult.prototype = $extend(hxsl.Shader.prototype,{
	color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,amount__: null
	,get_amount: function() {
		return this.amount__;
	}
	,set_amount: function(_v) {
		return this.amount__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.amount__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.amount__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.ColorMult.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.amount__ = this.amount__;
		return s;
	}
	,__class__: shaders.ColorMult
	,__properties__: {set_amount:"set_amount",get_amount:"get_amount",set_color:"set_color",get_color:"get_color"}
});
shaders.ColorSet = $hxClasses["shaders.ColorSet"] = function(color) {
	if(color == null) {
		color = 0;
	}
	this.amount__ = 1;
	this.color__ = new h3d.Vector();
	hxsl.Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
shaders.ColorSet.__name__ = "shaders.ColorSet";
shaders.ColorSet._SHADER = null;
shaders.ColorSet.__super__ = hxsl.Shader;
shaders.ColorSet.prototype = $extend(hxsl.Shader.prototype,{
	color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,amount__: null
	,get_amount: function() {
		return this.amount__;
	}
	,set_amount: function(_v) {
		return this.amount__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.amount__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.amount__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.ColorSet.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.amount__ = this.amount__;
		return s;
	}
	,__class__: shaders.ColorSet
	,__properties__: {set_amount:"set_amount",get_amount:"get_amount",set_color:"set_color",get_color:"get_color"}
});
shaders.Curvature = $hxClasses["shaders.Curvature"] = function() {
	this.curvature__ = 0;
	this.camTarget__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
shaders.Curvature.__name__ = "shaders.Curvature";
shaders.Curvature._SHADER = null;
shaders.Curvature.__super__ = hxsl.Shader;
shaders.Curvature.prototype = $extend(hxsl.Shader.prototype,{
	camTarget__: null
	,get_camTarget: function() {
		return this.camTarget__;
	}
	,set_camTarget: function(_v) {
		return this.camTarget__ = _v;
	}
	,curvature__: null
	,get_curvature: function() {
		return this.curvature__;
	}
	,set_curvature: function(_v) {
		return this.curvature__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.camTarget__;
		case 1:
			return this.curvature__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.curvature__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.Curvature.prototype);
		s.shader = this.shader;
		s.camTarget__ = this.camTarget__;
		s.curvature__ = this.curvature__;
		return s;
	}
	,__class__: shaders.Curvature
	,__properties__: {set_curvature:"set_curvature",get_curvature:"get_curvature",set_camTarget:"set_camTarget",get_camTarget:"get_camTarget"}
});
shaders.DepthBlend = $hxClasses["shaders.DepthBlend"] = function() {
	this.power__ = 1;
	this.range__ = 1;
	this.REVERSE__ = false;
	hxsl.Shader.call(this);
};
shaders.DepthBlend.__name__ = "shaders.DepthBlend";
shaders.DepthBlend._SHADER = null;
shaders.DepthBlend.__super__ = hxsl.Shader;
shaders.DepthBlend.prototype = $extend(hxsl.Shader.prototype,{
	REVERSE__: null
	,get_REVERSE: function() {
		return this.REVERSE__;
	}
	,set_REVERSE: function(_v) {
		this.constModified = true;
		return this.REVERSE__ = _v;
	}
	,range__: null
	,get_range: function() {
		return this.range__;
	}
	,set_range: function(_v) {
		return this.range__ = _v;
	}
	,power__: null
	,get_power: function() {
		return this.power__;
	}
	,set_power: function(_v) {
		return this.power__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.REVERSE__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.REVERSE__;
		case 1:
			return this.range__;
		case 2:
			return this.power__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.range__;
		case 2:
			return this.power__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.DepthBlend.prototype);
		s.shader = this.shader;
		s.REVERSE__ = this.REVERSE__;
		s.range__ = this.range__;
		s.power__ = this.power__;
		return s;
	}
	,__class__: shaders.DepthBlend
	,__properties__: {set_power:"set_power",get_power:"get_power",set_range:"set_range",get_range:"get_range",set_REVERSE:"set_REVERSE",get_REVERSE:"get_REVERSE"}
});
shaders.Dissolve = $hxClasses["shaders.Dissolve"] = function() {
	this.width__ = 1;
	this.saturation__ = 0;
	this.progress__ = 1;
	hxsl.Shader.call(this);
};
shaders.Dissolve.__name__ = "shaders.Dissolve";
shaders.Dissolve._SHADER = null;
shaders.Dissolve.__super__ = hxsl.Shader;
shaders.Dissolve.prototype = $extend(hxsl.Shader.prototype,{
	progress__: null
	,get_progress: function() {
		return this.progress__;
	}
	,set_progress: function(_v) {
		return this.progress__ = _v;
	}
	,saturation__: null
	,get_saturation: function() {
		return this.saturation__;
	}
	,set_saturation: function(_v) {
		return this.saturation__ = _v;
	}
	,width__: null
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.progress__;
		case 1:
			return this.saturation__;
		case 2:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.progress__;
		case 1:
			return this.saturation__;
		case 2:
			return this.width__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.Dissolve.prototype);
		s.shader = this.shader;
		s.progress__ = this.progress__;
		s.saturation__ = this.saturation__;
		s.width__ = this.width__;
		return s;
	}
	,__class__: shaders.Dissolve
	,__properties__: {set_width:"set_width",get_width:"get_width",set_saturation:"set_saturation",get_saturation:"get_saturation",set_progress:"set_progress",get_progress:"get_progress"}
});
shaders.DissolveMap = $hxClasses["shaders.DissolveMap"] = function() {
	this.uvScaleY__ = 1;
	this.uvScaleX__ = 1;
	this.uvScaleSpeed__ = new h3d.Vector();
	this.uvShiftSpeed__ = new h3d.Vector();
	this.uvShift__ = new h3d.Vector();
	this.width__ = 1;
	this.saturation__ = 0;
	this.progress__ = 1;
	this.wrap__ = true;
	this.useScale__ = false;
	this.useSourceUVs__ = true;
	hxsl.Shader.call(this);
	this.uvShift__ = new h3d.Vector(0,0);
};
shaders.DissolveMap.__name__ = "shaders.DissolveMap";
shaders.DissolveMap._SHADER = null;
shaders.DissolveMap.__super__ = hxsl.Shader;
shaders.DissolveMap.prototype = $extend(hxsl.Shader.prototype,{
	texture__: null
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,useSourceUVs__: null
	,get_useSourceUVs: function() {
		return this.useSourceUVs__;
	}
	,set_useSourceUVs: function(_v) {
		this.constModified = true;
		return this.useSourceUVs__ = _v;
	}
	,useScale__: null
	,get_useScale: function() {
		return this.useScale__;
	}
	,set_useScale: function(_v) {
		this.constModified = true;
		return this.useScale__ = _v;
	}
	,wrap__: null
	,get_wrap: function() {
		return this.wrap__;
	}
	,set_wrap: function(_v) {
		this.constModified = true;
		return this.wrap__ = _v;
	}
	,progress__: null
	,get_progress: function() {
		return this.progress__;
	}
	,set_progress: function(_v) {
		return this.progress__ = _v;
	}
	,saturation__: null
	,get_saturation: function() {
		return this.saturation__;
	}
	,set_saturation: function(_v) {
		return this.saturation__ = _v;
	}
	,width__: null
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,uvShift__: null
	,get_uvShift: function() {
		return this.uvShift__;
	}
	,set_uvShift: function(_v) {
		return this.uvShift__ = _v;
	}
	,uvShiftSpeed__: null
	,get_uvShiftSpeed: function() {
		return this.uvShiftSpeed__;
	}
	,set_uvShiftSpeed: function(_v) {
		return this.uvShiftSpeed__ = _v;
	}
	,uvScaleSpeed__: null
	,get_uvScaleSpeed: function() {
		return this.uvScaleSpeed__;
	}
	,set_uvScaleSpeed: function(_v) {
		return this.uvScaleSpeed__ = _v;
	}
	,uvScaleX__: null
	,get_uvScaleX: function() {
		return this.uvScaleX__;
	}
	,set_uvScaleX: function(_v) {
		return this.uvScaleX__ = _v;
	}
	,uvScaleY__: null
	,get_uvScaleY: function() {
		return this.uvScaleY__;
	}
	,set_uvScaleY: function(_v) {
		return this.uvScaleY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useSourceUVs__) {
			this.constBits |= 1;
		}
		if(this.useScale__) {
			this.constBits |= 2;
		}
		if(this.wrap__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.texture__;
		case 1:
			return this.useSourceUVs__;
		case 2:
			return this.useScale__;
		case 3:
			return this.wrap__;
		case 4:
			return this.progress__;
		case 5:
			return this.saturation__;
		case 6:
			return this.width__;
		case 7:
			return this.uvShift__;
		case 8:
			return this.uvShiftSpeed__;
		case 9:
			return this.uvScaleSpeed__;
		case 10:
			return this.uvScaleX__;
		case 11:
			return this.uvScaleY__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 4:
			return this.progress__;
		case 5:
			return this.saturation__;
		case 6:
			return this.width__;
		case 10:
			return this.uvScaleX__;
		case 11:
			return this.uvScaleY__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.DissolveMap.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		s.useSourceUVs__ = this.useSourceUVs__;
		s.useScale__ = this.useScale__;
		s.wrap__ = this.wrap__;
		s.progress__ = this.progress__;
		s.saturation__ = this.saturation__;
		s.width__ = this.width__;
		s.uvShift__ = this.uvShift__;
		s.uvShiftSpeed__ = this.uvShiftSpeed__;
		s.uvScaleSpeed__ = this.uvScaleSpeed__;
		s.uvScaleX__ = this.uvScaleX__;
		s.uvScaleY__ = this.uvScaleY__;
		return s;
	}
	,__class__: shaders.DissolveMap
	,__properties__: {set_uvScaleY:"set_uvScaleY",get_uvScaleY:"get_uvScaleY",set_uvScaleX:"set_uvScaleX",get_uvScaleX:"get_uvScaleX",set_uvScaleSpeed:"set_uvScaleSpeed",get_uvScaleSpeed:"get_uvScaleSpeed",set_uvShiftSpeed:"set_uvShiftSpeed",get_uvShiftSpeed:"get_uvShiftSpeed",set_uvShift:"set_uvShift",get_uvShift:"get_uvShift",set_width:"set_width",get_width:"get_width",set_saturation:"set_saturation",get_saturation:"get_saturation",set_progress:"set_progress",get_progress:"get_progress",set_wrap:"set_wrap",get_wrap:"get_wrap",set_useScale:"set_useScale",get_useScale:"get_useScale",set_useSourceUVs:"set_useSourceUVs",get_useSourceUVs:"get_useSourceUVs",set_texture:"set_texture",get_texture:"get_texture"}
});
shaders.DistortionMap = $hxClasses["shaders.DistortionMap"] = function() {
	this.intensity__ = 0;
	hxsl.Shader.call(this);
};
shaders.DistortionMap.__name__ = "shaders.DistortionMap";
shaders.DistortionMap._SHADER = null;
shaders.DistortionMap.__super__ = hxsl.Shader;
shaders.DistortionMap.prototype = $extend(hxsl.Shader.prototype,{
	distortionDir__: null
	,get_distortionDir: function() {
		return this.distortionDir__;
	}
	,set_distortionDir: function(_v) {
		return this.distortionDir__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.distortionDir__;
		case 1:
			return this.intensity__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.intensity__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.DistortionMap.prototype);
		s.shader = this.shader;
		s.distortionDir__ = this.distortionDir__;
		s.intensity__ = this.intensity__;
		return s;
	}
	,__class__: shaders.DistortionMap
	,__properties__: {set_intensity:"set_intensity",get_intensity:"get_intensity",set_distortionDir:"set_distortionDir",get_distortionDir:"get_distortionDir"}
});
shaders.DistortionNormal = $hxClasses["shaders.DistortionNormal"] = function() {
	this.intensity__ = 0;
	hxsl.Shader.call(this);
};
shaders.DistortionNormal.__name__ = "shaders.DistortionNormal";
shaders.DistortionNormal._SHADER = null;
shaders.DistortionNormal.__super__ = hxsl.Shader;
shaders.DistortionNormal.prototype = $extend(hxsl.Shader.prototype,{
	intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.intensity__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.intensity__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.DistortionNormal.prototype);
		s.shader = this.shader;
		s.intensity__ = this.intensity__;
		return s;
	}
	,__class__: shaders.DistortionNormal
	,__properties__: {set_intensity:"set_intensity",get_intensity:"get_intensity"}
});
shaders.FakeLight = $hxClasses["shaders.FakeLight"] = function() {
	this.useY__ = false;
	this.shadowSpan__ = 1;
	this.shadow__ = 0;
	this.useEmissive__ = false;
	this.power__ = 1;
	this.intensity__ = 0.5;
	hxsl.Shader.call(this);
};
shaders.FakeLight.__name__ = "shaders.FakeLight";
shaders.FakeLight._SHADER = null;
shaders.FakeLight.__super__ = hxsl.Shader;
shaders.FakeLight.prototype = $extend(hxsl.Shader.prototype,{
	intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,power__: null
	,get_power: function() {
		return this.power__;
	}
	,set_power: function(_v) {
		return this.power__ = _v;
	}
	,useEmissive__: null
	,get_useEmissive: function() {
		return this.useEmissive__;
	}
	,set_useEmissive: function(_v) {
		this.constModified = true;
		return this.useEmissive__ = _v;
	}
	,shadow__: null
	,get_shadow: function() {
		return this.shadow__;
	}
	,set_shadow: function(_v) {
		return this.shadow__ = _v;
	}
	,shadowSpan__: null
	,get_shadowSpan: function() {
		return this.shadowSpan__;
	}
	,set_shadowSpan: function(_v) {
		return this.shadowSpan__ = _v;
	}
	,useY__: null
	,get_useY: function() {
		return this.useY__;
	}
	,set_useY: function(_v) {
		this.constModified = true;
		return this.useY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useEmissive__) {
			this.constBits |= 1;
		}
		if(this.useY__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.intensity__;
		case 1:
			return this.power__;
		case 2:
			return this.useEmissive__;
		case 3:
			return this.shadow__;
		case 4:
			return this.shadowSpan__;
		case 5:
			return this.useY__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.intensity__;
		case 1:
			return this.power__;
		case 3:
			return this.shadow__;
		case 4:
			return this.shadowSpan__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.FakeLight.prototype);
		s.shader = this.shader;
		s.intensity__ = this.intensity__;
		s.power__ = this.power__;
		s.useEmissive__ = this.useEmissive__;
		s.shadow__ = this.shadow__;
		s.shadowSpan__ = this.shadowSpan__;
		s.useY__ = this.useY__;
		return s;
	}
	,__class__: shaders.FakeLight
	,__properties__: {set_useY:"set_useY",get_useY:"get_useY",set_shadowSpan:"set_shadowSpan",get_shadowSpan:"get_shadowSpan",set_shadow:"set_shadow",get_shadow:"get_shadow",set_useEmissive:"set_useEmissive",get_useEmissive:"get_useEmissive",set_power:"set_power",get_power:"get_power",set_intensity:"set_intensity",get_intensity:"get_intensity"}
});
shaders.Fresnel = $hxClasses["shaders.Fresnel"] = function() {
	this.power__ = 1;
	this.scale__ = 1;
	this.bias__ = 0.2;
	this.color__ = new h3d.Vector();
	this.REVERSE__ = false;
	this.ALPHA__ = false;
	this.RGB__ = false;
	hxsl.Shader.call(this);
};
shaders.Fresnel.__name__ = "shaders.Fresnel";
shaders.Fresnel._SHADER = null;
shaders.Fresnel.__super__ = hxsl.Shader;
shaders.Fresnel.prototype = $extend(hxsl.Shader.prototype,{
	RGB__: null
	,get_RGB: function() {
		return this.RGB__;
	}
	,set_RGB: function(_v) {
		this.constModified = true;
		return this.RGB__ = _v;
	}
	,ALPHA__: null
	,get_ALPHA: function() {
		return this.ALPHA__;
	}
	,set_ALPHA: function(_v) {
		this.constModified = true;
		return this.ALPHA__ = _v;
	}
	,REVERSE__: null
	,get_REVERSE: function() {
		return this.REVERSE__;
	}
	,set_REVERSE: function(_v) {
		this.constModified = true;
		return this.REVERSE__ = _v;
	}
	,color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,bias__: null
	,get_bias: function() {
		return this.bias__;
	}
	,set_bias: function(_v) {
		return this.bias__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,power__: null
	,get_power: function() {
		return this.power__;
	}
	,set_power: function(_v) {
		return this.power__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.RGB__) {
			this.constBits |= 1;
		}
		if(this.ALPHA__) {
			this.constBits |= 2;
		}
		if(this.REVERSE__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.RGB__;
		case 1:
			return this.ALPHA__;
		case 2:
			return this.REVERSE__;
		case 3:
			return this.color__;
		case 4:
			return this.bias__;
		case 5:
			return this.scale__;
		case 6:
			return this.power__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 4:
			return this.bias__;
		case 5:
			return this.scale__;
		case 6:
			return this.power__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.Fresnel.prototype);
		s.shader = this.shader;
		s.RGB__ = this.RGB__;
		s.ALPHA__ = this.ALPHA__;
		s.REVERSE__ = this.REVERSE__;
		s.color__ = this.color__;
		s.bias__ = this.bias__;
		s.scale__ = this.scale__;
		s.power__ = this.power__;
		return s;
	}
	,__class__: shaders.Fresnel
	,__properties__: {set_power:"set_power",get_power:"get_power",set_scale:"set_scale",get_scale:"get_scale",set_bias:"set_bias",get_bias:"get_bias",set_color:"set_color",get_color:"get_color",set_REVERSE:"set_REVERSE",get_REVERSE:"get_REVERSE",set_ALPHA:"set_ALPHA",get_ALPHA:"get_ALPHA",set_RGB:"set_RGB",get_RGB:"get_RGB"}
});
shaders.MonsterDeformShader = $hxClasses["shaders.MonsterDeformShader"] = function() {
	this.speed__ = 0;
	hxsl.Shader.call(this);
};
shaders.MonsterDeformShader.__name__ = "shaders.MonsterDeformShader";
shaders.MonsterDeformShader._SHADER = null;
shaders.MonsterDeformShader.__super__ = hxsl.Shader;
shaders.MonsterDeformShader.prototype = $extend(hxsl.Shader.prototype,{
	speed__: null
	,get_speed: function() {
		return this.speed__;
	}
	,set_speed: function(_v) {
		return this.speed__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.speed__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.speed__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.MonsterDeformShader.prototype);
		s.shader = this.shader;
		s.speed__ = this.speed__;
		return s;
	}
	,__class__: shaders.MonsterDeformShader
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
shaders.OffsetShadowBiasShader = $hxClasses["shaders.OffsetShadowBiasShader"] = function() {
	this.biasOffset__ = 0;
	hxsl.Shader.call(this);
};
shaders.OffsetShadowBiasShader.__name__ = "shaders.OffsetShadowBiasShader";
shaders.OffsetShadowBiasShader._SHADER = null;
shaders.OffsetShadowBiasShader.__super__ = hxsl.Shader;
shaders.OffsetShadowBiasShader.prototype = $extend(hxsl.Shader.prototype,{
	biasOffset__: null
	,get_biasOffset: function() {
		return this.biasOffset__;
	}
	,set_biasOffset: function(_v) {
		return this.biasOffset__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.biasOffset__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.biasOffset__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.OffsetShadowBiasShader.prototype);
		s.shader = this.shader;
		s.biasOffset__ = this.biasOffset__;
		return s;
	}
	,__class__: shaders.OffsetShadowBiasShader
	,__properties__: {set_biasOffset:"set_biasOffset",get_biasOffset:"get_biasOffset"}
});
shaders.OldBlurPass = $hxClasses["shaders.OldBlurPass"] = function(quality,passes,sigma,gain) {
	if(gain == null) {
		gain = 1.;
	}
	if(sigma == null) {
		sigma = 1.;
	}
	if(passes == null) {
		passes = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	h3d.pass.ScreenFx.call(this,new h3d.shader.Blur());
	this.set_quality(quality);
	this.passes = passes;
	this.set_sigma(sigma);
	this.set_gain(gain);
};
shaders.OldBlurPass.__name__ = "shaders.OldBlurPass";
shaders.OldBlurPass.__super__ = h3d.pass.ScreenFx;
shaders.OldBlurPass.prototype = $extend(h3d.pass.ScreenFx.prototype,{
	quality: null
	,sigma: null
	,passes: null
	,gain: null
	,depthBlur: null
	,values: null
	,offsets: null
	,set_quality: function(q) {
		this.values = null;
		return this.quality = q;
	}
	,set_sigma: function(s) {
		this.values = null;
		return this.sigma = s;
	}
	,set_gain: function(s) {
		this.values = null;
		return this.gain = s;
	}
	,set_depthBlur: function(d) {
		this.depthBlur = d;
		if(d == null) {
			var _this = this.shader;
			_this.constModified = true;
			_this.isDepthDependant__ = false;
			this.shader.depthTexture__ = null;
			this.shader.normalTexture__ = null;
		} else {
			var _this = this.shader;
			_this.constModified = true;
			_this.isDepthDependant__ = true;
			this.shader.depthTexture__ = d.depths;
			this.shader.normalTexture__ = d.normals;
		}
		return d;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var _g = 0;
		var _g1 = this.quality + 1;
		while(_g < _g1) {
			var i = _g++;
			var g = this.gauss(i,this.sigma);
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : 1.;
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		if(this.passes > 0) {
			tot /= Math.pow(this.gain,1 / this.passes);
		}
		var _g = 0;
		var _g1 = this.quality + 1;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] /= tot;
		}
	}
	,apply: function(src,tmp,output,isDepth) {
		if(isDepth == null) {
			isDepth = false;
		}
		if((this.quality <= 0 || this.passes <= 0 || this.sigma <= 0) && this.shader.fixedColor__ == null) {
			return;
		}
		if(output == null) {
			output = src;
		} else {
			h3d.pass.Copy.run(src,output);
		}
		var alloc = tmp == null;
		if(alloc) {
			tmp = new h3d.mat.Texture(src.width,src.height,[h3d.mat.TextureFlags.Target],src.format);
		}
		if(this.values == null) {
			this.calcValues();
		}
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.quality + 1;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		var _this = this.shader;
		_this.constModified = true;
		_this.isDepth__ = isDepth;
		if(this.depthBlur != null) {
			this.shader.cameraInverseViewProj__ = this.depthBlur.camera.getInverseViewProj();
		}
		var outDepth = output.depthBuffer;
		var tmpDepth = tmp.depthBuffer;
		output.depthBuffer = null;
		tmp.depthBuffer = null;
		var _g = 0;
		var _g1 = this.passes;
		while(_g < _g1) {
			var i = _g++;
			this.shader.texture__ = output;
			var _this = this.shader.pixel__;
			var x = 1 / src.width;
			var y = 0;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			this.get_engine().pushTarget(tmp);
			this.render();
			this.get_engine().popTarget();
			this.shader.texture__ = tmp;
			var _this1 = this.shader.pixel__;
			var x1 = 0;
			var y1 = 1 / tmp.height;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = 0.;
			_this1.w = 1.;
			this.get_engine().pushTarget(output);
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
		tmp.depthBuffer = tmpDepth;
		if(alloc) {
			tmp.dispose();
		}
	}
	,__class__: shaders.OldBlurPass
	,__properties__: $extend(h3d.pass.ScreenFx.prototype.__properties__,{set_depthBlur:"set_depthBlur",set_gain:"set_gain",set_sigma:"set_sigma",set_quality:"set_quality"})
});
shaders.Pestifered = $hxClasses["shaders.Pestifered"] = function() {
	this.roughnessAffect__ = 0;
	this.color__ = new h3d.Vector();
	this.scale__ = 1;
	hxsl.Shader.call(this);
};
shaders.Pestifered.__name__ = "shaders.Pestifered";
shaders.Pestifered._SHADER = null;
shaders.Pestifered.__super__ = hxsl.Shader;
shaders.Pestifered.prototype = $extend(hxsl.Shader.prototype,{
	texture__: null
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,roughnessAffect__: null
	,get_roughnessAffect: function() {
		return this.roughnessAffect__;
	}
	,set_roughnessAffect: function(_v) {
		return this.roughnessAffect__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.texture__;
		case 1:
			return this.scale__;
		case 2:
			return this.color__;
		case 3:
			return this.roughnessAffect__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.scale__;
		case 3:
			return this.roughnessAffect__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.Pestifered.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		s.scale__ = this.scale__;
		s.color__ = this.color__;
		s.roughnessAffect__ = this.roughnessAffect__;
		return s;
	}
	,__class__: shaders.Pestifered
	,__properties__: {set_roughnessAffect:"set_roughnessAffect",get_roughnessAffect:"get_roughnessAffect",set_color:"set_color",get_color:"get_color",set_scale:"set_scale",get_scale:"get_scale",set_texture:"set_texture",get_texture:"get_texture"}
});
shaders.SSSFlesh = $hxClasses["shaders.SSSFlesh"] = function() {
	this.intensity__ = 0;
	hxsl.Shader.call(this);
};
shaders.SSSFlesh.__name__ = "shaders.SSSFlesh";
shaders.SSSFlesh._SHADER = null;
shaders.SSSFlesh.__super__ = hxsl.Shader;
shaders.SSSFlesh.prototype = $extend(hxsl.Shader.prototype,{
	intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,translucencyTexture__: null
	,get_translucencyTexture: function() {
		return this.translucencyTexture__;
	}
	,set_translucencyTexture: function(_v) {
		return this.translucencyTexture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.intensity__;
		case 1:
			return this.translucencyTexture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.intensity__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.SSSFlesh.prototype);
		s.shader = this.shader;
		s.intensity__ = this.intensity__;
		s.translucencyTexture__ = this.translucencyTexture__;
		return s;
	}
	,__class__: shaders.SSSFlesh
	,__properties__: {set_translucencyTexture:"set_translucencyTexture",get_translucencyTexture:"get_translucencyTexture",set_intensity:"set_intensity",get_intensity:"get_intensity"}
});
shaders.ShadowFadeShader = $hxClasses["shaders.ShadowFadeShader"] = function() {
	this.camPos__ = new h3d.Vector();
	this.power__ = 0;
	this.start__ = 0;
	this.end__ = 0;
	hxsl.Shader.call(this);
};
shaders.ShadowFadeShader.__name__ = "shaders.ShadowFadeShader";
shaders.ShadowFadeShader._SHADER = null;
shaders.ShadowFadeShader.__super__ = hxsl.Shader;
shaders.ShadowFadeShader.prototype = $extend(hxsl.Shader.prototype,{
	end__: null
	,get_end: function() {
		return this.end__;
	}
	,set_end: function(_v) {
		return this.end__ = _v;
	}
	,start__: null
	,get_start: function() {
		return this.start__;
	}
	,set_start: function(_v) {
		return this.start__ = _v;
	}
	,power__: null
	,get_power: function() {
		return this.power__;
	}
	,set_power: function(_v) {
		return this.power__ = _v;
	}
	,camPos__: null
	,get_camPos: function() {
		return this.camPos__;
	}
	,set_camPos: function(_v) {
		return this.camPos__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.end__;
		case 1:
			return this.start__;
		case 2:
			return this.power__;
		case 3:
			return this.camPos__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.end__;
		case 1:
			return this.start__;
		case 2:
			return this.power__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.ShadowFadeShader.prototype);
		s.shader = this.shader;
		s.end__ = this.end__;
		s.start__ = this.start__;
		s.power__ = this.power__;
		s.camPos__ = this.camPos__;
		return s;
	}
	,__class__: shaders.ShadowFadeShader
	,__properties__: {set_camPos:"set_camPos",get_camPos:"get_camPos",set_power:"set_power",get_power:"get_power",set_start:"set_start",get_start:"get_start",set_end:"set_end",get_end:"get_end"}
});
shaders.UVDistortion = $hxClasses["shaders.UVDistortion"] = function() {
	this.scale__ = new h3d.Vector();
	this.scrollSpeed__ = new h3d.Vector();
	this.intensity__ = 0;
	hxsl.Shader.call(this);
};
shaders.UVDistortion.__name__ = "shaders.UVDistortion";
shaders.UVDistortion._SHADER = null;
shaders.UVDistortion.__super__ = hxsl.Shader;
shaders.UVDistortion.prototype = $extend(hxsl.Shader.prototype,{
	noiseTexture__: null
	,get_noiseTexture: function() {
		return this.noiseTexture__;
	}
	,set_noiseTexture: function(_v) {
		return this.noiseTexture__ = _v;
	}
	,directionalNoise__: null
	,get_directionalNoise: function() {
		return this.directionalNoise__;
	}
	,set_directionalNoise: function(_v) {
		this.constModified = true;
		return this.directionalNoise__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,scrollSpeed__: null
	,get_scrollSpeed: function() {
		return this.scrollSpeed__;
	}
	,set_scrollSpeed: function(_v) {
		return this.scrollSpeed__ = _v;
	}
	,scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.directionalNoise__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.noiseTexture__;
		case 1:
			return this.directionalNoise__;
		case 2:
			return this.intensity__;
		case 3:
			return this.scrollSpeed__;
		case 4:
			return this.scale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 2) {
			return this.intensity__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.UVDistortion.prototype);
		s.shader = this.shader;
		s.noiseTexture__ = this.noiseTexture__;
		s.directionalNoise__ = this.directionalNoise__;
		s.intensity__ = this.intensity__;
		s.scrollSpeed__ = this.scrollSpeed__;
		s.scale__ = this.scale__;
		return s;
	}
	,__class__: shaders.UVDistortion
	,__properties__: {set_scale:"set_scale",get_scale:"get_scale",set_scrollSpeed:"set_scrollSpeed",get_scrollSpeed:"get_scrollSpeed",set_intensity:"set_intensity",get_intensity:"get_intensity",set_directionalNoise:"set_directionalNoise",get_directionalNoise:"get_directionalNoise",set_noiseTexture:"set_noiseTexture",get_noiseTexture:"get_noiseTexture"}
});
shaders.UVGradient = $hxClasses["shaders.UVGradient"] = function() {
	this.vGrad__ = 0;
	this.uGrad__ = 0;
	hxsl.Shader.call(this);
};
shaders.UVGradient.__name__ = "shaders.UVGradient";
shaders.UVGradient._SHADER = null;
shaders.UVGradient.__super__ = hxsl.Shader;
shaders.UVGradient.prototype = $extend(hxsl.Shader.prototype,{
	uGrad__: null
	,get_uGrad: function() {
		return this.uGrad__;
	}
	,set_uGrad: function(_v) {
		return this.uGrad__ = _v;
	}
	,vGrad__: null
	,get_vGrad: function() {
		return this.vGrad__;
	}
	,set_vGrad: function(_v) {
		return this.vGrad__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uGrad__;
		case 1:
			return this.vGrad__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.uGrad__;
		case 1:
			return this.vGrad__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.UVGradient.prototype);
		s.shader = this.shader;
		s.uGrad__ = this.uGrad__;
		s.vGrad__ = this.vGrad__;
		return s;
	}
	,__class__: shaders.UVGradient
	,__properties__: {set_vGrad:"set_vGrad",get_vGrad:"get_vGrad",set_uGrad:"set_uGrad",get_uGrad:"get_uGrad"}
});
shaders.UVMultiply = $hxClasses["shaders.UVMultiply"] = function() {
	this.value__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
shaders.UVMultiply.__name__ = "shaders.UVMultiply";
shaders.UVMultiply._SHADER = null;
shaders.UVMultiply.__super__ = hxsl.Shader;
shaders.UVMultiply.prototype = $extend(hxsl.Shader.prototype,{
	value__: null
	,get_value: function() {
		return this.value__;
	}
	,set_value: function(_v) {
		return this.value__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.value__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.UVMultiply.prototype);
		s.shader = this.shader;
		s.value__ = this.value__;
		return s;
	}
	,__class__: shaders.UVMultiply
	,__properties__: {set_value:"set_value",get_value:"get_value"}
});
shaders.UVSweep = $hxClasses["shaders.UVSweep"] = function() {
	this.useU__ = false;
	this.width__ = 1;
	this.saturation__ = 0;
	this.progress__ = 0;
	hxsl.Shader.call(this);
};
shaders.UVSweep.__name__ = "shaders.UVSweep";
shaders.UVSweep._SHADER = null;
shaders.UVSweep.__super__ = hxsl.Shader;
shaders.UVSweep.prototype = $extend(hxsl.Shader.prototype,{
	progress__: null
	,get_progress: function() {
		return this.progress__;
	}
	,set_progress: function(_v) {
		return this.progress__ = _v;
	}
	,saturation__: null
	,get_saturation: function() {
		return this.saturation__;
	}
	,set_saturation: function(_v) {
		return this.saturation__ = _v;
	}
	,width__: null
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,useU__: null
	,get_useU: function() {
		return this.useU__;
	}
	,set_useU: function(_v) {
		this.constModified = true;
		return this.useU__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useU__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.progress__;
		case 1:
			return this.saturation__;
		case 2:
			return this.width__;
		case 3:
			return this.useU__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.progress__;
		case 1:
			return this.saturation__;
		case 2:
			return this.width__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.UVSweep.prototype);
		s.shader = this.shader;
		s.progress__ = this.progress__;
		s.saturation__ = this.saturation__;
		s.width__ = this.width__;
		s.useU__ = this.useU__;
		return s;
	}
	,__class__: shaders.UVSweep
	,__properties__: {set_useU:"set_useU",get_useU:"get_useU",set_width:"set_width",get_width:"get_width",set_saturation:"set_saturation",get_saturation:"get_saturation",set_progress:"set_progress",get_progress:"get_progress"}
});
shaders.UVTransform = $hxClasses["shaders.UVTransform"] = function() {
	this.USE_SOURCE_UV__ = true;
	this.scaleY__ = 1;
	this.scaleX__ = 1;
	this.shiftSpeedY__ = 0;
	this.shiftSpeedX__ = 0;
	this.shiftY__ = 0;
	this.shiftX__ = 0;
	hxsl.Shader.call(this);
};
shaders.UVTransform.__name__ = "shaders.UVTransform";
shaders.UVTransform._SHADER = null;
shaders.UVTransform.__super__ = hxsl.Shader;
shaders.UVTransform.prototype = $extend(hxsl.Shader.prototype,{
	shiftX__: null
	,get_shiftX: function() {
		return this.shiftX__;
	}
	,set_shiftX: function(_v) {
		return this.shiftX__ = _v;
	}
	,shiftY__: null
	,get_shiftY: function() {
		return this.shiftY__;
	}
	,set_shiftY: function(_v) {
		return this.shiftY__ = _v;
	}
	,shiftSpeedX__: null
	,get_shiftSpeedX: function() {
		return this.shiftSpeedX__;
	}
	,set_shiftSpeedX: function(_v) {
		return this.shiftSpeedX__ = _v;
	}
	,shiftSpeedY__: null
	,get_shiftSpeedY: function() {
		return this.shiftSpeedY__;
	}
	,set_shiftSpeedY: function(_v) {
		return this.shiftSpeedY__ = _v;
	}
	,scaleX__: null
	,get_scaleX: function() {
		return this.scaleX__;
	}
	,set_scaleX: function(_v) {
		return this.scaleX__ = _v;
	}
	,scaleY__: null
	,get_scaleY: function() {
		return this.scaleY__;
	}
	,set_scaleY: function(_v) {
		return this.scaleY__ = _v;
	}
	,USE_SOURCE_UV__: null
	,get_USE_SOURCE_UV: function() {
		return this.USE_SOURCE_UV__;
	}
	,set_USE_SOURCE_UV: function(_v) {
		this.constModified = true;
		return this.USE_SOURCE_UV__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.USE_SOURCE_UV__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.shiftX__;
		case 1:
			return this.shiftY__;
		case 2:
			return this.shiftSpeedX__;
		case 3:
			return this.shiftSpeedY__;
		case 4:
			return this.scaleX__;
		case 5:
			return this.scaleY__;
		case 6:
			return this.USE_SOURCE_UV__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.shiftX__;
		case 1:
			return this.shiftY__;
		case 2:
			return this.shiftSpeedX__;
		case 3:
			return this.shiftSpeedY__;
		case 4:
			return this.scaleX__;
		case 5:
			return this.scaleY__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.UVTransform.prototype);
		s.shader = this.shader;
		s.shiftX__ = this.shiftX__;
		s.shiftY__ = this.shiftY__;
		s.shiftSpeedX__ = this.shiftSpeedX__;
		s.shiftSpeedY__ = this.shiftSpeedY__;
		s.scaleX__ = this.scaleX__;
		s.scaleY__ = this.scaleY__;
		s.USE_SOURCE_UV__ = this.USE_SOURCE_UV__;
		return s;
	}
	,__class__: shaders.UVTransform
	,__properties__: {set_USE_SOURCE_UV:"set_USE_SOURCE_UV",get_USE_SOURCE_UV:"get_USE_SOURCE_UV",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_shiftSpeedY:"set_shiftSpeedY",get_shiftSpeedY:"get_shiftSpeedY",set_shiftSpeedX:"set_shiftSpeedX",get_shiftSpeedX:"get_shiftSpeedX",set_shiftY:"set_shiftY",get_shiftY:"get_shiftY",set_shiftX:"set_shiftX",get_shiftX:"get_shiftX"}
});
shaders.UnitShape = $hxClasses["shaders.UnitShape"] = function() {
	this.alpha__ = 0;
	this.color__ = new h3d.Vector();
	hxsl.Shader.call(this);
};
shaders.UnitShape.__name__ = "shaders.UnitShape";
shaders.UnitShape._SHADER = null;
shaders.UnitShape.__super__ = hxsl.Shader;
shaders.UnitShape.prototype = $extend(hxsl.Shader.prototype,{
	color__: null
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,alpha__: null
	,get_alpha: function() {
		return this.alpha__;
	}
	,set_alpha: function(_v) {
		return this.alpha__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.alpha__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.alpha__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.UnitShape.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.alpha__ = this.alpha__;
		return s;
	}
	,__class__: shaders.UnitShape
	,__properties__: {set_alpha:"set_alpha",get_alpha:"get_alpha",set_color:"set_color",get_color:"get_color"}
});
shaders.VertexDisplacement = $hxClasses["shaders.VertexDisplacement"] = function() {
	this.smoothEdge__ = 0;
	this.scrollSpeed__ = new h3d.Vector();
	this.intensity__ = 0;
	this.Z__ = false;
	this.Y__ = false;
	this.X__ = false;
	hxsl.Shader.call(this);
};
shaders.VertexDisplacement.__name__ = "shaders.VertexDisplacement";
shaders.VertexDisplacement._SHADER = null;
shaders.VertexDisplacement.__super__ = hxsl.Shader;
shaders.VertexDisplacement.prototype = $extend(hxsl.Shader.prototype,{
	X__: null
	,get_X: function() {
		return this.X__;
	}
	,set_X: function(_v) {
		this.constModified = true;
		return this.X__ = _v;
	}
	,Y__: null
	,get_Y: function() {
		return this.Y__;
	}
	,set_Y: function(_v) {
		this.constModified = true;
		return this.Y__ = _v;
	}
	,Z__: null
	,get_Z: function() {
		return this.Z__;
	}
	,set_Z: function(_v) {
		this.constModified = true;
		return this.Z__ = _v;
	}
	,tex__: null
	,get_tex: function() {
		return this.tex__;
	}
	,set_tex: function(_v) {
		return this.tex__ = _v;
	}
	,intensity__: null
	,get_intensity: function() {
		return this.intensity__;
	}
	,set_intensity: function(_v) {
		return this.intensity__ = _v;
	}
	,scrollSpeed__: null
	,get_scrollSpeed: function() {
		return this.scrollSpeed__;
	}
	,set_scrollSpeed: function(_v) {
		return this.scrollSpeed__ = _v;
	}
	,smoothEdge__: null
	,get_smoothEdge: function() {
		return this.smoothEdge__;
	}
	,set_smoothEdge: function(_v) {
		return this.smoothEdge__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.X__) {
			this.constBits |= 1;
		}
		if(this.Y__) {
			this.constBits |= 2;
		}
		if(this.Z__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.X__;
		case 1:
			return this.Y__;
		case 2:
			return this.Z__;
		case 3:
			return this.tex__;
		case 4:
			return this.intensity__;
		case 5:
			return this.scrollSpeed__;
		case 6:
			return this.smoothEdge__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 4:
			return this.intensity__;
		case 6:
			return this.smoothEdge__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.VertexDisplacement.prototype);
		s.shader = this.shader;
		s.X__ = this.X__;
		s.Y__ = this.Y__;
		s.Z__ = this.Z__;
		s.tex__ = this.tex__;
		s.intensity__ = this.intensity__;
		s.scrollSpeed__ = this.scrollSpeed__;
		s.smoothEdge__ = this.smoothEdge__;
		return s;
	}
	,__class__: shaders.VertexDisplacement
	,__properties__: {set_smoothEdge:"set_smoothEdge",get_smoothEdge:"get_smoothEdge",set_scrollSpeed:"set_scrollSpeed",get_scrollSpeed:"get_scrollSpeed",set_intensity:"set_intensity",get_intensity:"get_intensity",set_tex:"set_tex",get_tex:"get_tex",set_Z:"set_Z",get_Z:"get_Z",set_Y:"set_Y",get_Y:"get_Y",set_X:"set_X",get_X:"get_X"}
});
shaders.WorldMapDirShadow = $hxClasses["shaders.WorldMapDirShadow"] = function() {
	h3d.shader.DirShadow.call(this);
};
shaders.WorldMapDirShadow.__name__ = "shaders.WorldMapDirShadow";
shaders.WorldMapDirShadow._SHADER = null;
shaders.WorldMapDirShadow.__super__ = h3d.shader.DirShadow;
shaders.WorldMapDirShadow.prototype = $extend(h3d.shader.DirShadow.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.PCF_SAMPLES__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("PCF_SAMPLES" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl.Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl.Channel.Unknown) {
			if(this.shadowMap__.format == h3d.mat.Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl.Channel.PackedFloat;
			} else {
				throw haxe.Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDisk__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.WorldMapDirShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.PCF_SAMPLES__ = this.PCF_SAMPLES__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowRes__ = this.shadowRes__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowProj__ = this.shadowProj__;
		s.shadowBias__ = this.shadowBias__;
		s.poissonDisk__ = this.poissonDisk__;
		return s;
	}
	,__class__: shaders.WorldMapDirShadow
});
shaders.WorldUV = $hxClasses["shaders.WorldUV"] = function() {
	this.rotation__ = 0;
	this.scale__ = 0;
	hxsl.Shader.call(this);
	this.scale__ = 1.0;
	this.rotation__ = 1.0;
};
shaders.WorldUV.__name__ = "shaders.WorldUV";
shaders.WorldUV._SHADER = null;
shaders.WorldUV.__super__ = hxsl.Shader;
shaders.WorldUV.prototype = $extend(hxsl.Shader.prototype,{
	scale__: null
	,get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,rotation__: null
	,get_rotation: function() {
		return this.rotation__;
	}
	,set_rotation: function(_v) {
		return this.rotation__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.rotation__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.rotation__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(shaders.WorldUV.prototype);
		s.shader = this.shader;
		s.scale__ = this.scale__;
		s.rotation__ = this.rotation__;
		return s;
	}
	,__class__: shaders.WorldUV
	,__properties__: {set_rotation:"set_rotation",get_rotation:"get_rotation",set_scale:"set_scale",get_scale:"get_scale"}
});
shaders.ZoneBorder = $hxClasses["shaders.ZoneBorder"] = function() {
	hxsl.Shader.call(this);
};
shaders.ZoneBorder.__name__ = "shaders.ZoneBorder";
shaders.ZoneBorder._SHADER = null;
shaders.ZoneBorder.__super__ = hxsl.Shader;
shaders.ZoneBorder.prototype = $extend(hxsl.Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: shaders.ZoneBorder
});
function $getIterator(o) { if( o instanceof Array ) return new haxe.iterators.ArrayIterator(o); else return o.iterator(); }
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Const.STENCIL_NONE = 0;
Const.STENCIL_UNITS = 4;
Const.STENCIL_OUTLINE = 8;
Const.STENCIL_OBSTACLE = 16;
Const.TERRAIN_SNOW = -16773632;
Const.TERRAIN_MARSHLANDS = -16773888;
Const.TERRAIN_ROAD = -9437184;
Const.TERRAIN_ROAD_INVISIBLE = -8388608;
Const.TERRAIN_FOREST = -16719872;
Const.TERRAIN_BRIDGE = -7340032;
gfx.IndirectBlend.SRC = "HXSLEWdmeC5JbmRpcmVjdEJsZW5kNQEGYWxiZWRvBQsEAAACBWRlcHRoAwQAAAMGbm9ybWFsBQsEAAAECW1ldGFsbmVzcwMEAAAFCXJvdWdobmVzcwMEAAAGCW9jY2x1c2lvbgMEAAAHCGVtaXNzaXZlAwQAAAgHY3VzdG9tMQMEAAAJB2N1c3RvbTIDBAAAChBwYnJTcGVjdWxhckNvbG9yBQsEAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwEdmlldwULBAAADQNOZFYDBAAADg5jYW1lcmFQb3NpdGlvbgULAgAADwpwaXhlbENvbG9yBQwEAAAQBnNoYWRvdwMEAAARE2RyYXdJbmRpcmVjdERpZmZ1c2UCAgABAAAAAAASFGRyYXdJbmRpcmVjdFNwZWN1bGFyAgIAAQAAAAAAEwdzaG93U2t5AgIAAQAAAAAAFAhza3lDb2xvcgICAAEAAAAAABUGaXJyTHV0CgIAABYKaXJyRGlmZnVzZQwCAAAXC2lyclNwZWN1bGFyDAIAABgRaXJyU3BlY3VsYXJMZXZlbHMDAgAAGQhpcnJQb3dlcgMCAAAaC2lyclJvdGF0aW9uBQoCAAAbBnNreU1hcAwCAAAcCXNreUhkck1heAMCAAAdDGdhbW1hQ29ycmVjdAICAAEAAAAAAB4RY2FtZXJhSW52Vmlld1Byb2oHAgAAHw1za3lDb2xvclZhbHVlBQsCAAAgDWVtaXNzaXZlUG93ZXIDAgAAIQxjYWxjdWxhdGVkVVYFCgQAACIJVVNFX0JMRU5EAgIAAQAAAAAAIwtpcnJEaWZmdXNlQQwCAAAkDGlyclNwZWN1bGFyQQwCAAAlC2lyckRpZmZ1c2VCDAIAACYMaXJyU3BlY3VsYXJCDAIAACcLYmxlbmRBbW91bnQDAgAAKBJpcnJTcGVjdWxhckxldmVsc0EDAgAAKRJpcnJTcGVjdWxhckxldmVsc0IDAgAAKg1wb3dlck92ZXJyaWRlAwIAACsQX19pbml0X19mcmFnbWVudA4GAAAsF2dldEFuaXNvdHJvcGljUm91Z2huZXNzDgYAAC0dc21pdGhHR1hDb3JyZWxhdGVkQW5pc290cm9waWMOBgAALiBub3JtYWxEaXN0cmlidXRpb25HR1hBbmlzb3Ryb3BpYw4GAAAvFW5vcm1hbERpc3RyaWJ1dGlvbkdHWA4GAAAwEmdlb21ldHJ5U2NobGlja0dHWA4GAAAxDmZyZXNuZWxTY2hsaWNrDgYAADIMcm90YXRlTm9ybWFsDgYAADMIZnJhZ21lbnQOBgAANA5nZXRFbnZTcGVjdWxhcg4GAAA1DWdldEVudkRpZmZ1c2UOBgAACwIrAAAFAwYEAhADAQMAAAAAAADwPwMDBgQCDwUMCQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwFAgYEAgwFCwkDHw4BBAYDAg4FCwILBQsFCwULBQsFCwYEAg0DCQMWDgIJAx0OAgIDBQsCDAULAwEDAAAAAAAAAAADAwMAAAMsAjYJcm91Z2huZXNzAwQAADcKYW5pc290cm9weQMEAAAFCgUDCDgCYXQDBAAACQMWDgIGAQI2AwQGAAEDAAAAAAAA8D8DAjcDAwMDAQP8qfHSTWJQPwMDAAg5AmFiAwQAAAkDFg4CBgECNgMEBgMBAwAAAAAAAPA/AwI3AwMDAwED/Knx0k1iUD8DAwANCQMoDgICOAMCOQMFCgAAAy0IOgJhdAMEAAA7AmFiAwQAADwDVGRWAwQAAD0DQmRWAwQAAD4DVGRMAwQAAD8DQmRMAwQAAEADTmRWAwQAAEEDTmRMAwQAAAMFBAhCB2xhbWJkYVYDBAAABgECQQMJAxsOAQkDKQ4DBgECOgMCPAMDBgECOwMCPQMDAkADBQsDAwAIQwdsYW1iZGFMAwQAAAYBAkADCQMbDgEJAykOAwYBAjoDAj4DAwYBAjsDAj8DAwJBAwULAwMACEQBdgMEAAAGAgEDAAAAAAAA4D8DBAYAAkIDAkMDAwMDAA0JAzUOAQJEAwMAAAMuB0UCYXQDBAAARgJhYgMEAABHA05kSAMEAABIA1RkSAMEAABJA0JkSAMEAABKCXJvdWdobmVzcwMEAABLCmFuaXNvdHJvcHkDBAAAAwUFCEwCYTIDBAAABgECRQMCRgMDAAhNAXYFCwQAAAkDKQ4DBgECRgMCSAMDBgECRQMCSQMDBgECTAMCRwMDBQsACE4CdjIDBAAACQMdDgICTQULAk0FCwMACE8CdzIDBAAABgICTAMCTgMDAA0GAQYBBgECTAMCTwMDAk8DAwQGAgEDAAAAAAAA8D8DAQMYLURU+yEJQAMDAwMAAAMvAlADTmRIAwQAAFEJcm91Z2huZXNzAwQAAAMFBAhSBWFscGhhAwQAAAYBAlEDAlEDAwAIUwZhbHBoYTIDBAAABgECUgMCUgMDAAhUBWRlbm9tAwQAAAYABgEGAQJQAwJQAwMEBgMCUwMBAwAAAAAAAPA/AwMDAwEDAAAAAAAA8D8DAwANBgICUwMEBgEGAQEDGC1EVPshCUADAlQDAwJUAwMDAwAAAzADVQNOZFYDBAAAVgNOZEwDBAAAVwlyb3VnaG5lc3MDBAAAAwUECFgBawMEAAAEBgACVwMBAwAAAAAAAPA/AwMDAAaBAlgDAlgDAwaBAlgDAQMAAAAAAADAPwMDDQYBBgEEBgIBAwAAAAAAAPA/AwQGAAYBAlUDBAYDAQMAAAAAAADwPwMCWAMDAwMCWAMDAwMDBAYCAQMAAAAAAADwPwMEBgAGAQJWAwQGAwEDAAAAAAAA8D8DAlgDAwMDAlgDAwMDAwMBAwAAAAAAANA/AwMAAAMxAlkDVmRIAwQAAFoCRjAFCwQAAAULBQENBgACWgULBgEEBgMBAwAAAAAAAPA/AwJaBQsFCwULCQMLDgEGAQQGAwYBAQO5cCAkCzgWwAMCWQMDAQMC8bp+we4bQAMDAwJZAwMDBQsFCwAAAzIBWwFuBQsEAAAFCwUBDQkDKQ4DBgMGAQoCWwULAAADCgIaBQoAAAMDBgEKAlsFCwQAAwoCGgUKBAADAwMGAAYBCgJbBQsAAAMKAhoFCgQAAwMGAQoCWwULBAADCgIaBQoAAAMDAwoCWwULCAADBQsAAAEzAAAFAghcBWlzU2t5AgQAAAYKCQMdDgICAwULAgMFCwMBAwAAAAAAAAAAAwIACwJcAgUBCwITAgUDCF0FY29sb3IFCwQAAAAACwIUAgUCBgQCXQULAh8FCwULCwIdAgaBAl0FCwJdBQsFCwAAAAUFCF4Gbm9ybWFsBQsEAAAJAx8OAQQGAQkDKQ4CCQM7DgECIQUKBQoBAwAAAAAAAPA/AwULCQM0DgECHgcIBQsFCwULAAYEAl0FCwoJAyEOAgIbDAkCMg4BAl4FCwULBQySAAULBQsGBAJdBQsJAxUOAgJdBQsCHAMFCwULCwIdAgaBAl0FCwJdBQsFCwAABoECXQULAhkDBQsAAAaACgIPBQySAAULAl0FCwULAAwAAAAFCAhfB2RpZmZ1c2UFCwQAAAkDKQ4BAQMAAAAAAAAAAAMFCwAIYAhzcGVjdWxhcgULBAAACQMpDgEBAwAAAAAAAAAAAwULAAhhAkYwBQsEAAACCgULAAhiAUYFCwQAAAYAAmEFCwYBBAYDCQMWDgIJAykOAQYDAQMAAAAAAADwPwMCBQMDBQsCYQULBQsCYQULBQsFCwkDCw4BBgEEBgMGAQEDuXAgJAs4FsADAg0DAwEDAvG6fsHuG0ADAwMCDQMDAwULBQsACwIRAgUBBgQCXwULBgEJAjUOAQIDBQsFCwIBBQsFCwULAAAACwISAgUECGMKcmVmbGVjdFZlYwULBAAACQMgDgIHAwIMBQsFCwIDBQsFCwAIZAdlbnZTcGVjBQsEAAAJAjQOAgJjBQsCBQMFCwAIZQdlbnZCUkRGBQwEAAAJAyEOAgIVCgkDKA4CAgUDAg0DBQoFDAAGBAJgBQsGAQJkBQsEBgAGAQJiBQsKAmUFDAAAAwULCgJlBQwEAAMFCwULBQsFCwAAAAhmCGluZGlyZWN0BQsEAAAGAQQGAAYBBgECXwULBAYDAQMAAAAAAADwPwMCBAMDAwULBAYDAQMAAAAAAADwPwMCYgULBQsFCwULAmAFCwULBQsCGQMFCwAGgAoCDwUMkgAFCwYABgECZgULAgYDBQsGAQYBAgEFCwIHAwULAiADBQsFCwULAAAAAzQCZwZub3JtYWwFCwQAAGgJcm91Z2huZXNzAwQAAAULBQMGBAJnBQsJAjIOAQJnBQsFCwULCwIiAg0KCQMYDgMJAyIOAwIkDAJnBQsGAQJoAwIoAwMFDAkDIg4DAiYMAmcFCwYBAmgDAikDAwUMAicDBQySAAULAAAADQoJAyIOAwIXDAJnBQsGAQJoAwIYAwMFDJIABQsAAAM1AWkGbm9ybWFsBQsEAAAFCwUDBgQCaQULCQIyDgECaQULBQsFCwsCIgINCgkDGA4DCQMhDgICIwwCaQULBQwJAyEOAgIlDAJpBQsFDAInAwUMkgAFCwAAAA0KCQMhDgICFgwCaQULBQySAAULAAA";
gfx.FadeShader.SRC = "HXSLDmdmeC5GYWRlU2hhZGVyBAEJZmFkZUNvbG9yBQsCAAACCmZhZGVGYWN0b3IDAgAAAwZvdXRwdXQNAQEEBWNvbG9yBQwEAwAEAAAFCGZyYWdtZW50DgYAAAEBBQAABQEGBAoCBAUMkgAFCwkDGA4DCgIEBQySAAULAgEFCwICAwULBQsA";
gfx.shader.ColorizeShader.SRC = "HXSLGWdmeC5zaGFkZXIuQ29sb3JpemVTaGFkZXIGAQVjb2xvcgULAgAAAgtzcGVjVGV4dHVyZQoCAAADBmludmVydAICAAEAAAAAAAQMY2FsY3VsYXRlZFVWBQoEAAAFCnBpeGVsQ29sb3IFDAQAAAYIZnJhZ21lbnQOBgAAAQEGAAAFAwgHBmZhY3RvcgMEAAAKCQMhDgICAgoCBAUKBQwMAAMACwIDAgYEAgcDBgMBAwAAAAAAAPA/AwIHAwMDAAAGBAoCBQUMkgAFCwkDGA4DBgEKAgUFDJIABQsCAQULBQsKAgUFDJIABQsCBwMFCwULAA";
lib.ScriptConfiguration._ = hide.comp.ScriptEditor.register(lib.ScriptConfiguration);
prefab._AnimTest.UnitMode.Fist = "F";
prefab._AnimTest.UnitMode.Sword = "S";
prefab._AnimTest.UnitMode.Bow = "B";
prefab._AnimTest.UnitMode.Dagger = "D";
prefab._AnimTest.UnitMode.Polearm = "P";
prefab._AnimTest.UnitMode.Mace = "M";
prefab._AnimTest.UnitMode.Axe = "A";
prefab._AnimTest.UnitMode.SwordShield = "SS";
prefab._AnimTest.UnitMode.DaggerShield = "DS";
prefab._AnimTest.UnitMode.MaceShield = "MS";
prefab._AnimTest.UnitMode.AxeShield = "AS";
prefab._AnimTest.UnitMode.Sword2H = "S2";
prefab._AnimTest.UnitMode.Mace2H = "M2";
prefab._AnimTest.UnitMode.Axe2H = "A2";
prefab.AnimTest._ = hrt.prefab.Library.register("anim-test",prefab.AnimTest);
prefab.ApplyShadowAttenuationShader.SRC = "HXSLI3ByZWZhYi5BcHBseVNoYWRvd0F0dGVudWF0aW9uU2hhZGVyAwEHY3VzdG9tMQMEAAACBnNoYWRvdwMEAAADCGZyYWdtZW50DgYAAAEBAwAABQIIBA9hdHRlbnVhdGVTaGFkb3cDBAAACQM1DgECAQMDAAYEAgIDBgACBAMGAQkDNQ4BBgMBAwAAAAAAAPA/AwIEAwMDAgIDAwMDAA";
prefab.ApplyOcclusionAttenuationShader.SRC = "HXSLJnByZWZhYi5BcHBseU9jY2x1c2lvbkF0dGVudWF0aW9uU2hhZGVyAwEHY3VzdG9tMQMEAAACCW9jY2x1c2lvbgMEAAADCGZyYWdtZW50DgYAAAEBAwAABQIIBA9hdHRlbnVhdGVTaGFkb3cDBAAACQM1DgECAQMDAAYEAgIDBgACBAMGAQQGAwEDAAAAAAAA8D8DAgQDAwMCAgMDAwMA";
prefab.ApplyShadowAttenuation._ = hrt.prefab.Library.register("rfx.applyShadowAttenuation",prefab.ApplyShadowAttenuation);
prefab.BattleDecalShader.SRC = "HXSLGHByZWZhYi5CYXR0bGVEZWNhbFNoYWRlcj0BBmdsb2JhbA0BBAIJcGl4ZWxTaXplBQoAAQADCW1vZGVsVmlldwcAAQEDBBBtb2RlbFZpZXdJbnZlcnNlBwABAQMFBHRpbWUDAAEAAAAABgZjYW1lcmENAgEHD2ludmVyc2VWaWV3UHJvagcABgAAAAAIBm91dHB1dA0DBAkOYWxiZWRvU3RyZW5ndGgDBAgACg5ub3JtYWxTdHJlbmd0aAMECAALC3BiclN0cmVuZ3RoAwQIAAwQZW1pc3NpdmVTdHJlbmd0aAMECAAEAAANCENFTlRFUkVEAgIAAQAAAAAADg5hbGJlZG9TdHJlbmd0aAMCAAAPDm5vcm1hbFN0cmVuZ3RoAwIAABALcGJyU3RyZW5ndGgDAgAAERBlbWlzc2l2ZVN0cmVuZ3RoAwIAABIIZGVwdGhNYXARAQAAABMGbm9ybWFsBQsCAAAUB3RhbmdlbnQFCwIAABUJZmFkZVBvd2VyAwIAABYJZmFkZVN0YXJ0AwIAABcHZmFkZUVuZAMCAAAYDWFsYmVkb1RleHR1cmUKAgAAGQ1ub3JtYWxUZXh0dXJlCgIAABoKcGJyVGV4dHVyZQoCAAAbDGNhbGN1bGF0ZWRVVgUKBAAAHBJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4YcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAfEXByb2plY3RlZFBvc2l0aW9uBQwEAAAgCnBpeGVsQ29sb3IFDAQAACEHdXZTY2FsZQMCAAAiEmJvcmRlck5vaXNlVGV4dHVyZQoCAAAjCm5vaXNlU2NhbGUDAgAAJBN1dkRpc3RvcnNpb25UZXh0dXJlCgIAACURdXZEaXN0b3JzaW9uU3BlZWQDAgAAJhV1dkRpc3RvcnNpb25JbnRlbnNpdHkDAgAAJxF1dkRpc3RvcnNpb25TY2FsZQMCAAAoDGdyb3VuZENvbG9yQQULAgAAKQxncm91bmRQb2ludEEDAgAAKgxncm91bmRDb2xvckIFCwIAACsMZ3JvdW5kUG9pbnRCAwIAACwMZ3JvdW5kQ29sb3JDBQsCAAAtDGdyb3VuZFBvaW50QwMCAAAuEnN0YXRpY0VtYmVyVGV4dHVyZQoCAAAv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";
prefab.BattleDecal._ = hrt.prefab.Library.register("battleDecal",prefab.BattleDecal);
prefab.BattleDitherShader.SRC = "HXSLGXByZWZhYi5CYXR0bGVEaXRoZXJTaGFkZXIKAQZnbG9iYWwNAQECCXBpeGVsU2l6ZQUKAAEAAAAAAwZhbW91bnQDAgAABBJJR05PUkVfWl9USFJFU0hPTEQCAgABAAAAAAAFBnpTdGFydAMCAAAGCHNjcmVlblVWBQoEAAAHEHJlbGF0aXZlUG9zaXRpb24FCwQAAAgKZGl0aGVyRmFkZQIEAAAJDGdldERpdGhlclZhbA4GAAAKEF9faW5pdF9fZnJhZ21lbnQOBgAACwhmcmFnbWVudA4GAAADAwkAAwUECAwJZGl0aGVyOHg4DwEAQAQAABJAAQIAAAAAAQECIAAAAAEBAggAAAABAQIoAAAAAQECAgAAAAEBAiIAAAABAQIKAAAAAQECKgAAAAEBAjAAAAABAQIQAAAAAQECOAAAAAEBAhgAAAABAQIyAAAAAQECEgAAAAEBAjoAAAABAQIaAAAAAQECDAAAAAEBAiwAAAABAQIEAAAAAQECJAAAAAEBAg4AAAABAQIuAAAAAQECBgAAAAEBAiYAAAABAQI8AAAAAQECHAAAAAEBAjQAAAABAQIUAAAAAQECPgAAAAEBAh4AAAABAQI2AAAAAQECFgAAAAEBAgMAAAABAQIjAAAAAQECCwAAAAEBAisAAAABAQIBAAAAAQECIQAAAAEBAgkAAAABAQIpAAAAAQECMwAAAAEBAhMAAAABAQI7AAAAAQECGwAAAAEBAjEAAAABAQIRAAAAAQECOQAAAAEBAhkAAAABAQIPAAAAAQECLwAAAAEBAgcAAAABAQInAAAAAQECDQAAAAEBAi0AAAABAQIFAAAAAQECJQAAAAEBAj8AAAABAQIfAAAAAQECNwAAAAEBAhcAAAABAQI9AAAAAQECHQAAAAEBAjUAAAABAQIVAAAAAQ8BAEAACA0BeAEEAAAJAyUOAQkDFA4CBgEKAgYFCgAAAwQGAgEDAAAAAAAAAEADCgICBQoAAAMDAwMBAwAAAAAAACBAAwMBAAgOAXkBBAAACQMlDgEJAxQOAgYBCgIGBQoEAAMEBgIBAwAAAAAAAABAAwoCAgUKBAADAwMDAQMAAAAAAAAgQAMDAQANBgIJAyYOARECDA8BAEAEBgACDQEGAQIOAQECCAAAAAEBAQEBAwEDAAAAAAAAUEADAwAAAgoAAAUBBQEGBAIIAgYOBgcCAwMJAgkOAAMCBAYPAgQCBgcKAgcFCwgAAwYAAgUDCQIJDgADAwICAgICAAABCwAABQELAggCDAAAAAA";
prefab.NoShadowDither.SRC = "HXSLFXByZWZhYi5Ob1NoYWRvd0RpdGhlcgIBCmRpdGhlckZhZGUCBAAAAghmcmFnbWVudA4GAAABAQIAAAUBBgQCAQIBAQACAgA";
prefab.BattleDither.noShadowDither = new prefab.NoShadowDither();
prefab.BattleDither._ = hrt.prefab.Library.register("battleDither",prefab.BattleDither);
prefab.BattleDithering._ = hrt.prefab.Library.register("rfx.battleDithering",prefab.BattleDithering);
prefab.VolumetricFogShader.SRC = "HXSLGnByZWZhYi5Wb2x1bWV0cmljRm9nU2hhZGVyNwEGY2FtZXJhDQEKAgR2aWV3BwABAAMEcHJvagcAAQAECHBvc2l0aW9uBQsAAQAFCHByb2pGbGlwAwABAAYIcHJvakRpYWcFCwABAAcIdmlld1Byb2oHAAEACA9pbnZlcnNlVmlld1Byb2oHAAEACQV6TmVhcgMAAQAKBHpGYXIDAAEACwNkaXIFCwMBAAAAAAwGZ2xvYmFsDQIEDQR0aW1lAwAMAA4JcGl4ZWxTaXplBQoADAAPCW1vZGVsVmlldwcADAEDEBBtb2RlbFZpZXdJbnZlcnNlBwAMAQMAAAARBWlucHV0DQMCEghwb3NpdGlvbgULAREAEwZub3JtYWwFCwERAAEAABQGb3V0cHV0DQQFFQhwb3NpdGlvbgUMBBQAFgVjb2xvcgUMBBQAFwVkZXB0aAMEFAAYBm5vcm1hbAULBBQAGQl3b3JsZERpc3QDBBQABAAAGhByZWxhdGl2ZVBvc2l0aW9uBQsEAAAbE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAABwYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAdEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAeEXByb2plY3RlZFBvc2l0aW9uBQwEAAAfCnBpeGVsQ29sb3IFDAQAACAFZGVwdGgDBAAAIQhzY3JlZW5VVgUKBAAAIglzcGVjUG93ZXIDBAAAIwlzcGVjQ29sb3IFCwQAACQJd29ybGREaXN0AwQAACUFc3RlcHMBAgABAAAAAAAmCGRlcHRoTWFwEQEAAAAnCG5vaXNlVGV4CgIAAQgoCm5vaXNlU2NhbGUDAgAAKQhub2lzZU1pbgMCAAAqCG5vaXNlTWF4AwIAACsHb2N0YXZlcwECAAEAAAAAACwKbGFjdW5hcml0eQMCAAAtC3BlcnNpc3RlbmNlAwIAAC4Gc3BlZWRYAwIAAC8Gc3BlZWRZAwIAADAGc3BlZWRaAwIAADEMaW5uZXJUdXJtb2lsAwIAADIEek1pbgMCAAAzBHpNYXgDAgAANAlmb2dBbW91bnQDAgAANQhmb2dQb3dlcgMCAAA2C2hlaWdodFBvd2VyAwIAADcMZmFkZURpc3RhbmNlAwIAADgQbm9pc2VFZGdlVGV4dHVyZQoCAAA5Dm5vaXNlRWRnZVNjYWxlAwIAADoIZm9nQ29sb3IFCwIAADsIbG93Q29sb3IFCwIAADwHc2hhZG93cwMCAAA9DWVtaXNzaXZlVmFsdWUDAgAAPhJmYWRlRWxldmF0aW9uU3RhcnQDAgAAPxBmYWRlRWxldmF0aW9uRW5kAwIAAEAJbWV0YWxuZXNzAwQAAEEJcm91Z2huZXNzAwQAAEIJb2NjbHVzaW9uAwQAAEMIZW1pc3NpdmUDBAAARAdjdXN0b20xAwQAAEUJcm91Z2hQYXNzDgYAAEYNZ2V0UG9zaXRpb25BdA4GAABHBW5vaXNlDgYAAEgHbm9pc2VBdA4GAABJD2dldEFtb3VudEJ5U3RlcA4GAABKDmdldENvbG9yQnlTdGVwDgYAAEsJZ2V0QW1vdW50DgYAAEwIZnJhZ21lbnQOBgAACANFAU0DcG9zBQsEAAAABQAAA0YBTgJ1dgUKBAAABQsFBQhPBWRlcHRoAwQAAAkDPw4CAiYRAQJOBQoDAAhQA3V2MgUKBAAACQM7DgECTgUKBQoACFEEdGVtcAUMBAAABgEJAyoOAwJQBQoCTwMBAwAAAAAAAPA/AwUMAggHBQwACFIIb3JpZ2luV1MFCwQAAAYCCgJRBQySAAULCgJRBQwMAAMFCwANAlIFCwAAA0cBUwNwb3MFCwQAAAMFBghUAWkFCwQAAAkDEQ4BAlMFCwULAAhVAWYFCwQAAAkDEw4BAlMFCwULAAYEAlUFCwYBBgECVQULAlUFCwULBAYDAQMAAAAAAAAIQAMGAQEDAAAAAAAAAEADAlUFCwULBQsFCwULBQsIVgJ1dgUKBAAABgAEBgAKAlQFCxEABQoGAQkDKA4CAQMAAAAAAIBCQAMBAwAAAAAA4G1AAwUKCgJUBQsIAAMFCgUKBQoKAlUFCxEABQoFCgAIVwJyZwUKBAAACgkDIg4DAicKBgIEBgACVgUKAQMAAAAAAADgPwMFCgUKAQMAAAAAAABwQAMFCgEDAAAAAAAAAAADBQwFAAUKAA0JAxgOAwoCVwUKAAADCgJXBQoEAAMKAlUFCwgAAwMAAANIAVgDcG9zBQsEAAADBQcIWQZhbW91bnQDBAAAAQMAAAAAAAAAAAMACFoDdG90AwQAAAEDAAAAAAAAAAADAAhbA3BvcwULBAAABgEGAQJYBQsBA5qZmZmZmbk/AwULAigDBQsACFwBawMEAAABAwAAAAAAAPA/AwAIXQF0BQsEAAAGAQINAwkDKQ4DAi4DAi8DAjADBQsFCwAVBnVucm9sbAAOXgFpAQQAAAYVAQIAAAAAAQIrAQ8BAAAFDQhfDHN0YXRpY09mZnNldAULBAAACQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFCwAIYAFmAwQAAAEDAAAAAAAA8D8DAAsGBQJeAQECAAAAAAECBQIGBAJgAwEDAAAAAAAA4D8DAwaAAlkDBgEGAQkDCA4CCQJHDgEGAwYDAlsFCwJdBQsFCwYBBgECXwULAg0DBQsCMQMFCwULAwI1AwMCXAMDAmADAwMAAAAGBAJfBQsJAykOAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPC/AwULBQsLBgUCXgEBAgEAAAABAgYEAl8FCwkDKQ4DAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDMzMzMzMz478DBQsFCwAACwYFAl4BAQICAAAAAQIGBAJfBQsJAykOAwEDzczMzMzM7L8DAQMAAAAAAAAAAAMBA5qZmZmZmfE/AwULBQsAAAsGBQJeAQECAwAAAAECBgQCXwULCQMpDgMBA5qZmZmZmek/AwEDZmZmZmZm7j8DAQMzMzMzMzPzvwMFCwULAAALBgUCXgEBAgQAAAABAgYEAl8FCwkDKQ4DAQMAAAAAAAAAAAMBA+F6FK5H4eq/AwEDzczMzMzM9L8DBQsFCwAACwYFAl4BAQIFAAAAAQIGBAJfBQsJAykOAwEDMzMzMzMz0z8DAQOamZmZmZmpvwMBA83MzMzMzOy/AwULBQsAAAaAAlkDBgEGAQkDCA4CCQJHDgEGAwYDAlsFCwJdBQsFCwYBBgECXwULAg0DBQsCMQMFCwULAwI1AwMCXAMDAmADAwMGgAJaAwJcAwMGgQJbBQsCLAMFCwaBAlwDAi0DAwAAAA0GAgJZAwJaAwMAAANJAWEDcG9zBQsEAAAFDAUBDQkDKg4BBgAGAQkCSA4BAmEFCwMEBgMCKgMCKQMDAwMCKQMDBQwAAANKAmIGYW1vdW50BQwEAABjBGhmdW4DBAAABQwFAQ0JAyoOAgYBCQMYDgMCOwULAjoFCwJjAwULCgJiBQwAAAMFCwoCYgUMAAADBQwAAANLAWQDcG9zBQsEAAAFDAUPCGUFdG9DYW0FCwQAAAYDAgQFCwJkBQsFCwAGBAJlBQsJAx8OAQJlBQsFCwULCGYDbG93AwQAAAIyAwAIZwRoaWdoAwQAAAIzAwAGgAJmAwoEBgEJAykOAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwULCQM0DgECDwcIBQsFCwgAAwMGgAJnAwoEBgEJAykOAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwULCQM0DgECDwcIBQsFCwgAAwMIaAtkZXB0aEZhY3RvcgMEAAAJAzUOAQYCBAYDAmcDCgJkBQsIAAMDAwQGAwJnAwJmAwMDAwMACGkBZAMEAAAGAgkDFg4CBgMCZgMKAmQFCwgAAwMBAwAAAAAAAAAAAwMKAmUFCwgAAwMABoACZAULBgECaQMCZQULBQsFCwhqCWNvbEFtb3VudAUMBAAACQMqDgEBAwAAAAAAAAAAAwUMAAhrCHN0ZXBTaXplAwQAAAYCBAYDAmcDCgJkBQsIAAMDAwQGAQoCZQULCAADCQMmDgECJQEDAwMDAA5sAWkBBAAABhUBAgAAAAABAiUBDwEAAAUFCG0EaGZ1bgMEAAAJAwgOAgkDNQ4BBgIEBgMKAmQFCwgAAwJmAwMDBAYDAmcDAmYDAwMDAwI2AwMACG4GYW1vdW50BQwEAAAJAkkOAQJkBQsFDAALBgcCNwMBAwAAAAAAAAAAAwIFBAhvBnJlbFBvcwULBAAABgECZAULCQM0DgECEAcIBQsACHAEZnBvcwUKBAAABgEKAm8FCxEABQoBAwAAAAAAAABAAwUKAAhxBGZhZGUDBAAABgMBAwAAAAAAAPA/AwkDNQ4BBgIJAxYOAgQGAwkDGw4BCQMdDgICcAUKAnAFCgMDAjcDAwMBAwAAAAAAAAAAAwMEBgMBAwAAAAAAAPA/AwI3AwMDAwMDAAaBAm4FDAYBAnEDBAYABgEKCQMhDgICOAoGAQoCZAULEQAFCgI5AwUKBQwAAAMEBgMBAwAAAAAAAPA/AwJxAwMDAwJxAwMDAwUMAAAABoACagUMCQJKDgICbgUMAm0DBQwFDAaAAmQFCwYBAmUFCwJrAwULBQsAAAYEAmoFDAYCAmoFDAkDJg4BAiUBAwUMBQwGgQoCagUMDAADBgECaAMCNAMDAw0CagUMAAABTAAABQ4IcgZ0YXJnZXQFCwQAAAkCRg4BAiEFCgULAAhzA2xvdwMEAAACMgMABoACcwMKBAYBCQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMFCwkDNA4BAg8HCAULBQsIAAMDCHQEZmFkZQMEAAABAwAAAAAAAPA/AwALBgYCPgMCPwMCBQEGBAJ0AwYDAQMAAAAAAADwPwMJAzUOAQYCBAYDBAYDAnMDAj4DAwMKAnIFCwgAAwMDAj8DAwMDAwAAAAkCRQ4BAnIFCwAGBAIfBQwJAzUOAQkCSw4BAnIFCwUMBQwFDAaBCgIfBQwMAAMCdAMDBgQCQAMBAwAAAAAAAAAAAwMGBAJBAwEDAAAAAAAA8D8DAwYEAkIDAQMAAAAAAADwPwMDBgQCQwMCPQMDBgQCHQULCQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFCwULBgQCRAMGAQoCHwUMDAADBAYDAQMAAAAAAADwPwMCPAMDAwMDAA";
prefab.BattleFogShader.SRC = "HXSLFnByZWZhYi5CYXR0bGVGb2dTaGFkZXJAAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVzdGVwcwECAAEAAAAAACYIZGVwdGhNYXARAQAAACcIbm9pc2VUZXgKAgABCCgKbm9pc2VTY2FsZQMCAAApCG5vaXNlTWluAwIAACoIbm9pc2VNYXgDAgAAKwdvY3RhdmVzAQIAAQAAAAAALApsYWN1bmFyaXR5AwIAAC0LcGVyc2lzdGVuY2UDAgAALgZzcGVlZFgDAgAALwZzcGVlZFkDAgAAMAZzcGVlZFoDAgAAMQxpbm5lclR1cm1vaWwDAgAAMgR6TWluAwIAADMEek1heAMCAAA0CWZvZ0Ftb3VudAMCAAA1CGZvZ1Bvd2VyAwIAADYLaGVpZ2h0UG93ZXIDAgAANwxmYWRlRGlzdGFuY2UDAgAAOBBub2lzZUVkZ2VUZXh0dXJlCgIAADkObm9pc2VFZGdl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";
prefab.VolumetricFog._ = hrt.prefab.Library.register("vlfog",prefab.VolumetricFog);
prefab.BattleFog._ = hrt.prefab.Library.register("battleFog",prefab.BattleFog);
prefab.DirLightWithCloudsAndAttenuation.SRC = "HXSLJ3ByZWZhYi5EaXJMaWdodFdpdGhDbG91ZHNBbmRBdHRlbnVhdGlvbhgBEXBickxpZ2h0RGlyZWN0aW9uBQsEAAACDXBickxpZ2h0Q29sb3IFCwQAAAMScGJyT2NjbHVzaW9uRmFjdG9yAwQAAAQTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAABQlvY2NsdXNpb24DBAAABgpsaWdodENvbG9yBQsCAAAHD29jY2x1c2lvbkZhY3RvcgMCAAAIBmNsb3VkcwoCAAAJBXNjYWxlAwIAAAoFc3BlZWQFCgIAAAsHb3BhY2l0eQMCAAAMCHJvdGF0aW9uBgIAAA0KaGFzRGlzdG9ydAICAAEAAAAAAA4HZGlzdG9ydAoCAAAPDGRpc3RvcnRTcGVlZAUKAgAAEAxkaXN0b3J0U2NhbGUDAgAAEQ1kaXN0b3J0QW1vdW50AwIAABIEdGltZQMCAAATDmNhbWVyYVBvc2l0aW9uBQsCAAAUCGxpZ2h0RGlyBQsCAAAVB2N1c3RvbTEDBAAAFhNwb2ludExpZ2h0SW50ZW5zaXR5DgYAABcSc3BvdExpZ2h0SW50ZW5zaXR5DgYAABgIZnJhZ21lbnQOBgAAAwMWAxkFZGVsdGEFCwQAABoEc2l6ZQMEAAAbCWludlJhbmdlNAMEAAADBQYIHARkaXN0AwQAAAkDHQ4CAhkFCwIZBQsDAAgdB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIcAwIcAwMCGwMDAwMACwYHAhoDAQMAAAAAAAAAAAMCBQIGBAIcAwkDFg4CBAYDCQMNDgECHAMDAhoDAwMBAwAAAAAAAAAAAwMDBoECHAMCHAMDAAAABoECHQMCHQMDBoECHQMGAgEDAAAAAAAA8D8DBAYAAhwDAQMAAAAAAADwPwMDAwMDDQIdAwAAAxcGHgVkZWx0YQULBAAAHwhsaWdodERpcgULBAAAIAVyYW5nZQMEAAAhCWludlJhbmdlNAMEAAAiDGFuZ2xlRmFsbE9mZgMEAAAjBWFuZ2xlAwQAAAUKBQkIJARkaXN0AwQAAAkDHQ4CAh4FCwIeBQsDAAglB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIkAwIkAwMCIQMDAwMACwYHAiADAQMAAAAAAAAAAAMCBQIGBAIkAwkDFg4CBAYDCQMNDgECJAMDAiADAwMBAwAAAAAAAAAAAwMDBoECJAMCJAMDAAAABoECJQMCJQMDBoECJQMGAgEDAAAAAAAA8D8DBAYAAiQDAQMAAAAAAADwPwMDAwMDCCYFdGhldGEDBAAACQMdDgIJAx8OAQIeBQsFCwcDAh8FCwULAwAIJwdlcHNpbG9uAwQAAAYDAiIDAiMDAwAIKAxhbmdsZUZhbGxvZmYDBAAACQMXDgMGAgQGAwImAwIjAwMDAicDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAA0JAygOAgIlAwIoAwUKAAABGAAABQkIKQ9hdHRlbnVhdGVTaGFkb3cDBAAAAhUDAAYEAgEFCwIUBQsFCwYEAgIFCwIGBQsFCwYEAgMDAgcDAwgqA3BvcwUKBAAABgEKAgQFCxEABQoCCQMFCgAIKwJ1dgUKBAAABgACKgUKBgECEgMCCgUKBQoFCgALAg0CBoACKwUKBgEEBgMKCQMhDgICDgoGAAYBAioFCgIQAwUKBgECEgMCDwUKBQoFCgUMEQAFCgEDAAAAAAAA4D8DBQoFCgIRAwUKBQoAAAgsDmNsb3VkSW50ZW5zaXR5AwQAAAYBCgkDIQ4CAggKAisFCgUMAAADAgsDAwAGgQICBQsGAwEDAAAAAAAA8D8DBgEJAzUOAQIsAwMEBgMBAwAAAAAAAPA/AwIpAwMDAwMFCwA";
prefab.CloudShadowWithAttenuation._ = hrt.prefab.Library.register("rfx.cloudShadowWithAttenuation",prefab.CloudShadowWithAttenuation);
prefab.CycleCurve._ = hrt.prefab.Library.register("cycleCurve",prefab.CycleCurve);
prefab.CycleProps._ = hrt.prefab.Library.register("renderProps",prefab.CycleProps);
prefab.LutBlend.SRC = "HXSLD3ByZWZhYi5MdXRCbGVuZAsBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEZnJvbQoCAAALAnRvCgIAAAwBdAMCAAANCF9faW5pdF9fDgYAAA4GdmVydGV4DgYAAA8IZnJhZ21lbnQOBgAAAwINAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADgAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDwAABQEGBAoCCAUMkwMFDAkDKg4CCQMYDgMKCQMhDgICCgoCCQUKBQySAAULCgkDIQ4CAgsKAgkFCgUMkgAFCwIMAwULAQMAAAAAAADwPwMFDAUMAA";
prefab.DayNightCycle._ = hrt.prefab.Library.register("DayNightCycle",prefab.DayNightCycle);
prefab.EmissivePulseShader.SRC = "HXSLGnByZWZhYi5FbWlzc2l2ZVB1bHNlU2hhZGVyCwEMY2FsY3VsYXRlZFVWBQoEAAACCGVtaXNzaXZlAwQAAAMEbWFzawoCAAAECWZyZXF1ZW5jeQMCAAAFBXBvd2VyAwIAAAYNcmVib3VuZE9mZnNldAMCAAAHDHJlYm91bmRQb3dlcgMCAAAIEHJlYm91bmRJbnRlbnNpdHkDAgAACQttaW5FbWlzc2l2ZQMCAAAKBmdsb2JhbA0BAQsEdGltZQMACgAAAAAMCGZyYWdtZW50DgYAAAEBDAAABQMIDQltYXNrVmFsdWUDBAAACgkDIQ4CAgMKAgEFCgUMAAADAAgOBXB1bHNlAwQAAAYACQMIDgIGAAYBAQMAAAAAAADgPwMJAwIOAQYBAgQDAgsDAwMDAQMAAAAAAADgPwMDAgUDAwYBCQMIDgIGAAYBAQMAAAAAAADgPwMJAwIOAQYDBgECBAMCCwMDAgYDAwMDAQMAAAAAAADgPwMDAgcDAwIIAwMDAAYEAgIDBgAGAQICAwQGAwEDAAAAAAAA8D8DAg0DAwMDBgECDQMJAxgOAwIJAwICAwIOAwMDAwMA";
prefab.EmissivePulse._ = hrt.prefab.Library.register("emissivePulse",prefab.EmissivePulse);
prefab.FireLightingShader.SRC = "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";
prefab.FireLighting._ = hrt.prefab.Library.register("rfx.fireLighting",prefab.FireLighting);
prefab.FootprintPathShader.SRC = "HXSLGnByZWZhYi5Gb290cHJpbnRQYXRoU2hhZGVyHQEGZ2xvYmFsDQEDAglwaXhlbFNpemUFCgABAAMJbW9kZWxWaWV3BwABAQMEEG1vZGVsVmlld0ludmVyc2UHAAEBAwAAAAUGY2FtZXJhDQIBBg9pbnZlcnNlVmlld1Byb2oHAAUAAAAABwhzcGxpbmVVVgUKAQAACBByZWxhdGl2ZVBvc2l0aW9uBQsEAAAJE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoRcHJvamVjdGVkUG9zaXRpb24FDAQAAAsRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAwKcGl4ZWxDb2xvcgUMBAAADRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAA4MY2FsY3VsYXRlZFVWBQoEAAAPCHdvcmxkUG9zBQsEAAAQBWFscGhhAwQAABENYWxiZWRvVGV4dHVyZQoCAAASDW5vcm1hbFRleHR1cmUKAgAAExBmb290cHJpbnRUZXh0dXJlCgIAABQNZW1pc3NpdmVQb3dlcgMCAAAVBW5vaXNlCgIAABYKbm9pc2VTY2FsZQMCAAAXBXNjYWxlAwIAABgIZGVwdGhNYXARAQAAABkKd29ybGROb2lzZQoCAAAaD3dvcmxkTm9pc2VTY2FsZQMCAAAbCXN0YXJ0RmFkZQMCAAAcB2VuZEZhZGUDAgAAHQlwbGF5ZXJQb3MFCwIAAB4Gb3V0cHV0DQMEHw5hbGJlZG9TdHJlbmd0aAMEHgAgDm5vcm1hbFN0cmVuZ3RoAwQeACELcGJyU3RyZW5ndGgDBB4AIhBlbWlzc2l2ZVN0cmVuZ3RoAwQeAAQAACMIZW1pc3NpdmUDBAAAJAtnZXRXb3JsZFBvcw4GAAAlCGZyYWdtZW50DgYAAAIDJAEmA3BvcwUKBAAABQsFBQgnBWRlcHRoAwQAAAoJAz8OAgIYEQEJAzoOAQImBQoFCgMAAAMACCgDcnV2BQwEAAAJAyoOAwImBQoCJwMBAwAAAAAAAPA/AwUMAAgpBHdwb3MFDAQAAAYBAigFDAIGBwUMAAgqBnJlc3VsdAULBAAABAYCCgIpBQySAAULCgIpBQwMAAMFCwULAA0CKgULAAABJQAABRoGBAIQAwEDAAAAAAAA8D8DAwYEAg4FCgkDKA4CCQMTDgEGAQoCBwUKAAADAhcDAwMKAgcFCgQAAwUKBQoGBAIMBQwJAyEOAgIRCgIOBQoFDAUMCCsJZm9vdHByaW50BQwEAAAKCQMhDgICEwoCDgUKBQyTAwUMAAgsCXNjcmVlblBvcwUKBAAABgIKAgoFDBEABQoKAgoFDAwAAwUKAAYEAg8FCwkCJA4BAiwFCgULBQsILQNkZHgFCwQAAAYDAg8FCwkCJA4BBgACLAUKCQMoDgIKAgIFCgAAAwEDAAAAAAAAAAADBQoFCgULBQsACC4DZGR5BQsEAAAGAwIPBQsJAiQOAQYAAiwFCgkDKA4CAQMAAAAAAAAAAAMKAgIFCgQAAwUKBQoFCwULAAgvC3dvcmxkTm9ybWFsBQsEAAAJAx8OAQkDHg4CAi4FCwItBQsFCwULAAgwDHdvcmxkVGFuZ2VudAULBAAACQMeDgICLwULCQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DAQMAAAAAAAAAAAMFCwULAAgxBm5vcm1hbAUMBAAACgkDIQ4CAhIKAg4FCgUMkwMFDAAIMgFuBQsEAAACLwULAAgzAm5mBQsEAAAJAzkOAQIxBQwFCwAINAR0YW5YBQsEAAAJAx8OAQoCMAULkgAFCwULAAg1BHRhblkFCwQAAAYBCQMeDgICMgULAjQFCwULAQMAAAAAAADwvwMFCwAGBAILBQsJAx8OAQQGAAYABgEKAjMFCwAAAwI0BQsFCwYBCgIzBQsEAAMCNQULBQsFCwYBCgIzBQsIAAMCMgULBQsFCwULBQsFCwYEAhADBgMBAwAAAAAAAPA/AwkDCA4CCQMPDgEGAQQGAwoCBwUKBAADAQMAAAAAAADgPwMDAwEDAAAAAAAAAEADAwMBAwAAAAAAAABAAwMDAwaBAhADCgkDIQ4CAhUKBgECDgUKAhYDBQoFDAAAAwMINgRkaXN0AwQAAAkDGw4BBgMKAg8FCxEABQoKAh0FCxEABQoFCgMABoECEAMKCQMhDgICGQoGAQoCDwULEQAFCgIaAwUKBQwAAAMDBoACEAMKAisFDAwAAwMGBAIjAwYBBAYBCgkDIQ4CAhMKAg4FCgUMAAADAhADAwMCFAMDAwYEAh8DAhADAwYEAiADAhADAwYEAiEDAhADAwYEAiIDAhADAwA";
prefab.TerrainPath._ = hrt.prefab.Library.register("terrainPath",prefab.TerrainPath);
prefab.FootprintPath._ = hrt.prefab.Library.register("footprintPath",prefab.FootprintPath);
prefab.FurShader.SRC = "HXSLEHByZWZhYi5GdXJTaGFkZXIiAQhmdXJTdGVwcwECAAEAAAAAAAIHZnVyU3RlcAMEAAADCWZ1ckxlbmd0aAMCAAAEB2dyYXZpdHkDAgAABQVub2lzZQoCAAAGCWZ1clBhcmFtcwoCAAAHD2Z1clBhcmFtc1ZlcnRleAoCAAEICApub2lzZVNjYWxlAwIAAAkKZmFkZUZhY3RvcgMCAAAKCWRpcmVjdGlvbgMCAAALEWNhbWVyYURpc3RTY2FsaW5nAwIAAAwGY2FtZXJhDQEKDQR2aWV3BwAMAA4EcHJvagcADAAPCHBvc2l0aW9uBQsADAAQCHByb2pGbGlwAwAMABEIcHJvakRpYWcFCwAMABIIdmlld1Byb2oHAAwAEw9pbnZlcnNlVmlld1Byb2oHAAwAFAV6TmVhcgMADAAVBHpGYXIDAAwAFgNkaXIFCwMMAAAAABcGZ2xvYmFsDQIEGAR0aW1lAwAXABkJcGl4ZWxTaXplBQoAFwAaCW1vZGVsVmlldwcAFwEDGxBtb2RlbFZpZXdJbnZlcnNlBwAXAQMAAAAcBWlucHV0DQMCHQhwb3NpdGlvbgULARwAHgZub3JtYWwFCwEcAAEAAB8Gb3V0cHV0DQQFIAhwb3NpdGlvbgUMBB8AIQVjb2xvcgUMBB8AIgVkZXB0aAMEHwAjBm5vcm1hbAULBB8AJAl3b3JsZERpc3QDBB8ABAAAJRByZWxhdGl2ZVBvc2l0aW9uBQsEAAAmE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAACcYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAoEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAApEXByb2plY3RlZFBvc2l0aW9uBQwEAAAqCnBpeGVsQ29sb3IFDAQAACsFZGVwdGgDBAAALAhzY3JlZW5VVgUKBAAALQlzcGVjUG93ZXIDBAAALglzcGVjQ29sb3IFCwQAAC8Jd29ybGREaXN0AwQAADAKY29sb3JVbmRlcgULAgAAMQljb2xvck92ZXIFCwIAADIMY2FsY3VsYXRlZFVWBQoEAAAzBmFsYmVkbwUMBAAANAt2ZXJ0ZXhTY2FsZQMEAAA1Dl9faW5pdF9fdmVydGV4DgYAADYGdmVydGV4DgYAADcIZnJhZ21lbnQOBgAAAwI1AAAFAgUDCDgGYW1vdW50AwQAAAoJAyEOAgIHCgIyBQoFDAAAAwAIOQVkZWx0YQMEAAAJAwgOAgkDGw4BBAYDAg8FCwYBCQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMFCwkDNA4BAhoHCAULBQsFCwMCCwMDAAYEAjQDBgEGAQYBCQMNDgECOQMDAQN7FK5H4XqEPwMDAjgDAwICAwMDAAaDCgIlBQsIAAMGAQYBAgoDAjQDAwICAwMDAAA2AAAFAgaAAiYFCwYBBgECAwMCNAMDAigFCwULBQsGgwoCJgULCAADBgEGAQIEAwI0AwMEBgMBAwAAAAAAAPA/AwYBCgIoBQsIAAMBAwAAAAAAAOA/AwMDAwMDAAE3AAAFBQg6BmFtb3VudAMEAAAKCQMhDgICBgoCMgUKBQwAAAMACDsFbm9pc2UDBAAACgkDIQ4CAgUKBgECMgUKAggDBQoFDAAAAwAGgQoCKgUMkgAFCwkDGA4DAjAFCwIxBQsGAQICAwI6AwMFCwULCDwEZmFkZQMEAAAJAzUOAQYDAjsDBgEGAQICAwICAwMCCQMDAwMABoEKAioFDAwAAwkDGA4DAQMAAAAAAADwPwMCPAMCOgMDAwA";
prefab.FurStep.SRC = "HXSLDnByZWZhYi5GdXJTdGVwAwEEc3RlcAMCAAACB2Z1clN0ZXADBAAAAwZ2ZXJ0ZXgOBgAAAQADAAAFAQYEAgIDAgEDAwA";
prefab.Fur._ = hrt.prefab.Library.register("fur",prefab.Fur);
prefab.GrassTerrainColor._ = hrt.prefab.Library.register("grassTerrainColor",prefab.GrassTerrainColor);
prefab.GrassWindShader.SRC = "HXSLFnByZWZhYi5HcmFzc1dpbmRTaGFkZXIKAQVub2lzZQoCAAACCWludGVuc2l0eQMCAAADBXNwZWVkAwIAAAQFc2NhbGUDAgAABQlkaXJlY3Rpb24FCgIAAAYGZ2xvYmFsDQEEBwR0aW1lAwAGAAgJcGl4ZWxTaXplBQoABgAJCW1vZGVsVmlldwcABgEDChBtb2RlbFZpZXdJbnZlcnNlBwAGAQMAAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwQcmVsYXRpdmVQb3NpdGlvbgULBAAADQpwaXhlbENvbG9yBQwEAAAOBnZlcnRleA4GAAABAA4AAAUBCwYGCgILBQsIAAMBAwAAAAAAACTAAwIFDAgPCG5vaXNlVmFsAwQAAAoJAyEOAgIBCgYTBAYABgEKAgsFCxEABQoCBAMFCgQGAQYBAgMDCgIFBQoFAAUKBQoCBwMFCgUKBQoFCgEDAAAAAAAA8D8DBQoFDAAAAwAIEAd6RmFjdG9yAwQAAAkDGA4DAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwYCCgIMBQsIAAMBAwAAAAAAAABAAwMDAAgRCHN0cmVuZ3RoAwQAAAYBBgECAgMCDwMDAhADAwAIEgVhbmdsZQMEAAAJAxgOAwEDAAAAAAAAAAADAQMfhetRuB4JQAMCEQMDAAgTB3dpbmREaXIFCgQAAAkDHw4BCgQGAQkDKQ4CAgUFCgEDAAAAAAAAAAADBQsJAzIOAQIKBwYFCwULEQAFCgUKAAgUAWMDBAAACQMDDgEGAQISAwoCEwUKAAADAwMACBUBcwMEAAAJAwIOAQYBAhIDCgITBQoAAAMDAwAIFglyb3RhdGlvblgHBAAACQMzDgQJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwJAyoOBAEDAAAAAAAAAAADAhQDBwMCFQMDAQMAAAAAAAAAAAMFDAkDKg4EAQMAAAAAAAAAAAMCFQMCFAMBAwAAAAAAAAAAAwUMCQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBwAIFwFjAwQAAAkDAw4BBgECEgMKAhMFCgQAAwMDAAgYAXMDBAAACQMCDgEGAQISAwoCEwUKBAADAwMACBkJcm90YXRpb25ZBwQAAAkDMw4ECQMqDgQCFwMBAwAAAAAAAAAAAwIYAwEDAAAAAAAAAAADBQwJAyoOBAEDAAAAAAAAAAADAQMAAAAAAADwPwMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwJAyoOBAcDAhgDAwEDAAAAAAAAAAADAhcDAQMAAAAAAAAAAAMFDAkDKg4EAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAcABgQCCwULBgEGAQIMBQsJAzQOAQQGAQIWBwIZBwcHCAULCQM0DgECCQcIBQsFCwAAAAA";
prefab.GrassWind._ = hrt.prefab.Library.register("grassWind",prefab.GrassWind);
prefab.HairDitheringShader.SRC = "HXSLGnByZWZhYi5IYWlyRGl0aGVyaW5nU2hhZGVyBgEGZ2xvYmFsDQECAglwaXhlbFNpemUFCgABAAMEdGltZQMAAQAAAAAECXRocmVzaG9sZAMCAAAFCHNjcmVlblVWBQoEAAAGCnBpeGVsQ29sb3IFDAQAAAcMZ2V0RGl0aGVyVmFsDgYAAAgIZnJhZ21lbnQOBgAAAgMHAAMFBAgJCWRpdGhlcjh4OA8BAEAEAAASQAECAAAAAAEBAiAAAAABAQIIAAAAAQECKAAAAAEBAgIAAAABAQIiAAAAAQECCgAAAAEBAioAAAABAQIwAAAAAQECEAAAAAEBAjgAAAABAQIYAAAAAQECMgAAAAEBAhIAAAABAQI6AAAAAQECGgAAAAEBAgwAAAABAQIsAAAAAQECBAAAAAEBAiQAAAABAQIOAAAAAQECLgAAAAEBAgYAAAABAQImAAAAAQECPAAAAAEBAhwAAAABAQI0AAAAAQECFAAAAAEBAj4AAAABAQIeAAAAAQECNgAAAAEBAhYAAAABAQIDAAAAAQECIwAAAAEBAgsAAAABAQIrAAAAAQECAQAAAAEBAiEAAAABAQIJAAAAAQECKQAAAAEBAjMAAAABAQITAAAAAQECOwAAAAEBAhsAAAABAQIxAAAAAQECEQAAAAEBAjkAAAABAQIZAAAAAQECDwAAAAEBAi8AAAABAQIHAAAAAQECJwAAAAEBAg0AAAABAQItAAAAAQECBQAAAAEBAiUAAAABAQI/AAAAAQECHwAAAAEBAjcAAAABAQIXAAAAAQECPQAAAAEBAh0AAAABAQI1AAAAAQECFQAAAAEPAQBAAAgKAXgBBAAACQMlDgEJAxQOAgYBCgIFBQoAAAMEBgIBAwAAAAAAAABAAwoCAgUKAAADAwMDAQMAAAAAAAAgQAMDAQAICwF5AQQAAAkDJQ4BCQMUDgIGAQoCBQUKBAADBAYCAQMAAAAAAAAAQAMKAgIFCgQAAwMDAwEDAAAAAAAAIEADAwEADQYCCQMmDgERAgkPAQBABAYAAgoBBgECCwEBAggAAAABAQEBAQMBAwAAAAAAAFBAAwMAAAEIAAAFAQsGCQoCBgUMDAADBgECBAMJAxMOAQYACQIHDgADBgEGAQIDAwEDAAAAAAAAPkADAwEDA+0vN+/G4z8DAwMDAwIMAAAAAA";
prefab.HairDithering._ = hrt.prefab.Library.register("hairDithering",prefab.HairDithering);
prefab.LakeShader.SRC = "HXSLEXByZWZhYi5MYWtlU2hhZGVyGgEGZ2xvYmFsDQECAgR0aW1lAwABAAMQbW9kZWxWaWV3SW52ZXJzZQcAAQEDAAAABAZjYW1lcmENAgEFD2ludmVyc2VWaWV3UHJvagcABAAAAAAGEHJlbGF0aXZlUG9zaXRpb24FCwQAAAcTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAACRF0cmFuc2Zvcm1lZE5vcm1hbAULBAAACgpwaXhlbENvbG9yBQwEAAALDm5lYXJXYXRlckNvbG9yBQsCAAAMEG1pZGRsZVdhdGVyQ29sb3IFCwIAAA0OZGVlcFdhdGVyQ29sb3IFCwIAAA4Jcm91Z2huZXNzAwIAAA8Mb3BhY2l0eVBvd2VyAwIAABAIbWF4RGVwdGgDAgAAERFjb2xvck5vaXNlVGV4dHVyZQoCAAASD2NvbG9yTm9pc2VTY2FsZQMCAAATEmNvbG9yTm9pc2VTdHJlbmd0aAMCAAAUCW5vcm1hbE1hcAoCAAAVDXdhdmVJbnRlbnNpdHkDAgAAFgl3YXZlU2NhbGUDAgAAFwl3YXZlU3BlZWQDAgAAGA9zZWNvbmRXYXZlU2NhbGUDAgAAGRBzZWNvbmRXYXZlUm90YXRlBQoCAAAaD3NlY29uZFdhdmVTcGVlZAMCAAAbCGRlcHRoTWFwEQEAAAAcBm91dHB1dA0DBx0OYWxiZWRvU3RyZW5ndGgDBBwAHg5ub3JtYWxTdHJlbmd0aAMEHAAfC3BiclN0cmVuZ3RoAwQcACAJbWV0YWxuZXNzAwQcACEJcm91Z2huZXNzAwQcACIJb2NjbHVzaW9uAwQcACMGbm9ybWFsBQsEHAAEAAAkCGZyYWdtZW50DgYAAAEBJAAABR0IJQp3YXZlVVZCYXNlBQoEAAAKAgYFCxEABQoACCYGd2F2ZVVWBQoEAAAGAQQGAAIlBQoJAygOAgYBAgIDAhcDAwEDAAAAAAAAAAADBQoFCgUKAhYDBQoACCcHd2F2ZVVWMgUKBAAABgEEBgACJQUKBgEJAygOAQYBAgIDAhoDAwUKAhkFCgUKBQoFCgIYAwUKAAgoD3ByZXNjYWxlZE5vcm1hbAULBAAABgAJAzkOAQkDKg4CCgkDIQ4CAhQKAiYFCgUMkgAFCwEDAAAAAAAA8D8DBQwFCwkDOQ4BCQMqDgIKCQMhDgICFAoCJwUKBQySAAULAQMAAAAAAADwPwMFDAULBQsABoEKAigFCxEABQoCFQMFCgYEAgkFCwkDHw4BAigFCwULBQsIKQlzY3JlZW5Qb3MFCgQAAAYCCgIIBQwRAAUKCgIIBQwMAAMFCgAIKgVkZXB0aAMEAAAJAz8OAgIbEQEJAzoOAQIpBQoFCgMACCsDcnV2BQwEAAAJAyoOAwIpBQoCKgMBAwAAAAAAAPA/AwUMAAgsBHBwb3MFDAQAAAYBAisFDAIFBwUMAAgtBHdwb3MFCwQAAAYCCgIsBQySAAULCgIsBQwMAAMFCwAILgp3YXRlckRlcHRoAwQAAAkDHA4CCgItBQuSAAULAgcFCwMACC8KY29sb3JOb2lzZQMEAAAKCQMhDgICEQoGAQoCBgULEQAFCgISAwUKBQwAAAMABoECLwMCEwMDCDACcDADBAAAAQMAAAAAAAAAAAMACDECcDEDBAAABgABAzMzMzMzM+M/AwIvAwMACDICcDIDBAAABgABAwAAAAAAAPA/AwIvAwMACDMBdAMEAAAJAzUOAQYDAQMAAAAAAADwPwMGAgIuAwIQAwMDAwAINAp3YXRlckNvbG9yBQsEAAAJAxgOAwINBQsJAxgOAwIMBQsCCwULCQMaDgMCMQMCMgMCMwMDBQsJAxoOAwIwAwIxAwIzAwMFCwAGBAoCCgUMkgAFCwI0BQsFCwYEAiADAQMAAAAAAAAAAAMDBgQCIQMCDgMDBgQCIgMJAxgOAwEDMzMzMzMz4z8DAQMAAAAAAADwPwMCMwMDAwYEAiMFCwIJBQsFCwg1B29wYWNpdHkDBAAACQMYDgMBA5qZmZmZmck/AwEDAAAAAAAA8D8DCQMIDgIGAwEDAAAAAAAA8D8DAjMDAwIPAwMDAAYECgIKBQwMAAMCNQMDBgQCHQMCNQMDBgQCHgMCNQMDBgQCHwMCNQMDAA";
prefab.Lake._ = hrt.prefab.Library.register("Lake",prefab.Lake);
prefab.Light._ = hrt.prefab.Library.register("light",prefab.Light);
prefab.MeteoParticle.SRC = "HXSLFHByZWZhYi5NZXRlb1BhcnRpY2xlOwEGY2FtZXJhDQEKAgR2aWV3BwABAAMEcHJvagcAAQAECHBvc2l0aW9uBQsAAQAFCHByb2pGbGlwAwABAAYIcHJvakRpYWcFCwABAAcIdmlld1Byb2oHAAEACA9pbnZlcnNlVmlld1Byb2oHAAEACQV6TmVhcgMAAQAKBHpGYXIDAAEACwNkaXIFCwMBAAAAAAwGZ2xvYmFsDQIEDQR0aW1lAwAMAA4JcGl4ZWxTaXplBQoADAAPCW1vZGVsVmlldwcADAEDEBBtb2RlbFZpZXdJbnZlcnNlBwAMAQMAAAARBWlucHV0DQMCEghwb3NpdGlvbgULAREAEwZub3JtYWwFCwERAAEAABQGb3V0cHV0DQQFFQhwb3NpdGlvbgUMBBQAFgVjb2xvcgUMBBQAFwVkZXB0aAMEFAAYBm5vcm1hbAULBBQAGQl3b3JsZERpc3QDBBQABAAAGhByZWxhdGl2ZVBvc2l0aW9uBQsEAAAbE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAABwYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAdEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAeEXByb2plY3RlZFBvc2l0aW9uBQwEAAAfCnBpeGVsQ29sb3IFDAQAACAFZGVwdGgDBAAAIQhzY3JlZW5VVgUKBAAAIglzcGVjUG93ZXIDBAAAIwlzcGVjQ29sb3IFCwQAACQJd29ybGREaXN0AwQAACUFcHJvcHMNBQUmAnV2BQoBJQAnBHRpbWUDASUAKARsaWZlAwElACkEaW5pdAUKASUAKgVkZWx0YQUKASUAAQAAKwZmYWRlSW4DAgAALAdmYWRlT3V0AwIAAC0JZmFkZVBvd2VyAwIAAC4Jc3BlZWRJbmNyAwIAAC8HZ3Jhdml0eQMCAAAwBWNvbG9yCgIAADEHdGV4dHVyZQoCAAAyBHRpbWUDAgAAMwdtYXhUaW1lAwIAADQLbG9vcENvdW50ZXIDAgAANQ9hbmltYXRpb25SZXBlYXQDAgAANhNhbmltYXRpb25GaXhlZEZyYW1lAwIAADcLdG90YWxGcmFtZXMDAgAAOAlmcmFtZVNpemUFCgIAADkNZnJhbWVEaXZpc2lvbgULAgAAOgxwcmV2Vmlld1Byb2oHAgAA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";
prefab.MeteoPartGroup.FIELDS = ["nparts","size","sizeRand","life","lifeRand","speed","speedXY","speedZ","speedDirRand","speedRand","timeDistorsion","cameraEffect","fadeIn","fadeOut","fadePower","attachToCam","emitDist","camInertia","distanceColorGradient","minColorGradient","boxSize"];
prefab.MeteoParticles.VERSION = 2;
prefab.MeteoParticles.STRIDE = 14;
prefab.MeteoParticles.PUVS = [new h3d.prim.UV(0,0),new h3d.prim.UV(1,0),new h3d.prim.UV(0,1),new h3d.prim.UV(1,1)];
prefab.MeteoParticlesObject._ = hrt.prefab.Library.register("MeteoParticlesObject",prefab.MeteoParticlesObject);
prefab.NightEmissivePlaneObject.materials = [];
prefab.NightEmissiveModel._ = hrt.prefab.Library.register("nightEmissiveModel",prefab.NightEmissiveModel);
prefab.Npc.CACHE = null;
prefab.Npc._ = hrt.prefab.Library.register("npc",prefab.Npc);
prefab.OceanShader.SRC = "HXSLEnByZWZhYi5PY2VhblNoYWRlci0BBmdsb2JhbA0BBAIEdGltZQMAAQADCXBpeGVsU2l6ZQUKAAEABAltb2RlbFZpZXcHAAEBAwUQbW9kZWxWaWV3SW52ZXJzZQcAAQEDAAAABgZjYW1lcmENAgoHBHZpZXcHAAYACARwcm9qBwAGAAkIcG9zaXRpb24FCwAGAAoIcHJvakZsaXADAAYACwhwcm9qRGlhZwULAAYADAh2aWV3UHJvagcABgAND2ludmVyc2VWaWV3UHJvagcABgAOBXpOZWFyAwAGAA8EekZhcgMABgAQA2RpcgULAwYAAAAAEQZvdXRwdXQNAwYSCW1ldGFsbmVzcwMEEQATCXJvdWdobmVzcwMEEQAUCW9jY2x1c2lvbgMEEQAVCGVtaXNzaXZlAwQRABYHY3VzdG9tMQMEEQAXB2N1c3RvbTIDBBEABAAAGAltZXRhbG5lc3MDBAAAGQlyb3VnaG5lc3MDBAAAGglvY2NsdXNpb24DBAAAGwhlbWlzc2l2ZQMEAAAcB2N1c3RvbTEDBAAAHQdjdXN0b20yAwQAAB4QcmVsYXRpdmVQb3NpdGlvbgULBAAAHxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAgEXByb2plY3RlZFBvc2l0aW9uBQwEAAAhEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAiCnBpeGVsQ29sb3IFDAQAACMYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAkDGRlcHRoVGV4dHVyZQoCAAAlEGRlcHRoVGV4dHVyZVNpemUFCgIAACYOd2F0ZXJSb3VnaG5lc3MDAgAAJw9zaG9yZVdhdGVyQ29sb3IFCwIAACgNbWlkV2F0ZXJDb2xvcgULAgAAKQ5kZWVwV2F0ZXJDb2xvcgULAgAAKgtkZXB0aEZhY3RvcgMCAAArEWNvbG9yTm9pc2VUZXh0dXJlCgIAACwPY29sb3JOb2lzZVNjYWxlAwIAAC0Jbm9ybWFsTWFwCgIAAC4Fc3BlZWQDAgAALwVzY2FsZQMCAAAwD3NlY29uZFdhdmVTY2FsZQMCAAAxCGZhZGVEaXN0AwIAADINd2F2ZUludGVuc2l0eQMCAAAzDG9wYWNpdHlQb3dlcgMCAAA0DG9wYWNpdHlSYW5nZQMCAAA1Cm1pbk9wYWNpdHkD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";
prefab.Ocean._ = hrt.prefab.Library.register("ocean",prefab.Ocean);
prefab.RainShader.SRC = "HXSLEXByZWZhYi5SYWluU2hhZGVyGgEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghkZXB0aE1hcBEBAAAACwxvY2NsdXNpb25NYXARAQAAAAwGaGRyTWFwEQEAAAANBmNhbWVyYQ0DCg4EdmlldwcADQAPBHByb2oHAA0AEAhwb3NpdGlvbgULAA0AEQhwcm9qRmxpcAMADQASCHByb2pEaWFnBQsADQATCHZpZXdQcm9qBwANABQPaW52ZXJzZVZpZXdQcm9qBwANABUFek5lYXIDAA0AFgR6RmFyAwANABcDZGlyBQsDDQAAAAAYBmdsb2JhbA0EARkEdGltZQMAGAAAAAAaCVVTRV9OT0lTRQICAAEAAAAAABsLc3RhcnRIZWlnaHQDAgAAHAllbmRIZWlnaHQDAgAAHQxzdGFydE9wYWNpdHkDAgAAHgplbmRPcGFjaXR5AwIAAB8Kc3RhcnRDb2xvcgUMAgAAIAhlbmRDb2xvcgUMAgAAIQhub2lzZVRleAoCAAAiCm5vaXNlU2NhbGUDAgAAIwpub2lzZVNwZWVkAwIAACQLbm9pc2VBbW91bnQDAgAAJQhfX2luaXRfXw4GAAAmBnZlcnRleA4GAAAnDWdldFBvc2l0aW9uQXQOBgAAKAtnZXRQb3NpdGlvbg4GAAApCGZyYWdtZW50DgYAAAUCJQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAACYAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAycBKgJ1dgUKBAAABQsFBQgrBWRlcHRoAwQAAAkDPw4CAgoRAQIqBQoDAAgsA3V2MgUKBAAACQM7DgECKgUKBQoACC0EdGVtcAUMBAAABgEJAyoOAwIsBQoCKwMBAwAAAAAAAPA/AwUMAhQHBQwACC4Ib3JpZ2luV1MFCwQAAAYCCgItBQySAAULCgItBQwMAAMFCwANAi4FCwAAAygABQsFAQ0JAicOAQIJBQoFCwAAASkAAAUICC8Gb3JpZ2luBQsEAAAJAigOAAULAAgwBW5vaXNlAwQAAAEDAAAAAAAAAAADAAsCGgIFAggxBWRpc3RvAwQAAAYBBgEKCQMhDgICIQoGAAYBCgIvBQsRAAUKAiIDBQoJAygOAgYBAhkDBwMCIwMDAwEDAAAAAAAAAAADBQoFCgUMAAADAiIDAwEDAAAAAAAAJEADAwAGBAIwAwYBCgkDIQ4CAiEKBgMGAAYBCgIvBQsRAAUKAiIDBQoJAygOAgYBAhkDAiMDAwEDAAAAAAAAAAADBQoFCgkDKA4BAjEDBQoFCgUMAAADAiQDAwMAAAAIMgZoZWlnaHQDBAAABgAKAi8FCwgAAwIwAwMACDMGYW1vdW50AwQAAAkDNQ4BBgIEBgMCMgMCGwMDAwIcAwMDAAg0CGZvZ0NvbG9yBQwEAAAJAxgOAwIfBQwCIAUMAjMDBQwABgQKAjQFDAwAAwkDNQ4BBgMKAjQFDAwAAwIwAwMDAwYEAggFDAI0BQwFDAA";
prefab.Rain._ = hrt.prefab.Library.register("rfx.rain",prefab.Rain);
prefab.RainRoughnessShader.SRC = "HXSLGnByZWZhYi5SYWluUm91Z2huZXNzU2hhZGVyBQEJcm91Z2huZXNzAwQAAAIHY3VzdG9tMQMEAAADBm5vcm1hbAULBAAABBNyb3VnaG5lc3NNdWx0aXBsaWVyAwIAAAUIZnJhZ21lbnQOBgAAAQEFAAAFAwgGCHRvd2FyZFVwAwQAAAkDNQ4BCQMdDgICAwULCQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFCwMDAAgHEW1vZHVsYXRlUm91Z2huZXNzAwQAAAYABgECBAMCBgMDBAYDAQMAAAAAAADwPwMCBgMDAwMABgQCAQMJAxgOAwYABgEJAzUOAQYDAgEDAQOamZmZmZm5PwMDAwIHAwMJAxUOAgIBAwEDmpmZmZmZuT8DAwMCAQMJAzUOAQICAwMDAwA";
prefab.RainRoughness._ = hrt.prefab.Library.register("rfx.rainRoughness",prefab.RainRoughness);
prefab.RandomTransform.mat = new h3d.Matrix();
prefab.RandomTransform.qRot = new h3d.Quat();
prefab.RandomTransform._ = hrt.prefab.Library.register("randomTransform",prefab.RandomTransform);
prefab.RiverShader.SRC = "HXSLEnByZWZhYi5SaXZlclNoYWRlcikBBmdsb2JhbA0BAgIEdGltZQMAAQADEG1vZGVsVmlld0ludmVyc2UHAAEBAwAAAAQGY2FtZXJhDQIBBQ9pbnZlcnNlVmlld1Byb2oHAAQAAAAABhByZWxhdGl2ZVBvc2l0aW9uBQsEAAAHE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAgRcHJvamVjdGVkUG9zaXRpb24FDAQAAAkRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAoKcGl4ZWxDb2xvcgUMBAAACw5uZWFyV2F0ZXJDb2xvcgULAgAADBBtaWRkbGVXYXRlckNvbG9yBQsCAAANDmRlZXBXYXRlckNvbG9yBQsCAAAOCXJvdWdobmVzcwMCAAAPDG9wYWNpdHlQb3dlcgMCAAAQCG1heERlcHRoAwIAABERY29sb3JOb2lzZVRleHR1cmUKAgAAEhBjb2xvck5vaXNlU2NhbGVYAwIAABMQY29sb3JOb2lzZVNjYWxlWQMCAAAUEmNvbG9yTm9pc2VTdHJlbmd0aAMCAAAVCW5vcm1hbE1hcAoCAAAWDXdhdmVJbnRlbnNpdHkDAgAAFwp3YXZlU2NhbGVYAwIAABgKd2F2ZVNjYWxlWQMCAAAZCndhdmVSb3RhdGUFCgIAABoJd2F2ZVNwZWVkAwIAABsTc2Vjb25kV2F2ZUludGVuc2l0eQMCAAAcEHNlY29uZFdhdmVTY2FsZVgDAgAAHRBzZWNvbmRXYXZlU2NhbGVZAwIAAB4Qc2Vjb25kV2F2ZVJvdGF0ZQUKAgAAHw9zZWNvbmRXYXZlU3BlZWQDAgAAIAtmb2FtVGV4dHVyZQoCAAAhCWZvYW1Db2xvcgULAgAAIglmb2FtU2NhbGUDAgAAIwlmb2FtUmFuZ2UDAgAAJAlmb2FtU3BlZWQDAgAAJQ1mb2FtVGhpY2tuZXNzAwIAACYQZm9hbU5vaXNlVGV4dHVyZQoCAAAnFGZvYW1Ob2lzZVRleHR1cmVTaXplBQoCAAAoDmZvYW1Ob2lzZVNjYWxlAwIAACkSZm9hbU5vaXNlSW50ZW5zaXR5AwIAACoIZGVwdGhNYXARAQAAACsGb3V0cHV0DQMHLA5hbGJlZG9TdHJlbmd0aAMEKwAtDm5vcm1hbFN0cmVuZ3RoAwQrAC4LcGJyU3RyZW5n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";
prefab.River._ = hrt.prefab.Library.register("river",prefab.River);
prefab.SSSFleshLightingShader.SRC = "HXSLHXByZWZhYi5TU1NGbGVzaExpZ2h0aW5nU2hhZGVyDgEJbWFpbkNvbG9yBQsCAAACCW5lYXJDb2xvcgULAgAAAwlpbnRlbnNpdHkDAgAABAl0aHJlc2hvbGQDAgAABQluZWFyUmF0aW8DAgAABg9tYXhpbXVtUGVyTGlnaHQDAgAABwZub3JtYWwFCwQAAAgGc2hhZG93AwQAAAkJb2NjbHVzaW9uAwQAAAoNcGJyTGlnaHRDb2xvcgULBAAACxFwYnJMaWdodERpcmVjdGlvbgULBAAADAdjdXN0b20yAwQAAA0KcGl4ZWxDb2xvcgUMBAAADghmcmFnbWVudA4GAAABAQ4AAAUCCA8Mc3NzSW50ZW5zaXR5AwQAAAIMAwALBg4GBwkDHQ4CAgoFCwIKBQsDAQMtQxzr4jYaPwMCBgcCDwMBAwAAAAAAAAAAAwICBQYIEAZzc3NEb3QDBAAACQMPDgEJAx0OAgIHBQsCCwULAwMABgQCEAMGAwEDAAAAAAAA8D8DAhADAwMGBAIQAwkDFw4DBgIEBgMCEAMCBAMDAwQGAwEDAAAAAAAA8D8DAgQDAwMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwMDCBEIc3NzQ29sb3IFCwQAAAkDGA4DAgIFCwIBBQsJAzUOAQYCAhADAgUDAwMFCwAIEgNzc3MFCwQAAAYBBgEGAQYCAhEFCwEDGC1EVPshCUADBQsCCgULBQsCEAMFCwIPAwULAAaACgINBQySAAULCQMXDgMGAQYBAhIFCwIIAwULAgkDBQsBAwAAAAAAAAAAAwIGAwULBQsAAAAA";
prefab.SSSFleshLighting._ = hrt.prefab.Library.register("rfx.sssFleshLighting",prefab.SSSFleshLighting);
prefab.SSSGreedyShader.SRC = "";
prefab.SSSGreedy._ = hrt.prefab.Library.register("sssGreedy",prefab.SSSGreedy);
prefab.ShadowAttenuatorShader.SRC = "HXSLHXByZWZhYi5TaGFkb3dBdHRlbnVhdG9yU2hhZGVyAwERc2hhZG93QXR0ZW51YXRpb24DAgAAAgdjdXN0b20xAwQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAQaAAgIDAgEDAwA";
prefab.ShadowAttenuator._ = hrt.prefab.Library.register("rfx.shadowAttenuator",prefab.ShadowAttenuator);
prefab.Sound._ = hrt.prefab.Library.register("sound",prefab.Sound);
prefab.TattooShader.SRC = "HXSLE3ByZWZhYi5UYXR0b29TaGFkZXIFAQd0ZXh0dXJlCgIAAAIFY29sb3IFCwIAAAMMY2FsY3VsYXRlZFVWBQoEAAAECnBpeGVsQ29sb3IFDAQAAAUIZnJhZ21lbnQOBgAAAQEFAAAFAggGBnRhdHRvbwUMBAAACQMhDgICAQoCAwUKBQwABgQKAgQFDJIABQsJAxgOAwoCBAUMkgAFCwoCAgULkgAFCwkDGw4BCgIGBQySAAULAwULBQsA";
prefab.Tattoo._ = hrt.prefab.Library.register("hairDithering",prefab.HairDithering);
prefab.terrain.TerrainBlendShadowPass.SRC = "HXSLJXByZWZhYi50ZXJyYWluLlRlcnJhaW5CbGVuZFNoYWRvd1Bhc3MCAQpzaGFkb3dQYXNzAgQAAAIIZnJhZ21lbnQOBgAAAQECAAAFAQYEAgECAQEBAgIA";
prefab.TerrainAlphaBlend.terrainBlendShadowPass = new prefab.terrain.TerrainBlendShadowPass();
prefab.TerrainAlphaBlend._ = hrt.prefab.Library.register("terrainAlphaBlend",prefab.TerrainAlphaBlend);
prefab.TerrainColor._ = hrt.prefab.Library.register("terrainColor",prefab.TerrainColor);
prefab.TerrainPathShader.SRC = "HXSLGHByZWZhYi5UZXJyYWluUGF0aFNoYWRlchYBCkNPTE9SX09OTFkCAgABAAAAAAACBmdsb2JhbA0BAwMJcGl4ZWxTaXplBQoAAgAECW1vZGVsVmlldwcAAgEDBRBtb2RlbFZpZXdJbnZlcnNlBwACAQMAAAAGBmNhbWVyYQ0CAQcPaW52ZXJzZVZpZXdQcm9qBwAGAAAAAAgIc3BsaW5lVVYFCgEAAAkQcmVsYXRpdmVQb3NpdGlvbgULBAAAChN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAALEXByb2plY3RlZFBvc2l0aW9uBQwEAAAMEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAANCnBpeGVsQ29sb3IFDAQAAA4YcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAPDGNhbGN1bGF0ZWRVVgUKBAAAEAh3b3JsZFBvcwULBAAAEQVhbHBoYQMEAAASDWFsYmVkb1RleHR1cmUKAgAAEw1ub3JtYWxUZXh0dXJlCgIAABQFbm9pc2UKAgAAFQpub2lzZVNjYWxlAwIAABYFc2NhbGUDAgAAFwhkZXB0aE1hcBEBAAAAGAZvdXRwdXQNAwMZDmFsYmVkb1N0cmVuZ3RoAwQYABoObm9ybWFsU3RyZW5ndGgDBBgAGwtwYnJTdHJlbmd0aAMEGAAEAAAcC2dldFdvcmxkUG9zDgYAAB0IZnJhZ21lbnQOBgAAAgMcAR4DcG9zBQoEAAAFCwUFCB8FZGVwdGgDBAAACgkDPw4CAhcRAQkDOg4BAh4FCgUKAwAAAwAIIANydXYFDAQAAAkDKg4DAh4FCgIfAwEDAAAAAAAA8D8DBQwACCEEd3BvcwUMBAAABgECIAUMAgcHBQwACCIGcmVzdWx0BQsEAAAEBgIKAiEFDJIABQsKAiEFDAwAAwULBQsADQIiBQsAAAEdAAAFAgYEAhEDAQMAAAAAAADwPwMDCwIBAgUEBgQCDQUMCQMqDgQBAwAAAAAAAPA/AwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwGBAIZAwIRAwMGBAIaAwIRAwMGBAIbAwIRAwMABRMGBAIPBQoJAxMOAQQGAgoCCgULEQAFCgIWAwUKBQoFCgUKBgQCDQUMCQMhDgICEgoCDwUKBQwFDAgjCXNjcmVlblBvcwUKBAAABgIKAgsFDBEABQoKAgsFDAwAAwUKAAYEAhAFCwkCHA4BAiMFCgULBQsIJANkZHgFCwQAAAYDAhAFCwkCHA4BBgACIwUKCQMoDgIKAgMFCgAAAwEDAAAAAAAAAAADBQoFCgULBQsACCUDZGR5BQsEAAAGAwIQBQsJAhwOAQYAAiMFCgkDKA4CAQMAAAAAAAAAAAMKAgMFCgQAAwUKBQoFCwULAAgmC3dvcmxkTm9ybWFsBQsEAAAJAx8OAQkDHg4CAiUFCwIkBQsFCwULAAgnDHdvcmxkVGFuZ2VudAULBAAACQMeDgICJgULCQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DAQMAAAAAAAAAAAMFCwULAAgoBm5vcm1hbAUMBAAACgkDIQ4CAhMKAg8FCgUMkwMFDAAIKQFuBQsEAAACJgULAAgqAm5mBQsEAAAJAzkOAQIoBQwFCwAIKwR0YW5YBQsEAAAJAx8OAQoCJwULkgAFCwULAAgsBHRhblkFCwQAAAYBCQMeDgICKQULAisFCwULAQMAAAAAAADwvwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAioFCwAAAwIrBQsFCwYBCgIqBQsEAAMCLAULBQsFCwYBCgIqBQsIAAMCKQULBQsFCwULBQsFCwYEAhEDBgMBAwAAAAAAAPA/AwkDCA4CCQMPDgEGAQQGAwoCCAUKBAADAQMAAAAAAADgPwMDAwEDAAAAAAAAAEADAwMBAwAAAAAAAABAAwMDAwaBAhEDCQM1DgEGAwIRAwoJAyEOAgIUCgkDEw4BBAYBAg8FCgIVAwUKBQoFCgUMAAADAwMDBgQCGQMCEQMDBgQCGgMCEQMDBgQCGwMCEQMDAAAA";
prefab.TreeWindShader.SRC = "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";
prefab.TreeWind._ = hrt.prefab.Library.register("treeWind",prefab.TreeWind);
prefab.NormalFromHeightMap.SRC = "HXSLGnByZWZhYi5Ob3JtYWxGcm9tSGVpZ2h0TWFwDAEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACglwaXhlbFNpemUFCgIAAAsJaGVpZ2h0TWFwCgIAAAwJaW50ZW5zaXR5AwIAAA0IX19pbml0X18OBgAADgZ2ZXJ0ZXgOBgAADxBub3JtYWxGcm9tSGVpZ2h0DgYAABAIZnJhZ21lbnQOBgAABAINAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADgAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADDwIRAnV2BQoEAAASAmgwAwQAAAULBQwIEwZvZmZzZXQFCgQAAAIKBQoACBQCaDEDBAAABgEKCQMiDgMCCwoGAAIRBQoJAygOAgEDAAAAAAAAAAADCgITBQoEAAMFCgUKAQMAAAAAAAAAAAMFDAAAAwIMAwMACBUCaDIDBAAABgEKCQMiDgMCCwoGAAIRBQoJAygOAgoCEwUKAAADAQMAAAAAAAAAAAMFCgUKAQMAAAAAAAAAAAMFDAAAAwIMAwMACBYCaDMDBAAABgEKCQMiDgMCCwoGAAIRBQoJAygOAgEDAAAAAAAAAAADBwMKAhMFCgQAAwMFCgUKAQMAAAAAAAAAAAMFDAAAAwIMAwMACBcCaDQDBAAABgEKCQMiDgMCCwoGAAIRBQoJAygOAgcDCgITBQoAAAMDAQMAAAAAAAAAAAMFCgUKAQMAAAAAAAAAAAMFDAAAAwIMAwMACBgCdjEFCwQAAAkDKQ4DAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwYDAhQDAhIDAwULAAgZAnYyBQsEAAAJAykOAwEDAAAAAAAA8D8DAQMAAAAAAAAAAAMGAwIVAwISAwMFCwAIGgJ2MwULBAAACQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAA8L8DBgMCFgMCEgMDBQsACBsCdjQFCwQAAAkDKQ4DAQMAAAAAAADwvwMBAwAAAAAAAAAAAwYDAhcDAhIDAwULAAgcBm5vcm1hbAULBAAABgIEBgAGAAYACQMeDgICGAULAhkFCwULCQMeDgICGQULAhoFCwULBQsJAx4OAgIaBQsCGwULBQsFCwkDHg4CAhsFCwIYBQsFCwULBQsBAwAAAAAAABDAAwULAAYEAhwFCwkDHw4BAhwFCwULBQsNAhwFCwAAARAAAAUECB0BaAMEAAAKCQMhDgICCwoCCQUKBQwAAAMACB4CaDADBAAABgECHQMCDAMDAAgfBm5vcm1hbAULBAAACQIPDgICCQUKAh4DBQsABgQCCAUMCQMqDgIKCQM4DgECHwULBQySAAULAh0DBQwFDAA";
prefab.ZDecalShader.SRC = "HXSLE3ByZWZhYi5aRGVjYWxTaGFkZXIhAQZnbG9iYWwNAQMCCXBpeGVsU2l6ZQUKAAEAAwltb2RlbFZpZXcHAAEBAwQQbW9kZWxWaWV3SW52ZXJzZQcAAQEDAAAABQZjYW1lcmENAgEGD2ludmVyc2VWaWV3UHJvagcABQAAAAAHBm91dHB1dA0DBAgOYWxiZWRvU3RyZW5ndGgDBAcACQ5ub3JtYWxTdHJlbmd0aAMEBwAKC3BiclN0cmVuZ3RoAwQHAAsQZW1pc3NpdmVTdHJlbmd0aAMEBwAEAAAMCENFTlRFUkVEAgIAAQAAAAAADQpVU0VfQUxCRURPAgIAAQAAAAAADgpVU0VfTk9STUFMAgIAAQAAAAAADw5hbGJlZG9TdHJlbmd0aAMCAAAQDm5vcm1hbFN0cmVuZ3RoAwIAABELcGJyU3RyZW5ndGgDAgAAEhBlbWlzc2l2ZVN0cmVuZ3RoAwIAABMIZGVwdGhNYXARAQAAABQGbm9ybWFsBQsCAAAVB3RhbmdlbnQFCwIAABYJZmFkZVBvd2VyAwIAABcJZmFkZVN0YXJ0AwIAABgHZmFkZUVuZAMCAAAZDWFsYmVkb1RleHR1cmUKAgAAGg1ub3JtYWxUZXh0dXJlCgIAABsKcGJyVGV4dHVyZQoCAAAcDGNhbGN1bGF0ZWRVVgUKBAAAHRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAB4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB8YcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAgEXByb2plY3RlZFBvc2l0aW9uBQwEAAAhCnBpeGVsQ29sb3IFDAQAACIKZmFkZUZhY3RvcgMEAAAjBnpDb2xvcgULAgAAJA1HQU1NQV9DT1JSRUNUAgIAAQAAAAAAJQ5fX2luaXRfX3ZlcnRleA4GAAAmEF9faW5pdF9fZnJhZ21lbnQOBgAAJwpnZXRXb3JsUG9zDgYAACgNb3V0c2lkZUJvdW5kcw4GAAApCGZyYWdtZW50DgYAAAUCJQAABQIGBAIeBQsJAx8OAQQGAQIUBQsJAzIOAQIDBwYFCwULBQsFCwYEAh0FDAkDKg4CCQMfDgEEBgECFQULCQMyDgECAwcGBQsFCwULAQMAAAAAAADwPwMFDAUMAAImAAAFBQYEAggDCwINAgYBBgECDwMKAiEFDAwAAwMCIgMDAQMAAAAAAAAAAAMDAwYEAgkDCwIOAgYBBgECEAMKAiEFDAwAAwMCIgMDAQMAAAAAAAAAAAMDAwYEAgoDBgEGAQIRAwoCIQUMDAADAwIiAwMDBgQCCwMGAQYBAhIDCgIhBQwMAAMDAiIDAwMFCggqBm1hdHJpeAcEAAAGAQIGBwIEBwcACCsJc2NyZWVuUG9zBQoEAAAGAgoCIAUMEQAFCgoCIAUMDAADBQoACCwFZGVwdGgDBAAACQM/DgICExEBCQM6DgECKwUKBQoDAAgtA3J1dgUMBAAACQMqDgMCKwUKAiwDAQMAAAAAAADwPwMFDAAILgR3cG9zBQwEAAAGAQItBQwCKgcFDAAILwhsb2NhbFBvcwULBAAABAYCCgIuBQySAAULCgIuBQwMAAMFCwULAAYEAhwFCgoCLwULEQAFCgUKBgQCIgMGAwEDAAAAAAAA8D8DCQMXDgMJAwgOAgYCCQMWDgIBAwAAAAAAAAAAAwYDCQMPDgEGAQoCLwULCAADAQMAAAAAAAAAQAMDAwIXAwMDBAYDAhgDAhcDAwMDAhYDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwMLAgwCBoACHAUKAQMAAAAAAADgPwMFCgAACwkCKA4BAi8FCwIMAAAAAAADJwEwA3BvcwUKBAAABQsFBQgxBWRlcHRoAwQAAAoJAz8OAgITEQEJAzoOAQIwBQoFCgMAAAMACDIDcnV2BQwEAAAJAyoOAwIwBQoCMQMBAwAAAAAAAPA/AwUMAAgzBHdwb3MFDAQAAAYBAjIFDAIGBwUMAAg0BnJlc3VsdAULBAAABAYCCgIzBQySAAULCgIzBQwMAAMFCwULAA0CNAULAAADKAE1CGxvY2FsUG9zBQsEAAACBQENAQEAAgAAASkAAAUOCDYGbWF0cml4BwQAAAYBAgYHAgQHBwAINwlzY3JlZW5Qb3MFCgQAAAYCCgIgBQwRAAUKCgIgBQwMAAMFCgAIOAVkZXB0aAMEAAAJAz8OAgITEQEJAzoOAQI3BQoFCgMACDkDcnV2BQwEAAAJAyoOAwI3BQoCOAMBAwAAAAAAAPA/AwUMAAg6BHdwb3MFDAQAAAYBAjkFDAI2BwUMAAg7CGxvY2FsUG9zBQsEAAAEBgIKAjoFDJIABQsKAjoFDAwAAwULBQsACDwEcHBvcwUMBAAABgECOQUMAgYHBQwABgQCHwULBgIKAjwFDJIABQsKAjwFDAwAAwULBQsIPQVhbHBoYQMEAAAJAwgOAgYCBAYDCgI7BQsAAAMCFwMDAwIYAwMCFgMDAAaBAiEFDAkDKg4CAiMFCwI9AwUMBQwLAiQCBQEGgQoCIQUMkgAFCwoCIQUMkgAFCwULAAAABgQCCAMGAQIPAwI9AwMDBgQCCQMBAwAAAAAAAAAAAwMGBAIKAwEDAAAAAAAAAAADAwA";
prefab.ZDecal._ = hrt.prefab.Library.register("zDecal",prefab.ZDecal);
prefab.terrain.Terrain._ = hrt.prefab.Library.register("terrain",prefab.terrain.Terrain);
prefab.terrain.TerrainBlend.SRC = "HXSLG3ByZWZhYi50ZXJyYWluLlRlcnJhaW5CbGVuZBEBBGZyb20FCgIAAAICdG8FCgIAAAMTbm9ybWFsSGVpZ2h0VGV4dHVyZQoCAAAEBXJhbmdlAwIAAAUGcm90YXRlBQoCAAAGCXRyYW5zbGF0ZQUKAgAABwhpbnZTY2FsZQUKAgAACAVERUJVRwICAAEAAAAAAAkKc2hhZG93UGFzcwIEAAAKE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAsRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAwQcmVsYXRpdmVQb3NpdGlvbgULBAAADQpwaXhlbENvbG9yBQwEAAAODXRlcnJhaW5IZWlnaHQDBAAADw10ZXJyYWluTm9ybWFsBQsEAAAQEF9faW5pdF9fZnJhZ21lbnQOBgAAEQhmcmFnbWVudA4GAAACAhAAAAUBBQEGBAIJAgEBAAICAAABEQAABQoIEglyb3RhdGVQb3MFCgQAAAYACgIKBQsRAAUKAgYFCgUKAAYEAhIFCgkDKA4CBgMGAQoCEgUKAAADCgIFBQoAAAMDBgEKAhIFCgQAAwoCBQUKBAADAwMGAAYBCgISBQoAAAMKAgUFCgQAAwMGAQoCEgUKBAADCgIFBQoAAAMDAwUKBQoGgQISBQoCBwUKBQoIEwl0ZXJyYWluVVYFCgQAAAYCBAYDAhIFCgIBBQoFCgUKBAYACQMPDgECAgUKBQoJAw8OAQIBBQoFCgUKBQoFCgAIFBN0ZXJyYWluSGVpZ2h0Tm9ybWFsBQwEAAAKCQMhDgICAwoCEwUKBQyTAwUMAAYEAg4DCgIUBQwMAAMDBgQCDwULCgIUBQySAAULBQsIFQpibGVuZEFtb3V0AwQAAAYDAQMAAAAAAADwPwMJAwgOAgYDAQMAAAAAAADwPwMJAzUOAQYCBAYDCgIKBQsIAAMCDgMDAwIEAwMDAwEDAAAAAAAAAEADAwMACwIIAgYECgINBQySAAULCQMpDgECFQMFCwULBoEKAg0FDAwAAwIVAwMACwYOAgkCBgkKAg0FDAwAAwEDAAAAAAAA8D8DAgIMAAAAAA";
prefab.terrain.TerrainColorNormalShader.SRC = "HXSLJ3ByZWZhYi50ZXJyYWluLlRlcnJhaW5Db2xvck5vcm1hbFNoYWRlchABBXJhbmdlAwIAAAIEZnJvbQUKAgAAAwJ0bwUKAgAABA1hbGJlZG9UZXh0dXJlCgIAAAUTbm9ybWFsSGVpZ2h0VGV4dHVyZQoCAAAGBnJvdGF0ZQUKAgAABwl0cmFuc2xhdGUFCgIAAAgIaW52U2NhbGUFCgIAAAkFREVCVUcCAgABAAAAAAAKE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAsRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAwKcGl4ZWxDb2xvcgUMBAAADRByZWxhdGl2ZVBvc2l0aW9uBQsEAAAODXRlcnJhaW5Ob3JtYWwFCwQAAA8MdGVycmFpbkNvbG9yBQsEAAAQCGZyYWdtZW50DgYAAAEBEAAABQoIEQlyb3RhdGVQb3MFCgQAAAYACgIKBQsRAAUKAgcFCgUKAAYEAhEFCgkDKA4CBgMGAQoCEQUKAAADCgIGBQoAAAMDBgEKAhEFCgQAAwoCBgUKBAADAwMGAAYBCgIRBQoAAAMKAgYFCgQAAwMGAQoCEQUKBAADCgIGBQoAAAMDAwUKBQoGgQIRBQoCCAUKBQoIEgl0ZXJyYWluVVYFCgQAAAYCBAYDAhEFCgICBQoFCgUKBAYACQMPDgECAwUKBQoJAw8OAQICBQoFCgUKBQoFCgAIExN0ZXJyYWluSGVpZ2h0Tm9ybWFsBQwEAAAKCQMhDgICBQoCEgUKBQyTAwUMAAYEAg4FCwoJAzkOAQkDKg4CCgITBQySAAULAQMAAAAAAADwPwMFDAULkgAFCwULBgQCDwULCgkDIQ4CAgQKAhIFCgUMkgAFCwULCBQGYW1vdW50AwQAAAkDGg4DAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwkDNQ4BBgIKAg0FCwgAAwIBAwMDAwALAgkCBQIIFQpibGVuZEFtb3V0AwQAAAYDAQMAAAAAAADwPwMJAwgOAgYDAQMAAAAAAADwPwMJAzUOAQYCBAYDCgIKBQsIAAMKAhMFDAwAAwMDAgEDAwMDAQMAAAAAAAAAQAMDAwAGBAoCDAUMkgAFCwkDKQ4BAhUDBQsFCwAGBAoCDAUMkgAFCwkDGA4DAg8FCwoCDAUMkgAFCwIUAwULBQsABgQCCwULCQMYDgMCDgULAgsFCwIUAwULBQsA";
prefab.terrain._TerrainMesh.TerrainBakeShader.SRC = "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";
prefab.terrain._TerrainMesh.CopyHeightNormalShader.SRC = "HXSLMnByZWZhYi50ZXJyYWluLl9UZXJyYWluTWVzaC5Db3B5SGVpZ2h0Tm9ybWFsU2hhZGVyDQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgxzb3VyY2VIZWlnaHQKAgAACxBzb3VyY2VIZWlnaHRTaXplBQoCAAAMDHNvdXJjZU5vcm1hbAoCAAANBGZyb20FCgIAAA4CdG8FCgIAAA8IX19pbml0X18OBgAAEAZ2ZXJ0ZXgOBgAAEQhmcmFnbWVudA4GAAADAg8AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAQAAAFAgYEAgYFDAkDKg4DCQM7DgEJAxgOAwINBQoCDgUKCQM6DgECAgUKBQoFCgUKAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwGgQoCBgUMBAADAgQDAwABEQAABQEGBAIIBQwJAyoOAgoJAyEOAgIMCgIJBQoFDJIABQsKCQMhDgICCgoCCQUKBQwAAAMFDAUMAA";
shaders.AOEMaskingShader.SRC = "HXSLGHNoYWRlcnMuQU9FTWFza2luZ1NoYWRlcgAA";
shaders.AlphaGradient.SRC = "HXSLFXNoYWRlcnMuQWxwaGFHcmFkaWVudAUBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwV1R3JhZAMCAAIHAAAAAAAA8L8AAAAAAADwPwkBAAAABAV2R3JhZAMCAAIHAAAAAAAA8L8AAAAAAADwPwkBAAAABQpwaXhlbENvbG9yBQwEAAAGCGZyYWdtZW50DgYAAAEBBgAABQMIBwF1AwQAAAsGBwIDAwEDAAAAAAAAAAADAgYBAgMDCgICBQoAAAMDBgEEBwMCAwMDAwQGAwEDAAAAAAAA8D8DCgICBQoAAAMDAwMDAAgIAXYDBAAACwYHAgQDAQMAAAAAAAAAAAMCBgECBAMKAgIFCgQAAwMGAQQHAwIEAwMDBAYDAQMAAAAAAADwPwMKAgIFCgQAAwMDAwMABoEKAgUFDAwAAwYAAgcDAggDAwMA";
shaders.AlphaKill.SRC = "HXSLEXNoYWRlcnMuQWxwaGFLaWxsBAEJdGhyZXNob2xkAwIAAgcAAAAAAAAAAAAAAAAAAPA/CQEAAAACBnVzZVJHQgICAAEAAAAAAAMKcGl4ZWxDb2xvcgUMBAAABAhmcmFnbWVudA4GAAABAQQAAAUBCwICAgUBCwYJCQMWDgIJAxYOAgoCAwUMAAADCgIDBQwEAAMDCgIDBQwIAAMDAgEDAgwAAAAABQILBgkKAgMFDAwAAwIBAwIMAAAABgQKAgMFDAwAAwEDAAAAAAAA8D8DAwAAAA";
shaders.AlphaMap.SRC = "HXSLEHNoYWRlcnMuQWxwaGFNYXAOAQVpbnB1dA0BAQICdXYFCgEBAAEAAAMMdXNlU291cmNlVVZzAgIAAQAAAAAABAR3cmFwAgIAAQAAAAAABQZpbnZlcnQCAgABAAAAAAAGB3JlcGxhY2UCAgABAAAAAAAHB3RleHR1cmUKAgAACAVhbHBoYQMCAAIHAAAAAAAAAAAAAAAAAADwPwkBAAAACQZ1U2NhbGUDAgAACgZ2U2NhbGUDAgAACwd1T2Zmc2V0AwIAAQcAAAAAAADwvwAAAAAAAPA/DAd2T2Zmc2V0AwIAAQcAAAAAAADwvwAAAAAAAPA/DQxjYWxjdWxhdGVkVVYFCgQAAA4KcGl4ZWxDb2xvcgUMBAAADwhmcmFnbWVudA4GAAABAQ8AAAUHCBACdXYFCgQAAAsCAwICAgUKAg0FCgUKAAYEAhAFCgYABgECEAUKCQMoDgICCQMCCgMFCgUKCQMoDgICCwMCDAMFCgUKBQoLAgQCBgQCEAUKCQMoDgIGEwoCEAUKAAADAQMAAAAAAADwPwMDBhMKAhAFCgQAAwEDAAAAAAAA8D8DAwUKBQoAAAgRAWEDBAAACgkDIQ4CAgcKAhAFCgUMAAADAAsCBQIGBAIRAwYDAQMAAAAAAADwPwMCEQMDAwAABoECEQMCCAMDCwIGAgYECgIOBQwMAAMCEQMDBoEKAg4FDAwAAwIRAwMAAA";
shaders.AlphaMult.SRC = "HXSLEXNoYWRlcnMuQWxwaGFNdWx0AwEFYWxwaGEDAgABCQEAAAACCnBpeGVsQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAQaBCgICBQwMAAMCAQMDAA";
shaders.QuadAreaDisplay.SRC = "HXSLF3NoYWRlcnMuUXVhZEFyZWFEaXNwbGF5IwEGZ2xvYmFsDQEEAgR0aW1lAwABAAMJcGl4ZWxTaXplBQoAAQAECW1vZGVsVmlldwcAAQEDBRBtb2RlbFZpZXdJbnZlcnNlBwABAQMAAAAGBmNhbWVyYQ0CCgcEdmlldwcABgAIBHByb2oHAAYACQhwb3NpdGlvbgULAAYACghwcm9qRmxpcAMABgALCHByb2pEaWFnBQsABgAMCHZpZXdQcm9qBwAGAA0PaW52ZXJzZVZpZXdQcm9qBwAGAA4Fek5lYXIDAAYADwR6RmFyAwAGABADZGlyBQsDBgAAAAARBm91dHB1dA0DARIFY29sb3IFDAQRAAQAABMIZGVwdGhNYXARAQAAABQJbWFpbkFscGhhAwIAABUJZmFkZVBvd2VyAwIAABYJZmFkZVN0YXJ0AwIAABcHZmFkZUVuZAMCAAAYBmJvcmRlcgMCAAAZCFVTRV9CT0RZAgIAAQAAAAAAGg5JTlZFUlRfQk9EWV9VVgICAAEAAAAAABsLYm9keVRleHR1cmUKAgAAHApib2R5VGlsaW5nAwIAAB0NYm9keVRleEhlaWdodAMCAAAeClVTRV9CT1JERVICAgABAAAAAAAfEElOVkVSVF9CT1JERVJfVVYCAgABAAAAAAAgFlNDQUxFX0JPUkRFUl9PTl9SQURJVVMCAgABAAAAAAAhDWJvcmRlclRleHR1cmUKAgAAIgxib3JkZXJUaWxpbmcDAgAAIw9ib3JkZXJUZXhIZWlnaHQDAgAAJAxjYWxjdWxhdGVkVVYFCgQAACUKcGl4ZWxDb2xvcgUMBAAAJhByZWxhdGl2ZVBvc2l0aW9uBQsEAAAnGHBpeGVsVHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAKBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAKQhsb2NhbFBvcwULBAAAKgliYXNlQ29sb3IFDAIAACsJYm9keUNvbG9yBQwCAAAsC2JvcmRlckNvbG9yBQwCAAAtCnN0YXJ0V2lkdGgDAgAALghlbmRXaWR0aAMCAAAvBmxlbmd0aAMCAAAwCVVTRV9ERUNBTAICAAEAAAAAADENb3V0c2lkZUJvdW5kcw4GAAAyCGZyYWdtZW50DgYAAAIDMQACBQENBAYPBg8GDwYPBg8GBwoCKQULAAAD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";
shaders.DiscAreaDisplay.SRC = "HXSLF3NoYWRlcnMuRGlzY0FyZWFEaXNwbGF5MAEGZ2xvYmFsDQEEAgR0aW1lAwABAAMJcGl4ZWxTaXplBQoAAQAECW1vZGVsVmlldwcAAQEDBRBtb2RlbFZpZXdJbnZlcnNlBwABAQMAAAAGBmNhbWVyYQ0CCgcEdmlldwcABgAIBHByb2oHAAYACQhwb3NpdGlvbgULAAYACghwcm9qRmxpcAMABgALCHByb2pEaWFnBQsABgAMCHZpZXdQcm9qBwAGAA0PaW52ZXJzZVZpZXdQcm9qBwAGAA4Fek5lYXIDAAYADwR6RmFyAwAGABADZGlyBQsDBgAAAAARBm91dHB1dA0DARIFY29sb3IFDAQRAAQAABMIZGVwdGhNYXARAQAAABQJbWFpbkFscGhhAwIAABUJZmFkZVBvd2VyAwIAABYJZmFkZVN0YXJ0AwIAABcHZmFkZUVuZAMCAAAYBmJvcmRlcgMCAAAZCFVTRV9CT0RZAgIAAQAAAAAAGg5JTlZFUlRfQk9EWV9VVgICAAEAAAAAABsLYm9keVRleHR1cmUKAgAAHApib2R5VGlsaW5nAwIAAB0NYm9keVRleEhlaWdodAMCAAAeClVTRV9CT1JERVICAgABAAAAAAAfEElOVkVSVF9CT1JERVJfVVYCAgABAAAAAAAgFlNDQUxFX0JPUkRFUl9PTl9SQURJVVMCAgABAAAAAAAhDWJvcmRlclRleHR1cmUKAgAAIgxib3JkZXJUaWxpbmcDAgAAIw9ib3JkZXJUZXhIZWlnaHQDAgAAJAZyYWRpdXMDAgAAJQliYXNlQ29sb3IFDAIAACYJYm9keUNvbG9yBQwCAAAnC2JvcmRlckNvbG9yBQwCAAAoD1VTRV9TSURFX0JPUkRFUgICAAEAAAAAACkQSU5WRVJUX1NJREVfVVZfWAICAAEAAAAAACoQSU5WRVJUX1NJREVfVVZfWQICAAEAAAAAACsIbWluQW5nbGUDAgAALAhtYXhBbmdsZQMCAAAtC3NpZGVUZXh0dXJlCgIAAC4Rc2lkZVRleHR1cmVIZWlnaHQDAgAALwlzaWRlQ29sb3IFDAIAADANc2lkZVRoaWNrbmVzcwMCAAAxCnNpZGVUaWxpbmcDAgAAMghVU0VfSUNPTgICAAEAAAAAADMMVVNFX01VTFRJUExZAgIAAQAAAAAA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";
shaders.AutoAlpha.SRC = "HXSLEXNoYWRlcnMuQXV0b0FscGhhAwEFc2NhbGUDAgABCQEAAAACCnBpeGVsQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAQYECgICBQwMAAMGAQkDNQ4BBAkDFg4CCQMWDgIKAgIFDAAAAwoCAgUMBAADAwoCAgUMCAADAwMDAgEDAwMA";
shaders.BlurredBackground.SRC = "HXSLGXNoYWRlcnMuQmx1cnJlZEJhY2tncm91bmQNAQdibHVyVGV4CgIAAAIFaW5wdXQNAQMDCHBvc2l0aW9uBQoBAgAEAnV2BQoBAgAFBWNvbG9yBQwBAgABAAAGBm91dHB1dA0CAgcIcG9zaXRpb24FDAQGAAgFY29sb3IFDAQGAAQAAAkEdGltZQMAAAAKDnNwcml0ZVBvc2l0aW9uBQwEAAALEGFic29sdXRlUG9zaXRpb24FDAQAAAwKcGl4ZWxDb2xvcgUMBAAADQx0ZXh0dXJlQ29sb3IFDAQAAA4MY2FsY3VsYXRlZFVWBQoDAAAPDm91dHB1dFBvc2l0aW9uBQwEAAAQBW91dFVWBQoEAAARBnZlcnRleA4GAAASCGZyYWdtZW50DgYAAAIAEQAABQEGBAIQBQoJAzoOAQYCCgIPBQwRAAUKCgIPBQwMAAMFCgUKBQoAARIAAAUCCwYFCgIMBQwMAAMBAwAAAAAAAAAAAwIMAAAABgQKAgwFDJIABQsJAxgOAwoJAyEOAgIBCgIQBQoFDJIABQsKAgwFDJIABQsKAgwFDAwAAwULBQsA";
shaders.CampGrass.SRC = "HXSLEXNoYWRlcnMuQ2FtcEdyYXNzDwEGY2FtZXJhDQEKAgR2aWV3BwABAAMEcHJvagcAAQAECHBvc2l0aW9uBQsAAQAFCHByb2pGbGlwAwABAAYIcHJvakRpYWcFCwABAAcIdmlld1Byb2oHAAEACA9pbnZlcnNlVmlld1Byb2oHAAEACQV6TmVhcgMAAQAKBHpGYXIDAAEACwNkaXIFCwMBAAAAAAwGZ2xvYmFsDQIEDQR0aW1lAwAMAA4JcGl4ZWxTaXplBQoADAAPCW1vZGVsVmlldwcADAEDEBBtb2RlbFZpZXdJbnZlcnNlBwAMAQMAAAARBWlucHV0DQMCEghwb3NpdGlvbgULAREAEwZub3JtYWwFCwERAAEAABQGb3V0cHV0DQQFFQhwb3NpdGlvbgUMBBQAFgVjb2xvcgUMBBQAFwVkZXB0aAMEFAAYBm5vcm1hbAULBBQAGQl3b3JsZERpc3QDBBQABAAAGhByZWxhdGl2ZVBvc2l0aW9uBQsEAAAbE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAABwYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAdEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAeEXByb2plY3RlZFBvc2l0aW9uBQwEAAAfCnBpeGVsQ29sb3IFDAQAACAFZGVwdGgDBAAAIQhzY3JlZW5VVgUKBAAAIglzcGVjUG93ZXIDBAAAIwlzcGVjQ29sb3IFCwQAACQJd29ybGREaXN0AwQAAAA";
shaders.ColorMap.SRC = "HXSLEHNoYWRlcnMuQ29sb3JNYXAHAQlVU0VfQUxQSEECAgABAAAAAAACBmNvbG9yQQULAgABCQEAAAADBnBvaW50QQMCAAEJAQAAAAQGY29sb3JCBQsCAAEJAQAAAAUGcG9pbnRCAwIAAQkBAAAABgpwaXhlbENvbG9yBQwEAAAHCGZyYWdtZW50DgYAAAEBBwAABQIICAF0AwQAAAsCAQIKAgYFDAwAAwoCBgUMAAADAwAGgQoCBgUMkgAFCwkDGA4DAgIFCwIEBQsJAxoOAwIDAwIFAwIIAwMFCwULAA";
shaders.ColorMap3.SRC = "HXSLEXNoYWRlcnMuQ29sb3JNYXAzCAEGY29sb3JBBQsCAAEJAQAAAAIGcG9pbnRBAwIAAQkBAAAAAwZjb2xvckIFCwIAAQkBAAAABAZwb2ludEIDAgABCQEAAAAFBmNvbG9yQwULAgABCQEAAAAGBnBvaW50QwMCAAEJAQAAAAcKcGl4ZWxDb2xvcgUMBAAACAhmcmFnbWVudA4GAAABAQgAAAUCCAkBdAMEAAAKAgcFDAAAAwAGgQoCBwUMkgAFCwkDGA4DAgEFCwkDGA4DAgMFCwIFBQsJAxoOAwIEAwIGAwIJAwMFCwkDGg4DAgIDAgQDAgkDAwULBQsA";
shaders.ColorMult.SRC = "HXSLEXNoYWRlcnMuQ29sb3JNdWx0BAEFY29sb3IFCwIAAQkBAAAAAgZhbW91bnQDAgABCQEAAAADCnBpeGVsQ29sb3IFDAQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQYECgIDBQySAAULCQMYDgMKAgMFDJIABQsGAQoCAwUMkgAFCwIBBQsFCwICAwULBQsA";
shaders.ColorSet.SRC = "HXSLEHNoYWRlcnMuQ29sb3JTZXQEAQVjb2xvcgULAgABCQEAAAACBmFtb3VudAMCAAEJAQAAAAMKcGl4ZWxDb2xvcgUMBAAABAhmcmFnbWVudA4GAAABAQQAAAUBBgQKAgMFDJIABQsJAxgOAwoCAwUMkgAFCwIBBQsCAgMFCwULAA";
shaders.Curvature.SRC = "HXSLEXNoYWRlcnMuQ3VydmF0dXJlBAEJY2FtVGFyZ2V0BQoCAAACCWN1cnZhdHVyZQMCAAADE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAQGdmVydGV4DgYAAAEABAAABQQIBQR3cG9zBQoEAAAKAgMFCxEABQoACAYEZGVsdAUKBAAABgIEBgMCAQUKCgIDBQsRAAUKBQoFCgEDAAAAAAAAWUADBQoACAcGZGlzdFNxAwQAAAYABgEKAgYFCgAAAwoCBgUKAAADAwYBCgIGBQoEAAMKAgYFCgQAAwMDAAaDCgIDBQsIAAMGAQIHAwICAwMDAA";
shaders.DepthBlend.SRC = "HXSLEnNoYWRlcnMuRGVwdGhCbGVuZAwBCnBpeGVsQ29sb3IFDAQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAABAVkZXB0aAMEAAAFCHNjcmVlblVWBQoEAAAGBmNhbWVyYQ0BCQcEdmlldwcABgAIBHByb2oHAAYACQhwb3NpdGlvbgULAAYACghwcm9qRmxpcAMABgALCHByb2pEaWFnBQsABgAMCHZpZXdQcm9qBwAGAA0PaW52ZXJzZVZpZXdQcm9qBwAGAA4Fek5lYXIDAAYADwR6RmFyAwAGAAAAABAIZGVwdGhNYXARAQAAABEHUkVWRVJTRQICAAEAAAAAABIFcmFuZ2UDAgABBwAAAAAAAAAAAAAAAAAAWUATBXBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAFAlsaW5lYXJpemUOBgAAFQhmcmFnbWVudA4GAAACAxQBFgFkAwQAAAMFAwgXAW4DBAAAAg4DAAgYAWYDBAAAAg8DAA0GAgQGAQYBAQMAAAAAAAAAQAMCFwMDAhgDAwMEBgMGAAIYAwIXAwMGAQQGAwYBAQMAAAAAAAAAQAMCFgMDAQMAAAAAAADwPwMDAwQGAwIYAwIXAwMDAwMDAwAAARUAAAUFCBkKd29ybGREZXB0aAMEAAAJAhQOAQoJAz8OAgIQEQECBQUKAwAAAwMACBoLb2JqZWN0RGVwdGgDBAAACQIUDgECBAMDAAgbBGRpZmYDBAAACQMPDgEGAwIZAwIaAwMDAAgcBWFscGhhAwQAAAkDCA4CCQMXDgMGAgQGAwISAwIbAwMDAhIDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAhMDAwAGgQoCAQUMDAADCwIRAgIcAwYDAQMAAAAAAADwPwMCHAMDAwMA";
shaders.Dissolve.SRC = "HXSLEHNoYWRlcnMuRGlzc29sdmUFAQpwaXhlbENvbG9yBQwEAAACCHByb2dyZXNzAwIAAQkBAAAAAwpzYXR1cmF0aW9uAwIAAQkBAAAABAV3aWR0aAMCAAEJAQAAAAUIZnJhZ21lbnQOBgAAAQEFAAAFAwgGBGVkZ2UDBAAACQMYDgMGAAEDAAAAAAAA8D8DAgQDAwcDAgQDAwICAwMACAcEcmFtcAMEAAAJAzUOAQYCBgEEBgABAwAAAAAAAPA/AwIDAwMDBAYDAgQDCQMPDgEGAwIGAwoCAQUMAAADAwMDAwMCBAMDAwAGgQoCAQUMDAADAgcDAwA";
shaders.DissolveMap.SRC = "HXSLE3NoYWRlcnMuRGlzc29sdmVNYXARAQpwaXhlbENvbG9yBQwEAAACBmdsb2JhbA0BAQMEdGltZQMAAgAAAAAEBWlucHV0DQIBBQJ1dgUKAQQAAQAABgd0ZXh0dXJlCgIAAAcMdXNlU291cmNlVVZzAgIAAQAAAAAACAh1c2VTY2FsZQICAAEAAAAAAAkEd3JhcAICAAEAAAAAAAoIcHJvZ3Jlc3MDAgABCQEAAAALCnNhdHVyYXRpb24DAgABCQEAAAAMBXdpZHRoAwIAAQkBAAAADQd1dlNoaWZ0BQoCAAEJAQAAAA4MdXZTaGlmdFNwZWVkBQoCAAEJAQAAAA8MdXZTY2FsZVNwZWVkBQoCAAEJAQAAABAIdXZTY2FsZVgDAgABCQEAAAARCHV2U2NhbGVZAwIAAQkBAAAAEgxjYWxjdWxhdGVkVVYFCgQAABMIZnJhZ21lbnQOBgAAAQETAAAFCQgUAnV2BQoEAAALAgcCAgUFCgISBQoFCgALAggCBQIGgQoCFAUKAAADBgACEAMGAQoCDwUKAAADAgMDAwMDBoEKAhQFCgQAAwYAAhEDBgEKAg8FCgQAAwIDAwMDAwAAAAaAAhQFCgYAAg0FCgYBAg4FCgIDAwUKBQoFCgsCCQIGBAIUBQoJAygOAgYTCgIUBQoAAAMBAwAAAAAAAPA/AwMGEwoCFAUKBAADAQMAAAAAAADwPwMDBQoFCgAACBUDcGl4BQwEAAAJAyEOAgIGCgIUBQoFDAAIFgF0AwQAAAoCFQUMAAADAAgXBGVkZ2UDBAAACQMYDgMGAAEDAAAAAAAA8D8DAgwDAwcDAgwDAwIKAwMACBgEcmFtcAMEAAAJAzUOAQYCBgEEBgABAwAAAAAAAPA/AwILAwMDBAYDAgwDCQMPDgEGAwIXAwIWAwMDAwMDAgwDAwMABoEKAgEFDAwAAwYBAhgDCgIVBQwMAAMDAwA";
shaders.DistortionMap.SRC = "HXSLFXNoYWRlcnMuRGlzdG9ydGlvbk1hcAkBBmNhbWVyYQ0BCgIEdmlldwcAAQADBHByb2oHAAEABAhwb3NpdGlvbgULAAEABQhwcm9qRmxpcAMAAQAGCHByb2pEaWFnBQsAAQAHCHZpZXdQcm9qBwABAAgPaW52ZXJzZVZpZXdQcm9qBwABAAkFek5lYXIDAAEACgR6RmFyAwABAAsDZGlyBQsDAQAAAAAMBmdsb2JhbA0CBA0EdGltZQMADAAOCXBpeGVsU2l6ZQUKAAwADwltb2RlbFZpZXcHAAwBAxAQbW9kZWxWaWV3SW52ZXJzZQcADAEDAAAAEQVpbnB1dA0DARICdXYFCgERAAEAABMNZGlzdG9ydGlvbkRpcgoCAAEJAQAAABQJaW50ZW5zaXR5AwIAAQkBAAAAFQxjYWxjdWxhdGVkVVYFCgQAABYKcGl4ZWxDb2xvcgUMBAAAFwZ2ZXJ0ZXgOBgAAGAhmcmFnbWVudA4GAAACABcAAAUBBgQCFQUKAhIFCgUKAAEYAAAFAggZD2Rpc3RvcnRpb25WYWx1ZQUKBAAABAYBBAYDCgkDIQ4CAhMKBhMCFQUKAQMAAAAAAADwPwMFCgUMEQAFCgEDAAAAAAAA4D8DBQoFCgEDAAAAAAAAAEADBQoFCgAGBAIWBQwJAyoOAwYBCgIZBQoRAAUKAhQDBQoBAwAAAAAAAAAAAwoCFgUMDAADBQwFDAA";
shaders.DistortionNormal.SRC = "HXSLGHNoYWRlcnMuRGlzdG9ydGlvbk5vcm1hbBEBBmNhbWVyYQ0BCgIEdmlldwcAAQADBHByb2oHAAEABAhwb3NpdGlvbgULAAEABQhwcm9qRmxpcAMAAQAGCHByb2pEaWFnBQsAAQAHCHZpZXdQcm9qBwABAAgPaW52ZXJzZVZpZXdQcm9qBwABAAkFek5lYXIDAAEACgR6RmFyAwABAAsDZGlyBQsDAQAAAAAMBmdsb2JhbA0CBA0EdGltZQMADAAOCXBpeGVsU2l6ZQUKAAwADwltb2RlbFZpZXcHAAwBAxAQbW9kZWxWaWV3SW52ZXJzZQcADAEDAAAAEQVpbnB1dA0DAhIIcG9zaXRpb24FCwERABMGbm9ybWFsBQsBEQABAAAUBm91dHB1dA0EBRUIcG9zaXRpb24FDAQUABYFY29sb3IFDAQUABcFZGVwdGgDBBQAGAZub3JtYWwFCwQUABkJd29ybGREaXN0AwQUAAQAABoQcmVsYXRpdmVQb3NpdGlvbgULBAAAGxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAcGHBpeGVsVHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHRF0cmFuc2Zvcm1lZE5vcm1hbAULBAAAHhFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAHwpwaXhlbENvbG9yBQwEAAAgBWRlcHRoAwQAACEIc2NyZWVuVVYFCgQAACIJc3BlY1Bvd2VyAwQAACMJc3BlY0NvbG9yBQsEAAAkCXdvcmxkRGlzdAMEAAAlCWludGVuc2l0eQMCAAEJAQAAACYIZnJhZ21lbnQOBgAAAQEmAAAFAggnCmRpc3RvcnRpb24FCwQAAAYBCQMfDgEEBgECHQULCQMyDgECAgcGBQsFCwULAiUDBQsABgQCHwUMCQMqDgMGAQoCJwULEQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoBAwAAAAAAAAAAAwoCHwUMDAADBQwFDAA";
shaders.FakeLight.SRC = "HXSLEXNoYWRlcnMuRmFrZUxpZ2h0FwEGY2FtZXJhDQEKAgR2aWV3BwABAAMEcHJvagcAAQAECHBvc2l0aW9uBQsAAQAFCHByb2pGbGlwAwABAAYIcHJvakRpYWcFCwABAAcIdmlld1Byb2oHAAEACA9pbnZlcnNlVmlld1Byb2oHAAEACQV6TmVhcgMAAQAKBHpGYXIDAAEACwNkaXIFCwMBAAAAAAwGZ2xvYmFsDQIEDQR0aW1lAwAMAA4JcGl4ZWxTaXplBQoADAAPCW1vZGVsVmlldwcADAEDEBBtb2RlbFZpZXdJbnZlcnNlBwAMAQMAAAARBWlucHV0DQMCEghwb3NpdGlvbgULAREAEwZub3JtYWwFCwERAAEAABQGb3V0cHV0DQQFFQhwb3NpdGlvbgUMBBQAFgVjb2xvcgUMBBQAFwVkZXB0aAMEFAAYBm5vcm1hbAULBBQAGQl3b3JsZERpc3QDBBQABAAAGhByZWxhdGl2ZVBvc2l0aW9uBQsEAAAbE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAABwYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAdEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAeEXByb2plY3RlZFBvc2l0aW9uBQwEAAAfCnBpeGVsQ29sb3IFDAQAACAFZGVwdGgDBAAAIQhzY3JlZW5VVgUKBAAAIglzcGVjUG93ZXIDBAAAIwlzcGVjQ29sb3IFCwQAACQJd29ybGREaXN0AwQAACUJaW50ZW5zaXR5AwIAACYFcG93ZXIDAgAAJwt1c2VFbWlzc2l2ZQICAAEAAAAAACgGc2hhZG93AwIAACkKc2hhZG93U3BhbgMCAAAqBHVzZVkCAgABAAAAAAArDWVtaXNzaXZlVmFsdWUDBAAALAhmcmFnbWVudA4GAAABASwAAAUFCC0FbGlnaHQDBAAABgEJAwgOAgkDFg4CAQMAAAAAAAAAAAMKAh0FCwgAAwMCJgMDAiUDAwALAicCBgQCKwMCLQMDBoAKAh8FDJIABQsJAykOAwItAwItAwItAwULBQsACC4BegMEAAALAioCCgIaBQsEAAMKAhoFCwgAAwMACC8Ic2hhZEdyYWQDBAAACQMaDgMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBgICLgMCKQMDAwAGBAoCHwUMkgAFCwkDGA4DCgIfBQySAAULBgEKAh8FDJIABQsCLwMFCwIoAwULBQsA";
shaders.Fresnel.SRC = "HXSLD3NoYWRlcnMuRnJlc25lbAwBCnBpeGVsQ29sb3IFDAQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABANSR0ICAgABAAAAAAAFBUFMUEhBAgIAAQAAAAAABgdSRVZFUlNFAgIAAQAAAAAABwZjYW1lcmENAQEICHBvc2l0aW9uBQsABwAAAAAJBWNvbG9yBQsCAAEJAQAAAAoEYmlhcwMCAAEJAQAAAAsFc2NhbGUDAgABCQEAAAAMBXBvd2VyAwIAAQkBAAAADQhmcmFnbWVudA4GAAABAQ0AAAUFCA4JY2FtZXJhRGlyBQsEAAAJAx8OAQQGAwICBQsCCAULBQsFCwULAAgPB2ZyZXNuZWwDBAAAAQMAAAAAAAAAAAMACwIGAgYEAg8DCQMXDgMGAAIKAwYBAgsDBAYDAQMAAAAAAADwPwMJAwgOAgYAAQMAAAAAAADwPwMJAx0OAgIOBQsCAwULAwMCDAMDAwMDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwYEAg8DCQMXDgMGAAIKAwYBAgsDCQMIDgIGAAEDAAAAAAAA8D8DCQMdDgICDgULAgMFCwMDAgwDAwMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwMDAAsCBAIGBAoCAQUMkgAFCwkDGA4DCgIBBQySAAULAgkFCwIPAwULBQsAAAsCBQIGgQoCAQUMDAADAg8DAwAAAA";
shaders.MonsterDeformShader.SRC = "HXSLG3NoYWRlcnMuTW9uc3RlckRlZm9ybVNoYWRlchIBBmNhbWVyYQ0BCgIEdmlldwcAAQADBHByb2oHAAEABAhwb3NpdGlvbgULAAEABQhwcm9qRmxpcAMAAQAGCHByb2pEaWFnBQsAAQAHCHZpZXdQcm9qBwABAAgPaW52ZXJzZVZpZXdQcm9qBwABAAkFek5lYXIDAAEACgR6RmFyAwABAAsDZGlyBQsDAQAAAAAMBmdsb2JhbA0CBA0EdGltZQMADAAOCXBpeGVsU2l6ZQUKAAwADwltb2RlbFZpZXcHAAwBAxAQbW9kZWxWaWV3SW52ZXJzZQcADAEDAAAAEQVpbnB1dA0DAhIIcG9zaXRpb24FCwERABMGbm9ybWFsBQsBEQABAAAUBm91dHB1dA0EBRUIcG9zaXRpb24FDAQUABYFY29sb3IFDAQUABcFZGVwdGgDBBQAGAZub3JtYWwFCwQUABkJd29ybGREaXN0AwQUAAQAABoQcmVsYXRpdmVQb3NpdGlvbgULBAAAGxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAcGHBpeGVsVHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHRF0cmFuc2Zvcm1lZE5vcm1hbAULBAAAHhFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAHwpwaXhlbENvbG9yBQwEAAAgBWRlcHRoAwQAACEIc2NyZWVuVVYFCgQAACIJc3BlY1Bvd2VyAwQAACMJc3BlY0NvbG9yBQsEAAAkCXdvcmxkRGlzdAMEAAAlBXNwZWVkAwIAACYOX19pbml0X192ZXJ0ZXgOBgAAJwZ2ZXJ0ZXgOBgAAAgImAAAFAQaACgIaBQsEAAMGAQkDAw4BBgAKAhoFCwAAAwYBBgECDQMBAwAAAAAAAAhAAwMCJQMDAwMBAzMzMzMzM9M/AwMDAAAnAAAFAQaACgIbBQsIAAMGAQkDAg4BBgAGAQoCGgULAAADAQMAAAAAAADgPwMDBgEGAQINAwEDAAAAAAAAJEADAwIlAwMDAwEDmpmZmZmZ2T8DAwMA";
shaders.OffsetShadowBiasShader.SRC = "HXSLHnNoYWRlcnMuT2Zmc2V0U2hhZG93Qmlhc1NoYWRlcgQBCmJpYXNPZmZzZXQDAgAAAgdjdXN0b20yAwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQYEAgIDAgEDAwA";
shaders.OldBlurPass.__meta__ = { obj : { ignore : ["shader"]}, fields : { quality : { range : [1,4,1], inspect : null}, sigma : { range : [0,2], inspect : null}, passes : { range : [0,5,1], inspect : null}, gain : { range : [0,5,1], inspect : null}}};
shaders.Pestifered.SRC = "HXSLEnNoYWRlcnMuUGVzdGlmZXJlZAgBB3RleHR1cmUKAgAAAgVzY2FsZQMCAAADBWNvbG9yBQsCAAAED3JvdWdobmVzc0FmZmVjdAMCAAAFCnBpeGVsQ29sb3IFDAQAAAYMY2FsY3VsYXRlZFVWBQoEAAAHCXJvdWdobmVzcwMEAAAICGZyYWdtZW50DgYAAAEBCAAABQMICQFrAwQAAAYDAQMAAAAAAADwPwMKCQMhDgICAQoGAQIGBQoCAgMFCgUMAAADAwAGBAoCBQUMkgAFCwkDGA4DCgIFBQySAAULAgMFCwIJAwULBQsGgAIHAwYBAgQDAgkDAwMA";
shaders.SSSFlesh.SRC = "HXSLEHNoYWRlcnMuU1NTRmxlc2gGAQlpbnRlbnNpdHkDAgABCQEAAAACE3RyYW5zbHVjZW5jeVRleHR1cmUKAgABCQEAAAADB2N1c3RvbTIDBAAABApwaXhlbENvbG9yBQwEAAAFDGNhbGN1bGF0ZWRVVgUKBAAABghmcmFnbWVudA4GAAABAQYAAAUBBgQCAwMGAQYBAgEDCgIEBQwMAAMDCgkDIQ4CAgIKAgUFCgUMAAADAwMA";
shaders.ShadowFadeShader.SRC = "HXSLGHNoYWRlcnMuU2hhZG93RmFkZVNoYWRlcgcBA2VuZAMCAAACBXN0YXJ0AwIAAAMFcG93ZXIDAgAABAZjYW1Qb3MFCwIAAAUGc2hhZG93AwQAAAYTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAABwhmcmFnbWVudA4GAAABAQcAAAUCCAgEZmFkZQMEAAAGAgQGAwkDGw4BBAYDAgQFCwIGBQsFCwULAwICAwMDBAYDAgEDAgIDAwMDAAYEAgUDCQMYDgMCBQMBAwAAAAAAAPA/AwkDCA4CCQM1DgECCAMDAgMDAwMDAA";
shaders.UVDistortion.SRC = "HXSLFHNoYWRlcnMuVVZEaXN0b3J0aW9uCQEGZ2xvYmFsDQEBAgR0aW1lAwABAAAAAAMFaW5wdXQNAgEEAnV2BQoBAwABAAAFDG5vaXNlVGV4dHVyZQoCAAAGEGRpcmVjdGlvbmFsTm9pc2UCAgABAAAAAAAHCWludGVuc2l0eQMCAAEJAQAAAAgLc2Nyb2xsU3BlZWQFCgIAAQkBAAAACQVzY2FsZQUKAgABCQEAAAAKDGNhbGN1bGF0ZWRVVgUKBAAACwhmcmFnbWVudA4GAAABAQsAAAUCCAwFbm9pc2UFCgQAAAYBCgkDIQ4CAgUKBhMEBgAGAQIEBQoCCQUKBQoGAQIIBQoCAgMFCgUKBQoBAwAAAAAAAPA/AwUKBQwRAAUKAgcDBQoABoACCgUKCwIGAgoCDAUKEQAFCgoCDAUKAQAFCgUKBQoA";
shaders.UVGradient.SRC = "HXSLEnNoYWRlcnMuVVZHcmFkaWVudAUBBXVHcmFkAwIAAgcAAAAAAADwvwAAAAAAAPA/CQEAAAACBXZHcmFkAwIAAgcAAAAAAADwvwAAAAAAAPA/CQEAAAADCnBpeGVsQ29sb3IFDAQAAAQMY2FsY3VsYXRlZFVWBQoEAAAFCGZyYWdtZW50DgYAAAEBBQAABQMIBgF1AwQAAAsGBwIBAwEDAAAAAAAAAAADAgYBAgEDCgIEBQoAAAMDBgEEBwMCAQMDAwQGAwEDAAAAAAAA8D8DCgIEBQoAAAMDAwMDAAgHAXYDBAAACwYHAgIDAQMAAAAAAAAAAAMCBgECAgMKAgQFCgQAAwMGAQQHAwICAwMDBAYDAQMAAAAAAADwPwMKAgQFCgQAAwMDAwMABoEKAgMFDJIABQsJAykOAQYAAgYDAgcDAwULBQsA";
shaders.UVMultiply.SRC = "HXSLEnNoYWRlcnMuVVZNdWx0aXBseQMBBXZhbHVlBQoCAAEJAQAAAAIMY2FsY3VsYXRlZFVWBQoEAAADBnZlcnRleA4GAAABAAMAAAUBBoECAgUKAgEFCgUKAA";
shaders.UVSweep.SRC = "HXSLD3NoYWRlcnMuVVZTd2VlcAkBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhwcm9ncmVzcwMCAAEJAQAAAAQKc2F0dXJhdGlvbgMCAAEJAQAAAAUFd2lkdGgDAgABCQEAAAAGBHVzZVUCAgABAAAAAAAHCnBpeGVsQ29sb3IFDAQAAAgMY2FsY3VsYXRlZFVWBQoEAAAJBnZlcnRleA4GAAAKCGZyYWdtZW50DgYAAAIACQAABQEGBAIIBQoCAgUKBQoAAQoAAAUECAsEZWRnZQMEAAAJAxgOAwYAAQMAAAAAAADwPwMCBQMDBwMCBQMDAgMDAwAIDARheGlzAwQAAAsCBgIKAggFCgAAAwoCCAUKBAADAwAIDQRyYW1wAwQAAAkDNQ4BBgIGAQQGAAEDAAAAAAAA8D8DAgQDAwMEBgMCBQMJAw8OAQYDAgsDAgwDAwMDAwMCBQMDAwAGgQIHBQwJAyoOAQINAwUMBQwA";
shaders.UVTransform.SRC = "HXSLE3NoYWRlcnMuVVZUcmFuc2Zvcm0LAQZnbG9iYWwNAQECBHRpbWUDAAEAAAAAAwVpbnB1dA0CAQQCdXYFCgEDAAEAAAUGc2hpZnRYAwIAAQkBAAAABgZzaGlmdFkDAgABCQEAAAAHC3NoaWZ0U3BlZWRYAwIAAQkBAAAACAtzaGlmdFNwZWVkWQMCAAEJAQAAAAkGc2NhbGVYAwIAAQkBAAAACgZzY2FsZVkDAgABCQEAAAALDVVTRV9TT1VSQ0VfVVYCAgACAAAAAAAJAQAAAAwMY2FsY3VsYXRlZFVWBQoEAAANCGZyYWdtZW50DgYAAAEBDQAABQILAgsCBgQCDAUKAgQFCgUKAAAGBAIMBQoGAQQGAAYAAgwFCgYBCQMoDgICBwMCCAMFCgICAwUKBQoJAygOAgIFAwIGAwUKBQoFCgkDKA4CAgkDAgoDBQoFCgUKAA";
shaders.UnitShape.SRC = "HXSLEXNoYWRlcnMuVW5pdFNoYXBlBAEFY29sb3IFCwIAAAIFYWxwaGEDAgAAAwpwaXhlbENvbG9yBQwEAAAECGZyYWdtZW50DgYAAAEBBAAABQEGBAIDBQwJAyoOAgIBBQsCAgMFDAUMAA";
shaders.VertexDisplacement.SRC = "HXSLGnNoYWRlcnMuVmVydGV4RGlzcGxhY2VtZW50DAETdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAhF0cmFuc2Zvcm1lZE5vcm1hbAULBAAAAwFYAgIAAQAAAAAABAFZAgIAAQAAAAAABQFaAgIAAQAAAAAABgVpbnB1dA0BAQcCdXYFCgEGAAEAAAgGZ2xvYmFsDQICCQltb2RlbFZpZXcHAAgBAwoEdGltZQMACAAAAAALA3RleAoCAAAMCWludGVuc2l0eQMCAAEJAQAAAA0Lc2Nyb2xsU3BlZWQFCgIAAQkBAAAADgpzbW9vdGhFZGdlAwIAAQkBAAAADwZ2ZXJ0ZXgOBgAAAQAPAAAFBAgQDmRpc3BsYWNlbWVudFVWBQoEAAAGAAIHBQoGAQINBQoCCgMFCgUKAAYEAhAFCgYTAhAFCgEDAAAAAAAA8D8DBQoFCggRBm9mZnNldAULBAAABgEGAQYBAgIFCwoJAyIOAwILCgIQBQoBAwAAAAAAAAAAAwUMAAADBQsCDAMFCwkDKQ4DCQMmDgELAgMCAQIBAAAAAQECAAAAAAEBAwkDJg4BCwIEAgECAQAAAAEBAgAAAAABAQMJAyYOAQsCBQIBAgEAAAABAQIAAAAAAQEDBQsFCwAGgAIBBQsCEQULBQsA";
shaders.WorldMapDirShadow.SRC = "HXSLGXNoYWRlcnMuV29ybGRNYXBEaXJTaGFkb3cSAQZlbmFibGUCAgABAAAAAAACB1VTRV9FU00CAgABAAAAAAADC3NoYWRvd1Bvd2VyAwIAAAQHVVNFX1BDRgICAAEAAAAAAAULUENGX1NBTVBMRVMBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0JZGlyU2hhZG93AwQAAA4LcG9pc3NvbkRpc2sPBQwFAgAADwdjdXN0b20yAwQAABARdHJhbnNmb3JtZWROb3JtYWwFCwQAABEEcmFuZA4GAAASCGZyYWdtZW50DgYAAAIDEQETAXYDBAAAAwUCCBQCZHADBAAACQMdDgIJAyoOAQITAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhQDAwEDUPwYc9Fd5UADAwMAAAESAAAFAgsCAQIFAwgVCmJpYXNPZmZzZXQDBAAAAg8DAAgWC3BjZkluY3JlYXNlAwQAAAYBAg8DAQMAAAAAAMByQAMDAAsCBAIFCwYEAgwDAQMAAAAAAADwPwMDCBcJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgYCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBkIc2hhZG93VXYFCgQAAAkDOg4BCgIYBQsRAAUKBQoACBoEek1heAMEAAAJAzUOAQoCGAULCAADAwAIGwNyb3QDBAAABgEGAQkCEQ4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwAIHARjb3NSAwQAAAkDAw4BAhsDAwAIHQRzaW5SAwQAAAkDAg4BAhsDAwAIHg5zYW1wbGVTdHJlbmd0aAMEAAAGAgEDAAAAAAAA8D8DCQMmDgECBQEDAwAIHwhvZmZTY2FsZQUKBAAABgEGAQIXBQoCBgMFCgQGAAEDAAAAAAAA8D8DAhYDAwMFCgAOIAFpAQQAAAYVAQIAAAAAAQIFAQ8BAAAFBAghBm9mZnNldAUKBAAABgEKEQIODwUMBQIgAQUMEQAFCgIfBQoFCgAGBAIhBQoJAygOAgYDBgECHAMKAiEFCgAAAwMGAQIdAwoCIQUKBAADAwMGAAYBAhwDCgIhBQoEAAMDBgECHQMKAiEFCgAAAwMDBQoFCggiBWRlcHRoAwQAAAkDQA4DAggRAQYAAhkFCgIhBQoFCgEDAAAAAAAAAAADAwAGgwIMAwsEBgcGAwIaAwQGAAIKAwIVAwMDAwIiAwICAh4DAQMAAAAAAAAAAAMDAwAAAAsCAgIFBQgjCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCQFZGVwdGgDBAAACQM/DgICCBEBCQM6DgEKAiMFCxEABQoFCgMACCUEek1heAMEAAAJAzUOAQoCIwULCAADAwAIJgVkZWx0YQMEAAAGAwkDFQ4CBAYABgACJAMCCgMDAhUDAwMCJQMDAiUDAwAGBAIMAwkDNQ4BCQMJDgEGAQIDAwImAwMDAwMABQQIJwlzaGFkb3dQb3MFCwQAAAYBAgsFCwIJCAULAAgoCHNoYWRvd1V2BQoEAAAJAzoOAQoCJwULEQAFCgUKAAgpBWRlcHRoAwQAAAkDPw4CAggRAQoCKAUKEQAFCgMABgQCDAMLBgcGAwkDNQ4BCgInBQsIAAMDBAYAAgoDAhUDAwMDAikDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
shaders.WorldUV.SRC = "HXSLD3NoYWRlcnMuV29ybGRVVgcBBXNjYWxlAwIAAQkBAAAAAghyb3RhdGlvbgMCAAIHAAAAAAAAAAAAAAAAAIB2QAkBAAAAAwVpbnB1dA0BAgQGbm9ybWFsBQsBAwAFB3RhbmdlbnQFCwEDAAEAAAYMY2FsY3VsYXRlZFVWBQoEAAAHE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAgSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAJBnZlcnRleA4GAAABAAkAAAUGCAoBcAUKBAAACQMoDgIGAQoCBwULAAADAgEDAwYBCgIHBQsEAAMCAQMDBQoACAsCY3IDBAAACQMDDgEGAgYBAgIDAQMYLURU+yEJQAMDAQMAAAAAAIBmQAMDAwAIDAJzcgMEAAAJAwIOAQYCBgECAgMBAxgtRFT7IQlAAwMBAwAAAAAAgGZAAwMDAAYECgIGBQoAAAMGAwYBCgIKBQoAAAMCCwMDBgEKAgoFCgQAAwIMAwMDAwYECgIGBQoEAAMGAAYBCgIKBQoEAAMCCwMDBgEKAgoFCgAAAwIMAwMDAwYEAggFDAkDKg4EAgsDBwMCDAMDAQMAAAAAAAAAAAMLBgcJAx0OAgIFBQsCBQULAwEDAAAAAAAA4D8DAgEDAAAAAAAA8D8DAQMAAAAAAADwvwMDBQwFDAA";
shaders.ZoneBorder.SRC = "HXSLEnNoYWRlcnMuWm9uZUJvcmRlcgMBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGZyYWdtZW50DgYAAAEBBAAABQEGgQoCAwUMDAADCgICBQoEAAMDAA";

//# sourceMappingURL=hide-plugin.js.map